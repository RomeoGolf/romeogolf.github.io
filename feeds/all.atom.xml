<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>RomeoGolf</title><link href="http://romeogolf.github.io/" rel="alternate"></link><link href="http://romeogolf.github.io/feeds/all.atom.xml" rel="self"></link><id>http://romeogolf.github.io/</id><updated>2017-06-03T15:00:00+05:00</updated><entry><title>USB-polygon-10: Таблица памяти для имитации ФС</title><link href="http://romeogolf.github.io/usb-polygon-10.html" rel="alternate"></link><updated>2017-06-03T15:00:00+05:00</updated><author><name>RomeoGolf</name></author><id>tag:romeogolf.github.io,2017-06-03:usb-polygon-10.html</id><summary type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;Структура памяти&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;Главная загрузочная запись&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#mbr"&gt;Общая структура MBR&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;Запись раздела&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#mbr_1"&gt;MBR для имитации&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;Загрузочная запись раздела&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fat"&gt;Таблица FAT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#root"&gt;Файловая запись root&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;Прочие файловые записи&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#const"&gt;Важные константы&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;Структура памяти&lt;/h2&gt;
&lt;p&gt;При имитации файловой системы (&lt;abbr title="файловая система"&gt;ФС&lt;/abbr&gt;) необходимо отвечать операционной системе на команды чтения и записи. Для этого необходимо знать, что находилось бы по конкретным адресам памяти, если бы память на самом деле была. Следует составить таблицу соответствия данных адресам, эту таблицу будет реализовывать имитирующая программа, отдавая правильные ответы на запрошенные адреса в операциях чтения. Операции записи же поначалу будем игнорировать, делая вид, что все удачно записалось, позже посмотрим, нельзя ли использовать и запись тоже.&lt;/p&gt;
&lt;p&gt;Нужна таблица памяти. И даже не одна. Логично представить структуру фиктивной памяти в нескольких таблицах. Первая будет показывать область памяти, не зависящую от используемой &lt;abbr title="файловая система"&gt;ФС&lt;/abbr&gt; и необходимую любому носителю информации в той или иной форме: &lt;abbr title="(Master Boot Record) Главная загрузочная запись"&gt;MBR&lt;/abbr&gt;, master boot record &amp;mdash; главная загрузочная запись (или учет сапога хозяина, если хотите). Вторая таблица нужна для описания &lt;abbr title="(Partition Boot Record) Загрузочная запись раздела"&gt;PBR&lt;/abbr&gt;, partition boot record, на первый взгляд не имеющей непосредственного отношения к &lt;abbr title="файловая система"&gt;ФС&lt;/abbr&gt;, но уже являющийся ее частью. Третья таблица будет описывать таблицу размещения файлов, &lt;abbr title="(File Allocation Table) Таблица размещения файлов"&gt;FAT&lt;/abbr&gt; (file allocation table). Затем должна следовать запись, описывающая корневой каталог. В оставшейся памяти будет размещаться собственно информация носителя &amp;mdash; папки и файлы. Эту зону можно тоже условно представить в виде примерной таблицы, хотя ее наполнение уже не является жестко фиксированным, в отличие от предыдущих.&lt;/p&gt;
&lt;p&gt;Будет использоваться адресация &lt;abbr title="(Logical Block Addressing) Система адресации данных в виде последовательно расположенных блоков данных"&gt;LBA&lt;/abbr&gt; и термин &amp;laquo;сектор&amp;raquo;, обозначающий в данном контексте не сектор физического диска, а логический блок, имеющий размер те же традиционные 512 байтов, что и сектор.&lt;/p&gt;
&lt;h2 id="_2"&gt;Главная загрузочная запись&lt;/h2&gt;
&lt;p&gt;&lt;abbr title="(Master Boot Record) Главная загрузочная запись"&gt;MBR&lt;/abbr&gt; &amp;mdash; запись, которая обязана присутствовать на любом носителе информации, если есть необходимость работать с ним стандартными способами. Есть оговорки. Во-первых, устройство хранения информации (микросхема, карта памяти, USB-носитель) может работать и в &amp;laquo;сыром&amp;raquo; режиме, без файловой системы с постраничной записью и посекторным чтением более-менее стандартными способами &amp;mdash; функциями &lt;abbr title="операционная система"&gt;ОС&lt;/abbr&gt; вроде ReadFile(). Но это потребует изрядной порции дополнительной работы для обращения к носителю. Во-вторых, сегодня &lt;abbr title="(Master Boot Record) Главная загрузочная запись"&gt;MBR&lt;/abbr&gt; &amp;mdash; не единственный вариант, например, GPT &amp;mdash; GUID Partition Table. Но в целях имитации флэш-памяти это все неважно, интересует именно &lt;abbr title="(Master Boot Record) Главная загрузочная запись"&gt;MBR&lt;/abbr&gt;.&lt;/p&gt;
&lt;h3 id="mbr"&gt;Общая структура &lt;abbr title="(Master Boot Record) Главная загрузочная запись"&gt;MBR&lt;/abbr&gt;&lt;/h3&gt;
&lt;p&gt;Таблица 1. Структура классической &lt;abbr title="(Master Boot Record) Главная загрузочная запись"&gt;MBR&lt;/abbr&gt;&lt;/p&gt;
&lt;div class="colortable"&gt;&lt;/div&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;Адрес&lt;/th&gt;
&lt;th&gt;Описание&lt;/th&gt;
&lt;th align="center"&gt;Размер, байтов&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;000h&lt;/td&gt;
&lt;td&gt;Код загрузчика&lt;/td&gt;
&lt;td align="center"&gt;446&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1BEh&lt;/td&gt;
&lt;td&gt;1. Запись раздела&lt;/td&gt;
&lt;td align="center"&gt;16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1CEh&lt;/td&gt;
&lt;td&gt;2. Запись раздела&lt;/td&gt;
&lt;td align="center"&gt;16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1DEh&lt;/td&gt;
&lt;td&gt;3. Запись раздела&lt;/td&gt;
&lt;td align="center"&gt;16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1EEh&lt;/td&gt;
&lt;td&gt;4. Запись раздела&lt;/td&gt;
&lt;td align="center"&gt;16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1FEh&lt;/td&gt;
&lt;td&gt;Сигнатура &lt;abbr title="(Base Input-Output System) Базовая система ввода-вывода"&gt;BIOS&lt;/abbr&gt; (55h AAh)&lt;/td&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Код загрузчика (первая строчка таблицы) &amp;mdash; в сущности, программа, которую должен выполнить процессор, если в параметрах &lt;abbr title="(Base Input-Output System) Базовая система ввода-вывода"&gt;BIOS&lt;/abbr&gt; указано загружаться с данного устройства. Ему, процессору, предоставляют это устройство для чтения команд и выставляют счетчик команд в ноль. Если он &amp;mdash; процессор &amp;mdash; находит там команды, то начинает их выполнять. В эти 446 байтов можно попытаться запихать весь загрузчик, то есть программу, заставляющую загрузить &lt;abbr title="операционная система"&gt;ОС&lt;/abbr&gt; в оперативную память и передающую ей управление. Если загрузчик достаточно сложный (типа GRUB или из последних версий Windows), то в этот кусочек памяти он не поместится, придется разместить там предзагрузчик, который загрузит основной загрузчик и передаст управление ему. Существуют также другие варианты &lt;abbr title="(Master Boot Record) Главная загрузочная запись"&gt;MBR&lt;/abbr&gt;, отличающиеся составом первых 446 байтов, где для кода загрузки отведено меньше места, зато добавлена всяческая дополнительная служебная информация.&lt;/p&gt;
&lt;p&gt;Однако, все это имеет смысл для носителей информации, которые могут использоваться в качестве загрузочных. К имитируемой флэшке это не относится, поэтому там будут нули.&lt;/p&gt;
&lt;p&gt;И это очень хорошо. Нет необходимости хранить в памяти все необходимые записи целиком, из-за чего терялся бы смысл имитации, проще было бы разместить реальные записи в реальной памяти. А так можно не тратить память на хранение нулей, а просто отвечать нулями на адреса от 0 до 1BDh, и такой пустой участок не единственный.&lt;/p&gt;
&lt;p&gt;Далее идут записи раздела: набор полей данных, описывающих первичные разделы на носителе информации, четыре штуки. И завершает запись &lt;abbr title="(Master Boot Record) Главная загрузочная запись"&gt;MBR&lt;/abbr&gt; фиксированная двухбайтовая константа, служащая для сигнализации окончания структуры и для проверки ее правильности.&lt;/p&gt;
&lt;h3 id="_3"&gt;Запись раздела&lt;/h3&gt;
&lt;p&gt;Таблица 2. Структура записи раздела&lt;/p&gt;
&lt;div class="colortable"&gt;&lt;/div&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;Адрес&lt;/th&gt;
&lt;th&gt;Описание&lt;/th&gt;
&lt;th align="center"&gt;Размер, байтов&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;00h&lt;/td&gt;
&lt;td&gt;Статус раздела:&lt;br&gt;0 - неактивный&lt;br&gt;80h - активный&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;01h&lt;/td&gt;
&lt;td&gt;Головка, на которой начинается раздел&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;02h&lt;/td&gt;
&lt;td&gt;Дорожка, на которой начинается раздел (биты 16-6)&lt;br&gt;сектор, на котором начинается раздел (биты 5-0)&lt;/td&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;04h&lt;/td&gt;
&lt;td&gt;Тип раздела:&lt;br&gt;1h - FAT12&lt;br&gt;4h - FAT16&amp;lt;32Мб&lt;br&gt;6h - FAT16&amp;gt;32Мб&lt;br&gt;Bh - FAT32&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;05h&lt;/td&gt;
&lt;td&gt;Головка, на которой заканчивается раздел&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;06h&lt;/td&gt;
&lt;td&gt;Дорожка, на которой заканчивается раздел (биты 16-6)&lt;br&gt;сектор, на котором заканчивается раздел (биты 5-0)&lt;/td&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;08h&lt;/td&gt;
&lt;td&gt;Расстояние между сектором &lt;abbr title="(Master Boot Record) Главная загрузочная запись"&gt;MBR&lt;/abbr&gt; и первым сектором раздела, в секторах&lt;/td&gt;
&lt;td align="center"&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;0Ch&lt;/td&gt;
&lt;td&gt;Общее число секторов в разделе&lt;/td&gt;
&lt;td align="center"&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Адрес в таблице 2 относительный, то есть, от начала записи раздела.&lt;/p&gt;
&lt;p&gt;Таких структур первичных разделов может быть 4. Первичный раздел может содержать ряд расширенных разделов. Но, опять же, в рамках проекта USB-polygon это не важно. Здесь вполне достаточно одного раздела, а это значит, что записи разделов 2, 3 и 4 будут заполнены нулями и сэкономят место при имитации.&lt;/p&gt;
&lt;h3 id="mbr_1"&gt;&lt;abbr title="(Master Boot Record) Главная загрузочная запись"&gt;MBR&lt;/abbr&gt; для имитации&lt;/h3&gt;
&lt;p&gt;Теперь можно заполнить таблицу с данными, которые должны выдаваться по определенным адресам, передаваемым от компьютера при попытке прочитать главную загрузочную запись.&lt;/p&gt;
&lt;p id="table3"&gt;Таблица 3. Итоговая &lt;abbr title="(Master Boot Record) Главная загрузочная запись"&gt;MBR&lt;/abbr&gt;&lt;/p&gt;
&lt;div class="colortable"&gt;&lt;/div&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;Адр.&lt;/th&gt;
&lt;th&gt;Описание&lt;/th&gt;
&lt;th align="center"&gt;Разм.&lt;/th&gt;
&lt;th align="center"&gt;r:c&lt;/th&gt;
&lt;th&gt;hex&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;000h&lt;/td&gt;
&lt;td&gt;Код загрузчика&lt;/td&gt;
&lt;td align="center"&gt;446&lt;/td&gt;
&lt;td align="center"&gt;00:00 .. 27:13&lt;/td&gt;
&lt;td&gt;0&amp;hellip;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1BEh&lt;/td&gt;
&lt;td&gt;Начало раздела 1.&lt;br&gt;Статус раздела:&lt;br&gt;0 - неактивный&lt;br&gt;80h - активный&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;27:14&lt;/td&gt;
&lt;td&gt;00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1BFh&lt;/td&gt;
&lt;td&gt;Головка, на которой начинается раздел&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;27:15&lt;/td&gt;
&lt;td&gt;00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1C0h&lt;/td&gt;
&lt;td&gt;Дорожка, на которой начинается раздел (биты 16-6)&lt;br&gt;сектор, на котором начинается раздел (биты 5-0)&lt;/td&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="center"&gt;28:00&lt;/td&gt;
&lt;td&gt;00 00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1C2h&lt;/td&gt;
&lt;td&gt;Тип раздела:&lt;br&gt;1h - FAT12&lt;br&gt;4h - FAT16&amp;lt;32Мб&lt;br&gt;6h - FAT16&amp;gt;32Мб&lt;br&gt;Bh – FAT32&lt;br&gt;Ch – FAT32 c &lt;abbr title="(Logical Block Addressing) Система адресации данных в виде последовательно расположенных блоков данных"&gt;LBA&lt;/abbr&gt;&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;28:02&lt;/td&gt;
&lt;td&gt;0C&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1C3h&lt;/td&gt;
&lt;td&gt;Головка, на которой заканчивается раздел&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;28:03&lt;/td&gt;
&lt;td&gt;00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1C4h&lt;/td&gt;
&lt;td&gt;Дорожка, на которой заканчивается раздел (биты 16-6)&lt;br&gt;сектор, на котором заканчивается раздел (биты 5-0)&lt;/td&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="center"&gt;28:04&lt;/td&gt;
&lt;td&gt;00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1C6h&lt;/td&gt;
&lt;td&gt;Расстояние между сектором &lt;abbr title="(Master Boot Record) Главная загрузочная запись"&gt;MBR&lt;/abbr&gt; и первым сектором раздела, в секторах&lt;/td&gt;
&lt;td align="center"&gt;4&lt;/td&gt;
&lt;td align="center"&gt;28:06&lt;/td&gt;
&lt;td&gt;3E 00 00 00 (62&lt;sub&gt;dec&lt;/sub&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1CAh&lt;/td&gt;
&lt;td&gt;Общее число секторов в разделе&lt;/td&gt;
&lt;td align="center"&gt;4&lt;/td&gt;
&lt;td align="center"&gt;28:10&lt;/td&gt;
&lt;td&gt;00 10 00 00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1CEh&lt;/td&gt;
&lt;td&gt;Запись раздела 2&lt;/td&gt;
&lt;td align="center"&gt;16&lt;/td&gt;
&lt;td align="center"&gt;28:14 .. 29:13&lt;/td&gt;
&lt;td&gt;0&amp;hellip;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1DEh&lt;/td&gt;
&lt;td&gt;Запись раздела 3&lt;/td&gt;
&lt;td align="center"&gt;16&lt;/td&gt;
&lt;td align="center"&gt;29:14 .. 30:13&lt;/td&gt;
&lt;td&gt;0&amp;hellip;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1EEh&lt;/td&gt;
&lt;td&gt;Запись раздела 4&lt;/td&gt;
&lt;td align="center"&gt;16&lt;/td&gt;
&lt;td align="center"&gt;30:14 .. 31:13&lt;/td&gt;
&lt;td&gt;0&amp;hellip;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1FEh&lt;/td&gt;
&lt;td&gt;Сигнатура &lt;abbr title="(Base Input-Output System) Базовая система ввода-вывода"&gt;BIOS&lt;/abbr&gt;&lt;/td&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="center"&gt;31:14&lt;/td&gt;
&lt;td&gt;55 AA&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Комментарии к таблице:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Первая колонка (Адр.) &amp;mdash; адрес в памяти устройства, при обращении к которому &lt;abbr title="операционная система"&gt;ОС&lt;/abbr&gt; &lt;abbr title="Персональный компьютер"&gt;ПК&lt;/abbr&gt; надеется получить информацию, описанную в данной строке.&lt;/li&gt;
&lt;li&gt;Вторая колонка (Описание) &amp;mdash; что должно содержаться по указанному адресу.&lt;/li&gt;
&lt;li&gt;Третья колонка (Разм.) &amp;mdash; размер поля в байтах.&lt;/li&gt;
&lt;li&gt;Четвертая колонка (r:c) &amp;mdash; row:column &amp;mdash; представление адреса в таком виде, как если бы блок информации отображался в традиционных HEX-редакторах, в виде набора строк по 16 байтов, то есть, номер строки и номер байта в ней. Эта колонка пригодится при реальной передаче данных от самодельного устройства в ответ на запросы &lt;abbr title="операционная система"&gt;ОС&lt;/abbr&gt;, так как при использовании библиотеки LUFA контроллер передает информацию пачками по 16 байтов. Таким образом, в этой колонке показаны номер пачки и номер байта в пачке.&lt;/li&gt;
&lt;li&gt;Пятая колонка (hex) &amp;mdash; байты в шестнадцатеричной форме, которые должны быть переданы в данном конкретном случае.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;В этой и следующих таблицах в пятой колонке кроме hex-данных могут быть десятичные числа, помеченные &amp;laquo;dec&amp;raquo;, и строки, в которых пробелы заменены подчеркиванием &amp;laquo;_&amp;raquo;. При передаче строк символы заменяются их кодами, естественно. В программе на языке С же можно в качестве передаваемого байта указать как его код, так и сам символ в одинарных кавычках, конечно же.&lt;/p&gt;
&lt;p&gt;Пояснения по данным:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Код загрузчика отсутствует, на запрос выдавать нули. Загружаться с фейковой флэшки не планируется (хотя, мысль интересная, можно однажды попробовать&amp;hellip;)&lt;/li&gt;
&lt;li&gt;Статус первого раздела: неактивный, ноль, по той же причине &amp;mdash; грузиться отсюда не будем.&lt;/li&gt;
&lt;li&gt;Головка, дорожка и сектор начала раздела выдаются нулями, потому что адресация &lt;abbr title="(Cylinder, Head, Sector) Система адресации сектора, основанная на использовании физических адресов геометрии диска"&gt;CHS&lt;/abbr&gt; не используется, используется &lt;abbr title="(Logical Block Addressing) Система адресации данных в виде последовательно расположенных блоков данных"&gt;LBA&lt;/abbr&gt;.&lt;/li&gt;
&lt;li&gt;Тип раздела: 0C, что соответствует FAT32 с адресацией &lt;abbr title="(Logical Block Addressing) Система адресации данных в виде последовательно расположенных блоков данных"&gt;LBA&lt;/abbr&gt;.&lt;/li&gt;
&lt;li&gt;Головка, дорожка и сектор окончания раздела также выдается нулями.&lt;/li&gt;
&lt;li&gt;Начало первого сектора раздела: соответствует 62 сектору.&lt;/li&gt;
&lt;li&gt;Число секторов в разделе: попробуем для начала 4к секторов, а там посмотрим. Получится 2 097 152 байтов.&lt;/li&gt;
&lt;li&gt;Записи разделов 2, 3 и 4 забиваем нулями.&lt;/li&gt;
&lt;li&gt;Сигнатура фиксированная, может быть только 55AA.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Подробнее про начало сектора: почему именно 62? Не знаю. Так получилось. Во флэшках, отформатированных в Windows, обычно 62. Во флэшках, отформатированных в FAT32 в Linux может быть другой адрес, обычно меньше. Есть подозрение, что число появилось из порядка загрузки: &lt;abbr title="(Master Boot Record) Главная загрузочная запись"&gt;MBR&lt;/abbr&gt;, найдя активный раздел (помеченный, как 80) считывает его загрузочный сектор и помещает по физическому адресу 7C00&lt;sub&gt;hex&lt;/sub&gt;, что в секторах соответствует как раз 62. Что мешает взять сектор, лежащий существенно ближе, и записать его в 62 сектор оперативки? Я не знаю. Предполагаю, что это может как-то упростить операции переписывания данных: с какого адреса взяли, по такому и записали, только в другое устройство. Но это не очень важно. Можно поэкспериментировать, &amp;laquo;двигая&amp;raquo; этот адрес. Для реальной флэшки смещение загрузочного сектора раздела поможет сэкономить напрасно неиспользуемое место, а для фиктивной флэшки вообще ни на что не влияет. Поэтому ставлю 62, оно реально работает, а там посмотрим.&lt;/p&gt;
&lt;p&gt;Теперь про общее число секторов в разделе. Вообще-то, FAT32 сама хранит информацию о своем разделе, и я читал, что Windows игнорирует эту запись в &lt;abbr title="(Master Boot Record) Главная загрузочная запись"&gt;MBR&lt;/abbr&gt;. Но пока оставлю так.&lt;/p&gt;
&lt;p&gt;Итого: при запросе &lt;abbr title="(Master Boot Record) Главная загрузочная запись"&gt;MBR&lt;/abbr&gt; устройству надо будет отдать всего 5 ненулевых байтов.&lt;/p&gt;
&lt;h2 id="_4"&gt;Загрузочная запись раздела&lt;/h2&gt;
&lt;p&gt;В литературе встречаются обозначения &lt;abbr title="(Partition Boot Record) Загрузочная запись раздела"&gt;PBR&lt;/abbr&gt; и VBR &amp;mdash; Partition и Volume Boot Record. Адресация здесь ведется от начала раздела, так как раздел может быть практически где угодно, проще будет потом прибавить смещение.&lt;/p&gt;
&lt;p&gt;Загрузочначя запись начинает раздел. Раздел, как договаривались, будет &amp;laquo;отформатирован&amp;raquo; в FAT32. А файловые системы &lt;abbr title="(File Allocation Table) Таблица размещения файлов"&gt;FAT&lt;/abbr&gt; состоят из 4 областей:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0: Зарезервированная область&lt;/li&gt;
&lt;li&gt;1: Область &lt;abbr title="(File Allocation Table) Таблица размещения файлов"&gt;FAT&lt;/abbr&gt;&lt;/li&gt;
&lt;li&gt;2: Область корневого каталога (для версий &lt;abbr title="(File Allocation Table) Таблица размещения файлов"&gt;FAT&lt;/abbr&gt; до FAT32)&lt;/li&gt;
&lt;li&gt;3: Область файлов и каталогов&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Загрузочная запись раздела находится в первом секторе зарезервированной области. Его иногда называют &amp;laquo;загрузочный сектор&amp;raquo;, &amp;laquo;зарезервированный сектор&amp;raquo; или &amp;laquo;нулевой сектор&amp;raquo;&lt;/p&gt;
&lt;p id="table4"&gt;Таблица 4. Загрузочная запись раздела&lt;/p&gt;
&lt;div class="colortable"&gt;&lt;/div&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;Адр.&lt;/th&gt;
&lt;th&gt;Описание&lt;/th&gt;
&lt;th align="center"&gt;Разм.&lt;/th&gt;
&lt;th align="center"&gt;r:c&lt;/th&gt;
&lt;th&gt;hex&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;00h&lt;/td&gt;
&lt;td&gt;Указание перехода + NOP&lt;/td&gt;
&lt;td align="center"&gt;3&lt;/td&gt;
&lt;td align="center"&gt;00:00..00:02&lt;/td&gt;
&lt;td&gt;EB 58 90&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;03h&lt;/td&gt;
&lt;td&gt;OEM название&lt;/td&gt;
&lt;td align="center"&gt;8&lt;/td&gt;
&lt;td align="center"&gt;00:03..00:10&lt;/td&gt;
&lt;td&gt;4D 53 44 4F 53 35 2E 30 (&amp;ldquo;MSDOS5.0&amp;rdquo;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;0Bh&lt;/td&gt;
&lt;td&gt;Количество байтов в секторе на жестком диске&lt;/td&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="center"&gt;00:11..00:12&lt;/td&gt;
&lt;td&gt;00 02 (512&lt;sub&gt;dec&lt;/sub&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;0Dh&lt;/td&gt;
&lt;td&gt;Количество секторов в кластере&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;00:13&lt;/td&gt;
&lt;td&gt;08&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;0Eh&lt;/td&gt;
&lt;td&gt;Количество зарезервированных секторов&lt;/td&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="center"&gt;00:14..00:15&lt;/td&gt;
&lt;td&gt;01 00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;10h&lt;/td&gt;
&lt;td&gt;Количество копий &lt;abbr title="(File Allocation Table) Таблица размещения файлов"&gt;FAT&lt;/abbr&gt;, как правило, 2&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;01:00&lt;/td&gt;
&lt;td&gt;02&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;11h&lt;/td&gt;
&lt;td&gt;Количество возможных записей в корневом каталоге&lt;/td&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="center"&gt;01:01&lt;/td&gt;
&lt;td&gt;00 00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;13h&lt;/td&gt;
&lt;td&gt;Количество секторов в маленьком разделе&lt;/td&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="center"&gt;01:03&lt;/td&gt;
&lt;td&gt;00 00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;15h&lt;/td&gt;
&lt;td&gt;Тип носителя:&lt;br&gt;F8 для жестких дисков&lt;br&gt;F0 для дискет&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;01:05&lt;/td&gt;
&lt;td&gt;F8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;16h&lt;/td&gt;
&lt;td&gt;Секторов на &lt;abbr title="(File Allocation Table) Таблица размещения файлов"&gt;FAT&lt;/abbr&gt; (FAT12/FAT16)&lt;/td&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="center"&gt;01:06&lt;/td&gt;
&lt;td&gt;00 00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;18h&lt;/td&gt;
&lt;td&gt;Секторов на дорожку&lt;/td&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="center"&gt;01:08&lt;/td&gt;
&lt;td&gt;63&lt;sub&gt;dec&lt;/sub&gt; 00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1Ah&lt;/td&gt;
&lt;td&gt;Число головок&lt;/td&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="center"&gt;01:10&lt;/td&gt;
&lt;td&gt;FF 00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1Ch&lt;/td&gt;
&lt;td&gt;Зарезервированные сектора в начале жесткого диска&lt;/td&gt;
&lt;td align="center"&gt;4&lt;/td&gt;
&lt;td align="center"&gt;01:12..01:15&lt;/td&gt;
&lt;td&gt;62&lt;sub&gt;dec&lt;/sub&gt; 00 00 00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;20h&lt;/td&gt;
&lt;td&gt;Количество секторов в большом разделе&lt;/td&gt;
&lt;td align="center"&gt;4&lt;/td&gt;
&lt;td align="center"&gt;02:00..02:03&lt;/td&gt;
&lt;td&gt;00 10 00 00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;24h&lt;/td&gt;
&lt;td&gt;Размер одной &lt;abbr title="(File Allocation Table) Таблица размещения файлов"&gt;FAT&lt;/abbr&gt; в секторах (FAT32)&lt;/td&gt;
&lt;td align="center"&gt;4&lt;/td&gt;
&lt;td align="center"&gt;02:04..02:07&lt;/td&gt;
&lt;td&gt;08 00 00 00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;28h&lt;/td&gt;
&lt;td&gt;Номер главной таблицы &lt;abbr title="(File Allocation Table) Таблица размещения файлов"&gt;FAT&lt;/abbr&gt;&lt;/td&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="center"&gt;02:08&lt;/td&gt;
&lt;td&gt;00 00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;2Ah&lt;/td&gt;
&lt;td&gt;Версия FAT32 (обычно 0)&lt;/td&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="center"&gt;02:10&lt;/td&gt;
&lt;td&gt;00 00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;2Ch&lt;/td&gt;
&lt;td&gt;Первый кластер корневого каталога (обычно 2)&lt;/td&gt;
&lt;td align="center"&gt;4&lt;/td&gt;
&lt;td align="center"&gt;02:12..02:15&lt;/td&gt;
&lt;td&gt;02 00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;30h&lt;/td&gt;
&lt;td&gt;Номер сектора структуры FSINFO (обычно 1)&lt;/td&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="center"&gt;03:00&lt;/td&gt;
&lt;td&gt;01 00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;32h&lt;/td&gt;
&lt;td&gt;Номер сектора - копии загрузочного (обычно 6)&lt;/td&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="center"&gt;03:02&lt;/td&gt;
&lt;td&gt;06 00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;34h&lt;/td&gt;
&lt;td&gt;Зарезервировано&lt;/td&gt;
&lt;td align="center"&gt;12&lt;/td&gt;
&lt;td align="center"&gt;03:04..03:15&lt;/td&gt;
&lt;td&gt;00&amp;hellip;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;40h&lt;/td&gt;
&lt;td&gt;Номер дисковода для функций &lt;abbr title="(Base Input-Output System) Базовая система ввода-вывода"&gt;BIOS&lt;/abbr&gt;&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;04:00&lt;/td&gt;
&lt;td&gt;80&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;41h&lt;/td&gt;
&lt;td&gt;Зарезервировано&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;04:01&lt;/td&gt;
&lt;td&gt;00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;42h&lt;/td&gt;
&lt;td&gt;Сигнатура - 29h&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;04:02&lt;/td&gt;
&lt;td&gt;29&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;43h&lt;/td&gt;
&lt;td&gt;ID диска&lt;/td&gt;
&lt;td align="center"&gt;4&lt;/td&gt;
&lt;td align="center"&gt;04:03..04:06&lt;/td&gt;
&lt;td&gt;148&lt;sub&gt;dec&lt;/sub&gt; 14&lt;sub&gt;dec&lt;/sub&gt; 13&lt;sub&gt;dec&lt;/sub&gt; 8&lt;sub&gt;dec&lt;/sub&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;47h&lt;/td&gt;
&lt;td&gt;Метка диска&lt;/td&gt;
&lt;td align="center"&gt;11&lt;/td&gt;
&lt;td align="center"&gt;04:07..05:01&lt;/td&gt;
&lt;td&gt;&amp;ldquo;NO_NAME____&amp;rdquo;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;52h&lt;/td&gt;
&lt;td&gt;Аббревиатура файловой системы&lt;/td&gt;
&lt;td align="center"&gt;8&lt;/td&gt;
&lt;td align="center"&gt;05:02&lt;/td&gt;
&lt;td&gt;&amp;ldquo;FAT32___&amp;rdquo;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;5Ah&lt;/td&gt;
&lt;td&gt;Исполняемый код&lt;/td&gt;
&lt;td align="center"&gt;448&lt;/td&gt;
&lt;td align="center"&gt;05:10 &amp;hellip;&lt;/td&gt;
&lt;td&gt;00 ..&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1FEh&lt;/td&gt;
&lt;td&gt;Сигнатура (55h AAh)&lt;/td&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td align="center"&gt;31:14&lt;/td&gt;
&lt;td&gt;55 AA&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Пояснения к таблице:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Первая строка: инструкция перехода на программу загрузки. Если сектор является загрузочным, то загрузчик &lt;abbr title="(Master Boot Record) Главная загрузочная запись"&gt;MBR&lt;/abbr&gt; разместит этот сектор, адрес которого найдет в таблице разделов, в положенном месте и передаст управление ему, то есть, первому его байту. Однако код загрузчика сектора начинается не здесь, а по адресу 5Ah. Вот эти три байта и перебрасывают управление туда: EBh = jmp, а 58h = смещение.&lt;/li&gt;
&lt;li&gt;Вторая строка иногда именуется &amp;laquo;идентификатор изготовителя&amp;raquo;, &amp;laquo;идентификатор &lt;abbr title="операционная система"&gt;ОС&lt;/abbr&gt; или файловой системы&amp;raquo;,встречал даже &amp;laquo;название и версия Windows&amp;raquo;. Строковая идентификация того, кто это все записал. Программа WinImage пишет сюда  &amp;laquo;WINIMAGE&amp;raquo;. Документ &amp;laquo;&lt;abbr title="(File Allocation Table) Таблица размещения файлов"&gt;FAT&lt;/abbr&gt;: General Overview of On-Disk Format&amp;raquo; рекомендует строку &amp;laquo;MSWIN4.1&amp;raquo;, как вызывающую минимум проблем совместимости. Имеет значение для некоторых &lt;abbr title="(File Allocation Table) Таблица размещения файлов"&gt;FAT&lt;/abbr&gt;-драйверов. Для Windows вроде бы не имеет значения.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Далее начинается блок параметров &lt;abbr title="(Base Input-Output System) Базовая система ввода-вывода"&gt;BIOS&lt;/abbr&gt; (&lt;abbr title="(Base Input-Output System) Базовая система ввода-вывода"&gt;BIOS&lt;/abbr&gt; parameter block, BPB) &amp;mdash; структура данных, описывающая логическую структуру хранилища данных:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Байтов в секторе (логическом), как мы договаривались, 512&lt;/li&gt;
&lt;li&gt;Секторов в кластере 8, то есть, кластер четырехкилобайтный, довольно-таки распространенное значение.&lt;/li&gt;
&lt;li&gt;Зарезервированных секторов 1. Поле не должно быть равно 0. Для FAT32 обычно равно 32. &lt;abbr title="операционная система"&gt;ОС&lt;/abbr&gt; от Microsoft нормально воспринимают любое ненулевое значение.&lt;/li&gt;
&lt;li&gt;Таблиц &lt;abbr title="(File Allocation Table) Таблица размещения файлов"&gt;FAT&lt;/abbr&gt;, традиционно, 2 &amp;mdash; основная и резервная. Но мы-то знаем, что на самом деле ни одной.&lt;/li&gt;
&lt;li&gt;Количество элементов корневого каталога. Для FAT32 должно быть 0.&lt;/li&gt;
&lt;li&gt;Всего секторов в томе. 0 означает, что диск большой, больше 32МБ, поэтому размер будет задан по смещению 20h. Для FAT32 должно быть 0.&lt;/li&gt;
&lt;li&gt;Тип носителя &amp;mdash; жесткий диск (строго говоря, фиксированный, неудаляемый носитель. Для съемных носителей значение F0h). Должно быть таким же, как первый байт таблицы &lt;abbr title="(File Allocation Table) Таблица размещения файлов"&gt;FAT&lt;/abbr&gt;.&lt;/li&gt;
&lt;li&gt;Логических секторов в FAT12/FAT16, для FAT32 должно быть 0.&lt;/li&gt;
&lt;li&gt;Физических секторов на дорожку &amp;mdash; 63. Поле имеет значение только для носителей, имеющих дисковую геометрию. Почему 63? Списал откуда-то&amp;hellip;&lt;/li&gt;
&lt;li&gt;Число головок &amp;mdash; FF. Тоже непонятно, зачем тут значение&amp;hellip;&lt;/li&gt;
&lt;li&gt;Скрытых (зарезервированных) секторов перед данным разделом &amp;mdash; 62&lt;/li&gt;
&lt;li&gt;Всего логических секторов в разделе (в 32-разрядном формате) &amp;mdash; 1000h. Включает все сектора всех четырех областей раздела. Для FAT32 не должно быть равно 0.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Далее идут отличия BPB FAT32 от FAT12/FAT16:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Размер одной таблицы &lt;abbr title="(File Allocation Table) Таблица размещения файлов"&gt;FAT&lt;/abbr&gt; &amp;mdash; 8 секторов или 1 кластер&lt;/li&gt;
&lt;li&gt;Главная таблица &lt;abbr title="(File Allocation Table) Таблица размещения файлов"&gt;FAT&lt;/abbr&gt; нулевая. Вообще-то, поле флагов. Биты 0..3 &amp;mdash; номер активной &lt;abbr title="(File Allocation Table) Таблица размещения файлов"&gt;FAT&lt;/abbr&gt;, начиная с 0. Бит 7 равный 0 означает, что &lt;abbr title="(File Allocation Table) Таблица размещения файлов"&gt;FAT&lt;/abbr&gt; в процессе работы отображается на все &lt;abbr title="(File Allocation Table) Таблица размещения файлов"&gt;FAT&lt;/abbr&gt;, а равный 1 означает, что только одна &lt;abbr title="(File Allocation Table) Таблица размещения файлов"&gt;FAT&lt;/abbr&gt; активна, и ее номер в битах 0..3. Биты 4..6 и 8..15 зарезервированы.&lt;/li&gt;
&lt;li&gt;Версия &lt;abbr title="(File Allocation Table) Таблица размещения файлов"&gt;FAT&lt;/abbr&gt; &amp;mdash; 0.0. Если не равно 0, старые версии Windows не будут монтировать диск.&lt;/li&gt;
&lt;li&gt;Начало корневого каталога &amp;mdash; 2 кластер, так как 0 и 1 имеют особое значение в таблице &lt;abbr title="(File Allocation Table) Таблица размещения файлов"&gt;FAT&lt;/abbr&gt;, ближе нельзя, дальше бессмысленно.&lt;/li&gt;
&lt;li&gt;Номер сектора структуры FSINFO в зарезервированной зоне тома FAT32, обычно 1. Структура содержит данные о количестве свободных кластеров и указатель на следующий свободный кластер, используется алгоритмом выделения свободных секторов диска.&lt;/li&gt;
&lt;li&gt;Резервный сектор. Если не 0, то указывает на номер сектора тома, в котором копия загрузочной записи. Обычно 6, другие значения не рекомендуются.&lt;/li&gt;
&lt;li&gt;Зарезервировано для будущего использования, должно быть установлено в 0.&lt;/li&gt;
&lt;li&gt;Номер физического диска &amp;mdash; 80: первый диск в системе&lt;/li&gt;
&lt;li&gt;Зарезервировано.&lt;/li&gt;
&lt;li&gt;Сигнатура расширенного загрузчика, предопределенная константа. Показывает, что следующие три поля имеют место быть.&lt;/li&gt;
&lt;li&gt;ID диска &amp;mdash; идентификатор, поддерживающий отслеживание томов съемных носителей. Обычно генерируется путем комбинации текущих даты и времени в 32-р. формате, поэтому иногда это поле называют &amp;laquo;дата и время создания диска&amp;raquo;.&lt;/li&gt;
&lt;li&gt;Метка диска. Не очень-то нужно, потому что есть в записи корневого каталога.&lt;/li&gt;
&lt;li&gt;Аббревиатура файловой системы &amp;mdash; &amp;laquo;FAT32&amp;raquo;, дополнено пробелами.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Конец зоны BPB. Далее:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Код загрузчика &amp;mdash; заполняется нулями, загрузчика нет.&lt;/li&gt;
&lt;li&gt;Сигнатура загрузочного сектора &amp;mdash; предопределенная константа.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="fat"&gt;Таблица &lt;abbr title="(File Allocation Table) Таблица размещения файлов"&gt;FAT&lt;/abbr&gt;&lt;/h2&gt;
&lt;p&gt;Важная структура данных, в честь которой и называется файловая система. Ну, здесь просто: список кластеров, занятых папками и файлами.&lt;/p&gt;
&lt;p&gt;Причем, это односвязный список: каждый элемент является либо ссылкой на следующий элемент, либо признаком окончания цепочки элементов. Причем, для этого списка нет разницы между файлами и каталогами. Список состоит из 32-разрядных целых. Элемент, заполненный единицами (FFFFFFFFh), говорит о том, что он последний в цепи. Если он же и первый, значит, соответствующий ему файл (или каталог) занимает один кластер.&lt;/p&gt;
&lt;p&gt;Строго говоря, в 32-разрядных элементах записаны 28-разрядные значения, старшие 4 бита зарезервированы и должны быть установлены в ноль, а точнее, должны сохранять предыдущее значение, для чего записываться с использованием маски. Но эти тонкости нужны для реализации программ чтения/записи структур &lt;abbr title="(File Allocation Table) Таблица размещения файлов"&gt;FAT&lt;/abbr&gt;, например, драйверов &lt;abbr title="файловая система"&gt;ФС&lt;/abbr&gt;, а нам пока не важно. Поэтому маркер конца цепочки &amp;mdash; элемент, заполненный единицами &amp;mdash; на самом деле 0FFFFFFFh.&lt;/p&gt;
&lt;p&gt;В FAT32 (в отличие от предыдущих версий &lt;abbr title="(File Allocation Table) Таблица размещения файлов"&gt;FAT&lt;/abbr&gt;) корневой каталог равноправен с прочими папками и файлами. Указатель на него лежит в BPB, в загрузочной записи раздела. Обычно это 2, так как кластеры 0 и 1 имеют особое назначение. Теоретически корневой каталог можно разместить и дальше второй позиции, где-нибудь в середине таблицы (тогда физически он должен быть записан где-нибудь в середине памяти раздела), но в этом нет практического смысла.&lt;/p&gt;
&lt;p&gt;Значит, кластер 2 соответствует корневому каталогу. В целях имитации &lt;abbr title="файловая система"&gt;ФС&lt;/abbr&gt; делать корневой каталог большего размера нет смысла: сильно много не наимитируешь. Поэтому элемент номер 2 будет 0FFFFFFFh. В области данных будет лежать кластер, соответствующий этому элементу, и там будет информация о том, где искать файлы, расположенные в корневом каталоге (а возможно, и вложенные папки второго уровня). То есть, будут ссылки на первые кластеры, а последующую цепочку драйвер &lt;abbr title="файловая система"&gt;ФС&lt;/abbr&gt; должен найти в таблице &lt;abbr title="(File Allocation Table) Таблица размещения файлов"&gt;FAT&lt;/abbr&gt;: по ссылке найти первый кластер, и если он не заполнен единицами, то указывает на следующий элемент. Добравшись до последнего, драйвер будет знать, сколько в файле кластеров и где они лежат.&lt;/p&gt;
&lt;p&gt;Есть значения для элементов файловой таблицы, сигнализирующие о том, что соответствующий кластер поврежден или зарзервирован, но в нашем случае реальных кластеров нет, повреждать и резервировать нечего, и такие значения не рассматриваются.&lt;/p&gt;
&lt;p&gt;В целях имитации, когда точно известны параметры фейковых файлов, можно разместить их в фейковой же файловой таблице строго последовательно. Вразброс же файлы размещаются в результате фрагментации: когда записывается файл большего размера, чем первый свободный участок, и часть его пишется в ближайшее найденное пустое место, часть &amp;mdash; в следующее пустое место. А у нас &amp;mdash; все подряд. Допустим, в корне будет имитироваться файл, занимающий три кластера, тогда в файловой таблице элемент №3 будет содержать число 4 (запишется 04 00 00 00 00 00 00 00, младшим байтом вперед), элемент №4 будет содержать 5, а в элементе №5 будет записано 0FFFFFFFh. Дальше должны быть нули, сигнализирующие о том, что кластеры свободны.&lt;/p&gt;
&lt;p&gt;Элементы файловой таблицы с номерами 0 и 1 имеют особое значение. Младший байт нулевого должен содержать тип носителя из BPB, в нашем случае &amp;mdash; F8h. Остальные байты нулевого равны FFh. Второй элемент заполняется FFh целиком и может использоваться в FAT32 для указания необходимости проверки тома: верхние два бита обнуляются, а перед завершением работы с носителем туда снова записываютмя единицы. Если в свежезапущенном томе обнаружены в этом месте нули, значит он некорректно завершил работу, например, был внезапно обесточен или выдернут.&lt;/p&gt;
&lt;p&gt;Стало быть, для примера начало файловой таблицы должно выглядеть, как в таблице 5, в предположении, что корневой каталог короткий (умещается в одном кластере, что естественно при малом количестве файлов), первый файл занимает три кластера, второй файл занимает один кластер, больше файлов и папок нет.&lt;/p&gt;
&lt;p&gt;Таблица 5. Описатель файла в каталоге&lt;/p&gt;
&lt;div class="colortable"&gt;&lt;/div&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;#&lt;/th&gt;
&lt;th&gt;Назначение&lt;br&gt;элемента&lt;/th&gt;
&lt;th align="center"&gt;0&lt;/th&gt;
&lt;th align="center"&gt;1&lt;/th&gt;
&lt;th align="center"&gt;2&lt;/th&gt;
&lt;th align="center"&gt;3&lt;/th&gt;
&lt;th align="center"&gt;4&lt;/th&gt;
&lt;th align="center"&gt;5&lt;/th&gt;
&lt;th align="center"&gt;6&lt;/th&gt;
&lt;th align="center"&gt;7&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Элемент &lt;abbr title="(File Allocation Table) Таблица размещения файлов"&gt;FAT&lt;/abbr&gt;[0]&lt;/td&gt;
&lt;td align="center"&gt;F8&lt;/td&gt;
&lt;td align="center"&gt;FF&lt;/td&gt;
&lt;td align="center"&gt;FF&lt;/td&gt;
&lt;td align="center"&gt;FF&lt;/td&gt;
&lt;td align="center"&gt;FF&lt;/td&gt;
&lt;td align="center"&gt;FF&lt;/td&gt;
&lt;td align="center"&gt;FF&lt;/td&gt;
&lt;td align="center"&gt;0F&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Элемент &lt;abbr title="(File Allocation Table) Таблица размещения файлов"&gt;FAT&lt;/abbr&gt;[1]&lt;/td&gt;
&lt;td align="center"&gt;FF&lt;/td&gt;
&lt;td align="center"&gt;FF&lt;/td&gt;
&lt;td align="center"&gt;FF&lt;/td&gt;
&lt;td align="center"&gt;FF&lt;/td&gt;
&lt;td align="center"&gt;FF&lt;/td&gt;
&lt;td align="center"&gt;FF&lt;/td&gt;
&lt;td align="center"&gt;FF&lt;/td&gt;
&lt;td align="center"&gt;0F&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Корневой каталог&lt;/td&gt;
&lt;td align="center"&gt;FF&lt;/td&gt;
&lt;td align="center"&gt;FF&lt;/td&gt;
&lt;td align="center"&gt;FF&lt;/td&gt;
&lt;td align="center"&gt;FF&lt;/td&gt;
&lt;td align="center"&gt;FF&lt;/td&gt;
&lt;td align="center"&gt;FF&lt;/td&gt;
&lt;td align="center"&gt;FF&lt;/td&gt;
&lt;td align="center"&gt;0F&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Начало длинного файла&lt;/td&gt;
&lt;td align="center"&gt;04&lt;/td&gt;
&lt;td align="center"&gt;00&lt;/td&gt;
&lt;td align="center"&gt;00&lt;/td&gt;
&lt;td align="center"&gt;00&lt;/td&gt;
&lt;td align="center"&gt;00&lt;/td&gt;
&lt;td align="center"&gt;00&lt;/td&gt;
&lt;td align="center"&gt;00&lt;/td&gt;
&lt;td align="center"&gt;00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;Продолжение длинного файла&lt;/td&gt;
&lt;td align="center"&gt;05&lt;/td&gt;
&lt;td align="center"&gt;00&lt;/td&gt;
&lt;td align="center"&gt;00&lt;/td&gt;
&lt;td align="center"&gt;00&lt;/td&gt;
&lt;td align="center"&gt;00&lt;/td&gt;
&lt;td align="center"&gt;00&lt;/td&gt;
&lt;td align="center"&gt;00&lt;/td&gt;
&lt;td align="center"&gt;00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;Окончание длинного файла&lt;/td&gt;
&lt;td align="center"&gt;FF&lt;/td&gt;
&lt;td align="center"&gt;FF&lt;/td&gt;
&lt;td align="center"&gt;FF&lt;/td&gt;
&lt;td align="center"&gt;FF&lt;/td&gt;
&lt;td align="center"&gt;FF&lt;/td&gt;
&lt;td align="center"&gt;FF&lt;/td&gt;
&lt;td align="center"&gt;FF&lt;/td&gt;
&lt;td align="center"&gt;0F&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;Короткий файл&lt;/td&gt;
&lt;td align="center"&gt;FF&lt;/td&gt;
&lt;td align="center"&gt;FF&lt;/td&gt;
&lt;td align="center"&gt;FF&lt;/td&gt;
&lt;td align="center"&gt;FF&lt;/td&gt;
&lt;td align="center"&gt;FF&lt;/td&gt;
&lt;td align="center"&gt;FF&lt;/td&gt;
&lt;td align="center"&gt;FF&lt;/td&gt;
&lt;td align="center"&gt;0F&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;Начало зоны пустых кластеров&lt;/td&gt;
&lt;td align="center"&gt;00&lt;/td&gt;
&lt;td align="center"&gt;00&lt;/td&gt;
&lt;td align="center"&gt;00&lt;/td&gt;
&lt;td align="center"&gt;00&lt;/td&gt;
&lt;td align="center"&gt;00&lt;/td&gt;
&lt;td align="center"&gt;00&lt;/td&gt;
&lt;td align="center"&gt;00&lt;/td&gt;
&lt;td align="center"&gt;00&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Восемь столбцов &amp;mdash; с третьего по десятый &amp;mdash; соответствуют восьми байтам элементов таблицы (с нулевого по седьмой).&lt;/p&gt;
&lt;h2 id="root"&gt;Файловая запись root&lt;/h2&gt;
&lt;p&gt;Запись, соответствующая корневому каталогу. Как тут уже упоминалось, в FAT32 корневой каталог равноправен с прочими папками и файлами в том смысле, что не обязан находиться по строго определенному адресу и иметь строго определенные размеры. Найти его можно по указателю в BPB, а размер определяется на общих основаниях, по цепочке кластеров в виде односвязного списка в файловой таблице.&lt;/p&gt;
&lt;p&gt;Все остальные файлы и папки ищутся рекурсивно, отталкиваясь от корневого каталога. То есть, файлы и папки первого уровня вложенности имеют указания на свое местоположение в корневом каталоге, второго уровня &amp;mdash; в папках первого уровня, и так далее.&lt;/p&gt;
&lt;p&gt;Каталог (ну, или папка, или директория) фактически является файлом. Лежит в области диска, соответствующей некоторому элементу файловой таблицы, содержит некоторые данные, занимает минимум кластер. Вот только эти данные не абы что, а набор описателей того, что принадлежит каталогу: файлы и папки. При этом, в папке должны быть описатели папок с именами &amp;laquo;.&amp;raquo; и &amp;laquo;..&amp;raquo;, указывающими на текущий и родительский каталоги соответственно. Описатель является структурой данных определенного размера, 32 байта.&lt;/p&gt;
&lt;p&gt;Отсюда, кстати, следует, что пустой файл может быть записан в каталоге, но не занимать места на диске и иметь реальный размер, равный 0, однако пустой каталог не может быть совсем пустым, должен содержать минимум 2 описателя и будет занимать кластер. Значит, пустые каталоги &amp;mdash; мусор, изрядно засоряющий носитель.&lt;/p&gt;
&lt;p&gt;Запись корневого каталога все же имеет некоторые отличия от прочих папок. Она обязательно должна быть, она не имеет имени, даты и времени создания, не содержит файлы &amp;laquo;.&amp;raquo; и &amp;laquo;..&amp;raquo; в качестве первых двух подпапок, она единственная может иметь файл с установленным аттрибут VOLUME_ID, и тогда имя, записанное в соответствующем поле этой записи, будет именем тома. Адрес первого кластера (в полях &amp;laquo;старшее слово первого кластера&amp;raquo; и &amp;laquo;младшее слова первого кластера&amp;raquo;) такой записи так же должен быть равен нулю, потому что для &amp;laquo;файла&amp;raquo;, соответствующего метке тома, не выделяются реальные кластеры. Соответственно, размер этого &amp;laquo;файла&amp;raquo; тоже должен быть нулевым.&lt;/p&gt;
&lt;p&gt;Тогда первый описатель &amp;laquo;файла&amp;raquo; в корневом каталоге должен выглядеть, как в таблице 6.&lt;/p&gt;
&lt;p&gt;Таблица 6. Описатель файла-тома в каталоге&lt;/p&gt;
&lt;div class="colortable"&gt;&lt;/div&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;Адр.&lt;/th&gt;
&lt;th align="center"&gt;Разм.&lt;/th&gt;
&lt;th&gt;Значение&lt;/th&gt;
&lt;th align="center"&gt;r:c&lt;/th&gt;
&lt;th&gt;hex&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;0h&lt;/td&gt;
&lt;td align="center"&gt;8&lt;/td&gt;
&lt;td&gt;Имя файла, дополненное справа пробелами до 8&lt;/td&gt;
&lt;td align="center"&gt;00:00..00:07&lt;/td&gt;
&lt;td&gt;&amp;ldquo;LUFA____&amp;rdquo;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;8h&lt;/td&gt;
&lt;td align="center"&gt;3&lt;/td&gt;
&lt;td&gt;Расширение, дополненное справа пробелами до 3&lt;/td&gt;
&lt;td align="center"&gt;00:08..00:10&lt;/td&gt;
&lt;td&gt;&amp;rdquo;___&amp;rdquo;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;0Bh&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td&gt;0x80 - 0: резерв&lt;br&gt;0x40 - 0: резерв&lt;br&gt;0x20 - A: бит &amp;ldquo;архивный&amp;rdquo;&lt;br&gt;0x10 - D: бит &amp;ldquo;каталог&amp;rdquo;&lt;br&gt;0x08 - V: бит &amp;ldquo;VOLUME_ID &amp;ldquo;&lt;br&gt;0x04 - S: бит &amp;ldquo;системный&amp;rdquo;&lt;br&gt;0x02 - H: бит &amp;ldquo;скрытый&amp;rdquo;&lt;br&gt;0x01 - R: бит &amp;ldquo;только для чтения&amp;rdquo;&lt;/td&gt;
&lt;td align="center"&gt;00:11&lt;/td&gt;
&lt;td&gt;08&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;0Ch&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td&gt;Резерв&lt;/td&gt;
&lt;td align="center"&gt;00:12&lt;/td&gt;
&lt;td&gt;00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;0Dh&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td&gt;Сотые доли секунды создания файла (0..199)&lt;/td&gt;
&lt;td align="center"&gt;00:13&lt;/td&gt;
&lt;td&gt;00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;0Eh&lt;/td&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td&gt;Время создания файла&lt;/td&gt;
&lt;td align="center"&gt;00:14&lt;/td&gt;
&lt;td&gt;00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;10h&lt;/td&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td&gt;Дата создания файла&lt;/td&gt;
&lt;td align="center"&gt;01:00&lt;/td&gt;
&lt;td&gt;00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;12h&lt;/td&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td&gt;Дата последнего обращения к файлу&lt;/td&gt;
&lt;td align="center"&gt;01:02&lt;/td&gt;
&lt;td&gt;00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;14h&lt;/td&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td&gt;Старшее слово первого кластера файла&lt;/td&gt;
&lt;td align="center"&gt;01:04&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;16h&lt;/td&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td&gt;Время последнего изменения:&lt;br&gt;0..4 - пары секунд 0..29&lt;br&gt;5..10 - минуты 0..59&lt;br&gt;11..15 - часы 0..23&lt;/td&gt;
&lt;td align="center"&gt;01:06&lt;/td&gt;
&lt;td&gt;00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;18h&lt;/td&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td&gt;Дата последнего изменения:&lt;br&gt;0..4 - день 0..31&lt;br&gt;5..10 - месяц 1..12&lt;br&gt;11..15 - год, начиная с 1980 (0..119)&lt;/td&gt;
&lt;td align="center"&gt;01:08&lt;/td&gt;
&lt;td&gt;00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1Ah&lt;/td&gt;
&lt;td align="center"&gt;2&lt;/td&gt;
&lt;td&gt;Младшее слово первого кластера&lt;/td&gt;
&lt;td align="center"&gt;01:10&lt;/td&gt;
&lt;td&gt;00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1Ch&lt;/td&gt;
&lt;td align="center"&gt;4&lt;/td&gt;
&lt;td&gt;Размер файла в байтах&lt;/td&gt;
&lt;td align="center"&gt;01:12..01:15&lt;/td&gt;
&lt;td&gt;00&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="_5"&gt;Прочие файловые записи&lt;/h2&gt;
&lt;p&gt;В кластере, соответствующем корневому каталогу, вслед за приведенным выше описателем метки тома могут располагаться описатели вложенных файлов и папок. Для целей имитации &lt;abbr title="файловая система"&gt;ФС&lt;/abbr&gt; папки, пожалуй, будут излишеством, а несколько файлов положить надо. В таких описателях стоит заполнить имя файла, придумать вменяемое время создания файла, указать первый кластер, равный 3 для первого файла, и размер, укладывающийся в число кластеров, занятое соответствующей цепочкой списка в файловой таблице. Для следующего файла первый кластер будет смещен от 3 на число кластеров первого, и так далее.&lt;/p&gt;
&lt;p&gt;При имитации &lt;abbr title="файловая система"&gt;ФС&lt;/abbr&gt; это все надо будет формировать динамически, в соответствии с &amp;laquo;файлами&amp;raquo;, которые планируется подсовывать читающей &lt;abbr title="операционная система"&gt;ОС&lt;/abbr&gt;.&lt;/p&gt;
&lt;p&gt;Поля файлового описателя приведены в таблице 6, повторять которую нет надобности. Можно разве что остановиться поподробнее на ее полях.&lt;/p&gt;
&lt;p&gt;Имя файла предполагается короткое, в формате &amp;laquo;8.3&amp;raquo;, дополненное до нужной длины пробелами, непременно на латинице. Можно сделать и длиннее, и в другой кодировке, но это отдельный разговор. Для таких манипуляций потребуются дополнительные описатели, которые и подъедят ресурсы при имитации, и не являются действительно необходимыми.&lt;/p&gt;
&lt;p&gt;Поле файловых атрибутов битовое, его значения понятны из названий битов, которые приведу ниже, в константах.&lt;/p&gt;
&lt;p&gt;Многие файловые системы &lt;abbr title="(File Allocation Table) Таблица размещения файлов"&gt;FAT&lt;/abbr&gt; не поддерживают метки времени, кроме времени записи, поэтому поля &amp;laquo;сотые доли секунды времени создания&amp;raquo;, &amp;laquo;время создания&amp;raquo;, &amp;laquo;дата создания&amp;raquo; и &amp;laquo;дата последнего обращения&amp;raquo; являются необязательными и могут быть равны 0. Однако, поля &amp;laquo;время записи&amp;raquo; и &amp;laquo;дата записи&amp;raquo; должны поддерживаться.&lt;/p&gt;
&lt;p&gt;Поля даты считаются 16-разрядными словами относительно эпохи MS-DOS 01.01.1980. При этом:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Биты 0..4 содержат число месяца в диапазоне от 1 до 31.&lt;/li&gt;
&lt;li&gt;Биты 5..8 содержат номер месяца в диапазоне от 1 до 12.&lt;/li&gt;
&lt;li&gt;Биты 9..15 содержат год от 1980-го в диапазоне от 0 до 127 (от 1980 до 2107).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Поля времени считаются 16-разрядными словами с двухсекундной дискретизацией. При этом:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Биты 0..4 &amp;mdash; число пар секунд в диапазоне от 0 до 29 (от 0 до 58 секунд).&lt;/li&gt;
&lt;li&gt;Биты 5..8 &amp;mdash; минуты в диапазоне от 0 до 59.&lt;/li&gt;
&lt;li&gt;Биты 9..15 &amp;mdash; часы в диапазоне от 0 до 23.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Номер первого кластера разбит на два слова, старшее и младшее, всего 32 разряда.&lt;/p&gt;
&lt;p&gt;На основе написанного выше можно подготовить данные для передачи в ответ на запросы по определенным адресам, чтобы запрашивающая &lt;abbr title="операционная система"&gt;ОС&lt;/abbr&gt; была уверена, что обращается к реальному носителю информации.&lt;/p&gt;
&lt;h2 id="const"&gt;Важные константы&lt;/h2&gt;
&lt;p&gt;Перед тем, как реализовывать это все в программе, хотелось бы подготовить ряд констант, которые следует определить и использовать в коде.&lt;/p&gt;
&lt;div class="colortable"&gt;&lt;/div&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Имя&lt;/th&gt;
&lt;th&gt;Описание&lt;/th&gt;
&lt;th&gt;Значение&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Файловые атрибуты&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ATTR_READ&lt;/td&gt;
&lt;td&gt;Только для чтения&lt;/td&gt;
&lt;td&gt;0x01&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ATTR_HIDDEN&lt;/td&gt;
&lt;td&gt;Скрытый&lt;/td&gt;
&lt;td&gt;0x02&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ATTR_SYSTEM&lt;/td&gt;
&lt;td&gt;Системный&lt;/td&gt;
&lt;td&gt;0x04&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ATTR_VOL_LABEL&lt;/td&gt;
&lt;td&gt;Метка тома&lt;/td&gt;
&lt;td&gt;0x08&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ATTR_DIR&lt;/td&gt;
&lt;td&gt;Папка (каталог)&lt;/td&gt;
&lt;td&gt;0x10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ATTR_ARCHIVE&lt;/td&gt;
&lt;td&gt;Архивный&lt;/td&gt;
&lt;td&gt;0x20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ATTR_LONG_FNAME&lt;/td&gt;
&lt;td&gt;Имеет длинное имя&lt;/td&gt;
&lt;td&gt;0x0F&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Размеры&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BYTES_PER_SECTOR&lt;/td&gt;
&lt;td&gt;Байтов в секторе&lt;/td&gt;
&lt;td&gt;512&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BYTES_PER_SECT_SHIFT&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SECTORS_PER_CLUSTER&lt;/td&gt;
&lt;td&gt;Секторов в кластере&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SECTORS_PER_CLUST_SHIFT&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BYTES_PER_CLUSTER&lt;/td&gt;
&lt;td&gt;Байтов в кластере&lt;/td&gt;
&lt;td&gt;(BYTES_PER_SECTOR * SECTORS_PER_CLUSTER)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BYTES_PER_CLUST_SHIFT&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;(BYTES_PER_SECT_SHIFT + SECTORS_PER_CLUST_SHIFT)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Адреса, смещения&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SECTORS_PER_FAT&lt;/td&gt;
&lt;td&gt;Секторов на таблицу &lt;abbr title="(File Allocation Table) Таблица размещения файлов"&gt;FAT&lt;/abbr&gt;&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MBR_SECTOR&lt;/td&gt;
&lt;td&gt;Сектор &lt;abbr title="(Master Boot Record) Главная загрузочная запись"&gt;MBR&lt;/abbr&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BOOT_SECTOR&lt;/td&gt;
&lt;td&gt;Загрузочный сектор раздела&lt;/td&gt;
&lt;td&gt;62&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FAT1_SECTOR&lt;/td&gt;
&lt;td&gt;Сектор первой файловой таблицы&lt;/td&gt;
&lt;td&gt;(BOOT_SECTOR + 1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FAT2_SECTOR&lt;/td&gt;
&lt;td&gt;Сектор второй файловой таблицы&lt;/td&gt;
&lt;td&gt;(FAT1_SECTOR + SECTORS_PER_FAT)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ROOT_SECTOR&lt;/td&gt;
&lt;td&gt;Сектор корневого каталога&lt;/td&gt;
&lt;td&gt;(FAT2_SECTOR + SECTORS_PER_FAT)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ROOT_CLUSTER&lt;/td&gt;
&lt;td&gt;Кластер корневого каталога&lt;/td&gt;
&lt;td&gt;(SECTORS_PER_FAT * 2 / SECTORS_PER_CLUSTER)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Константы с постфиксом _SHIFT полезны при вычислениях кратных величин. Так как число байтов в кластере кратно степени двойки, можно получить число байтов в N кластерах не умножая N на 512, а сдвинув влево на 8, на степень двойки. Это эконмит ресурсы: сдвиг проще и быстрее умножения.&lt;/p&gt;
&lt;p&gt;Теперь можно попробовать реализовать имитацию этого всего в программе устройства.&lt;/p&gt;</summary><category term="usb-polygon"></category></entry><entry><title>USB-polygon-9: Подготовка к имитации ФС</title><link href="http://romeogolf.github.io/usb-polygon-9.html" rel="alternate"></link><updated>2017-05-25T00:00:00+05:00</updated><author><name>RomeoGolf</name></author><id>tag:romeogolf.github.io,2017-05-25:usb-polygon-9.html</id><summary type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;Единицы информации: секторы, блоки, кластеры&amp;hellip;&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_2"&gt;Байт&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;Сектор (а также цилиндр и головка)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;Кластер&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;Логический блок&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;Страница&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_7"&gt;Итого&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_8"&gt;Выбор файловой системы&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_9"&gt;Способ имитации&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;Единицы информации: секторы, блоки, кластеры&amp;hellip;&lt;/h2&gt;
&lt;p&gt;Перед переходом к файловой системе сперва хотелось бы систематизировать информацию об информации, которая измеряется в чем попало, аж голова кругом. Мало того, что есть байты, слова, двойные слова, младшими вперед, старшими вперед, так это все еще рассматривается в оптовом виде кластерами, секторами, логическими блоками, страницами&amp;hellip; Попробую разобраться.&lt;/p&gt;
&lt;h3 id="_2"&gt;Байт&lt;/h3&gt;
&lt;p&gt;Будем считать, что тут все просто и понятно. Байт &amp;mdash; восемь битов, минимально адресуемая единица информации.&lt;/p&gt;
&lt;p&gt;На самом деле, все не так просто, поскольку исторически первый байт был 6 битов, в современных последовательных протоколах передачи информации (например, RS-232 или SPI) байт также может быть меньше или больше 8 битов, и есть современные процессорные системы, в которых минимально адресуемой единицей является тридцатидвухразрядное слово.&lt;/p&gt;
&lt;p&gt;Но в рамках USB-полигона это все не важно. Байт &amp;mdash; восемь битов, и из них складывается все остальное. Тем более, это на сегодняшний день единственная единица, при помощи которой можно сравнить объем информации в разных системах, используй они 4 бита на байт или шестьдесят четыре: КБ везде считается 1024 байта по 8 битов в каждом, вот и считай&amp;hellip;&lt;/p&gt;
&lt;h3 id="_3"&gt;Сектор (а также цилиндр и головка)&lt;/h3&gt;
&lt;p&gt;Еще одна минимально адресуемая единица информации. Теперь уже с точки зрения хранения на дисковых устройствах &amp;mdash; жестких дисках, дискетах, компактах. На таких устройствах информация записывается дорожками &amp;mdash; концентрическими окружностями, и сектор &amp;mdash; часть дорожки. Физически сектор не привязан к байту, это все-таки геометрическая условность, поэтому он может иметь произвольный размер. Желательно, конечно, кратный степени двойки для удобства вычислений.&lt;/p&gt;
&lt;p&gt;Традиционно сектор равен 512 байтов. Настолько традиционно, что в некоторых программах, работающих с секторами, размер сектора &amp;mdash; константа. Хотя есть сектора и большего размера. Но будем придерживаться традиций, пусть будет 512 байтов, больше незачем.&lt;/p&gt;
&lt;p&gt;Первый сектор диска является загрузочным. По крайней мере, должен быть. Ну, операционная система считает, что это так. И я так и не понял, почему именно первый, а не нулевой, и куда делся нулевой, если нулевой цилиндр и нулевая головка есть.&lt;/p&gt;
&lt;p&gt;Цилиндр (cylinder) &amp;mdash; совокупность всех дорожек накопителя одинакового радиуса, если в накопителе больше одного диска. Если диск один, то номер цилиндра эквивалентен номеру дорожки. Если дисков много, то блок головок, остановившийся в определенном положении, может читать данные с нескольких дорожек сразу, то есть, с цилиндра.&lt;/p&gt;
&lt;p&gt;Головка (head) &amp;mdash; считывающее устройство, привязанное к конкретному диску, фактически, номер головки равен номеру диска.&lt;/p&gt;
&lt;p&gt;Таким образом, на больших многодисковых накопителях информация читалась и записывалась порциями, для адресации которых нужно было указать цилиндр, головку и сектор, по-английски сокращенно CHS. Довольно неудобно. Даже с дисковыми накопителями неудобно, и вообще не подходит для лент, флэшек или сетевых хранилищ.&lt;/p&gt;
&lt;p&gt;Логичнее было дать каждому сектору свой адрес. Ну и дали, в конце концов. Назвали &amp;laquo;LBA&amp;raquo;, логическая блоковая адресация, но об этом чуть позже.&lt;/p&gt;
&lt;h3 id="_4"&gt;Кластер&lt;/h3&gt;
&lt;p&gt;По-английски &amp;laquo;куст&amp;raquo;. Логическая единица хранения информации в файловой таблице. Понадобилась из-за ограничения размера файловых таблиц в ранних файловых системах семейства FAT: сектора дисков, которые становились все больше, уже не помещались в таблице, пришлось их кучковать, объединять в &amp;laquo;пучки&amp;raquo;. Размер кластера вообще совсем-пресовсем не константа. Может быть один сектор, может и больше, например, восемь, а кое-где и все 128. Зависит не только от типа файловой системы, но и от форматирования конкретного носителя.&lt;/p&gt;
&lt;p&gt;Это единица деления файлов. То есть, файл на диске состоит из кластеров. Значит, если кластер равен восьми секторам по 512 байтов, то файл размером в пару байтов будет занимать на диске 4 килобайта. А файл, который на пару байтов больше четырех килобайтов, будет &amp;laquo;весить&amp;raquo; все восемь.&lt;/p&gt;
&lt;p&gt;И тут самое время вернуться к секторам. На сегодняшний день размер сектора в 512 байтов устарел. Крайне редко можно встретить кластер, равный одному или хотя бы двум секторам, обычно минимум четыре килобайта, то есть, восемь секторов. Так, может быть, проще сделать сектор четырехкилобайтным, а кластер размером в один сектор? Ну и сделали, назвали Advanced Format. Но! Флэшек это пока не касается. Тут и объемов таких огромных пока нет, и файловые системы семейства FAT широко используются. Так что, будем помнить, что &amp;laquo;сектор = 512 Б&amp;raquo; &amp;mdash; это не догма, но пользоваться будем именно полукилобайтными.&lt;/p&gt;
&lt;h3 id="_5"&gt;Логический блок&lt;/h3&gt;
&lt;p&gt;Понятие из логической блоковой адресации. Аналог сектора, но ему уже не нужны номера головок и цилиндров. Все блоки пронумерованы по порядку, начиная с нулевого. И кластеры можно теперь составлять из них. Для дисковых накопителей есть формула пересчета логического адреса из номеров цилиндра, головки и сектора на дорожке и обратно. Для флэшки такой пересчет вообще не нужен, потому что сектора лежат себе спокойно в линейной памяти по порядку своих физических адресов.&lt;/p&gt;
&lt;p&gt;Насколько я понял, встречающееся местами макроопределение &lt;code&gt;#define VIRTUAL_MEMORY_BLOCK_SIZE    512&lt;/code&gt; определяет именно размер логического блока.&lt;/p&gt;
&lt;h3 id="_6"&gt;Страница&lt;/h3&gt;
&lt;p&gt;Деление памяти на страницы характерно для флэш-памяти. Дело в том, что ячейки памяти флэшки не стираются по одной, только оптом, довольно большими блоками, которые и называются страницами. Размер страницы зависит от типа микросхемы &amp;mdash; отличается у разных флэшек.&lt;/p&gt;
&lt;p&gt;Чистая ячейка памяти флэшки содержит единичные биты. То есть, в байтовой ячейке как бы записано 0xFF. Записать можно только в чистую ячейку. Таким образом, дописывать страницу, в принципе, можно, но для изменения единственного байта где-то в середине страницы потребуется прочитать всю страницу, изменить в считанном массиве нужный байт, стереть страницу и записать подправленный массив обратно.&lt;/p&gt;
&lt;p&gt;Во многих микросхемах флэш-памяти реализован буфер страничного размера, в который записываются новые данные, чтобы после заполнения записать его разом и тем самым минимизировать обращения к странице. Тем более, что операция записи (как и стирания) относительно сложная: сперва нужно подать команду записи, для чего по строго определенным адресам пишутся строго определенные данные, и так несколько (от трех до пяти) раз, что дает контроллеру памяти понять, что сейчас надо записать данные, и только потом выставляются настоящие данные по их реальному адресу для записи. Причем, есть команды страничной записи, когда команда записи дается для всей страницы, а не для каждой ячейки, и потом можно записывать байты как в ОЗУ, последовательно и без лишних команд.&lt;/p&gt;
&lt;p&gt;Отсюда появляются такие макроопределения, как &lt;code&gt;#define DATAFLASH_PAGE_SIZE 1024&lt;/code&gt;, для которых по-хорошему надо знать размер страницы конкретной микросхемы.&lt;/p&gt;
&lt;p&gt;Правда, в контексте USB-полигона это не важно. Потому что нет микросхемы &amp;mdash; нет и страниц, а что и сколько имитировать &amp;mdash; без разницы.&lt;/p&gt;
&lt;h3 id="_7"&gt;Итого&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Байт &amp;mdash; просто единица измерения информации. Малополезна для адресации к данным на носителе, но достаточно полезна при приведении одних укрупненных единиц к другим.&lt;/li&gt;
&lt;li&gt;Сектор или логический блок &amp;mdash; минимально читаемая с носителя единица информации. То есть, даже если нужно прочитать один байт, прочитан будет все равно минимум сектор (и то в &amp;laquo;сыром&amp;raquo; режиме или если кластер равен одному сектору, иначе &amp;mdash; еще больше), поэтому экономить на байтах для ускорения обмена с накопителем бесполезно. Экономить надо сразу секторами. Будем считать, что сектор равен 512 байтов.&lt;/li&gt;
&lt;li&gt;Кластер &amp;mdash; единица дробления файла. Файл не может быть меньше одного кластера. Если на носителе есть файловая система и данные читаются файлами, то кластер становится минимально читаемой единицей. Если файл содержит один байт, то все равно занимать он будет кластер, и читаться тоже будет кластер. Пусть будет 8 секторов, 4 килобайта.&lt;/li&gt;
&lt;li&gt;Страница &amp;mdash; единица измерения стираемой информации на флэшке. Стирается за один раз минимум одна страница. Используется не для доступа к информации, а больше во внутренних целях. Зависит от микросхемы.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_8"&gt;Выбор файловой системы&lt;/h2&gt;
&lt;p&gt;Хотелось бы получить более-менее универсальное устройство, которое заработает в любой более-менее популярной современной операционной системе. То есть, в Windows начиная с XP, Android начиная хотя бы с 4 и Linux всякого рода. MacOS и iOS не рассматриваю по причине нищебродства (не имею и не предвидится).&lt;/p&gt;
&lt;p&gt;Линуксовые файловые системы (Ext2..Ext4, ReiserFS, Xfs и прочие) придется отложить в сторонку &amp;mdash; в винде с ними проблемы. Не то, чтобы совсем невозможно работать, нет, способы существуют. Но придется ставить отдельно драйвера ФС, а тогда можно было не заморачиваться с MassStorage и ставить драйвер для своего устройства.&lt;/p&gt;
&lt;p&gt;Зато обыкновенные флэшки читаются сегодня без проблем упомянутыми ОС. А флэшки в большинстве своем отформатированы или в какой-нибудь FAT или NTFS.&lt;/p&gt;
&lt;p&gt;NTFS &amp;mdash; журналируемая файловая система, что напрочь отбивает охоту браться за ее имитацию. Остается FAT.&lt;/p&gt;
&lt;p&gt;Выбираем из семейства: FAT, VFAT, FAT12, FAT16, FAT32, extFAT.&lt;/p&gt;
&lt;p&gt;Чем ближе к историческому корню, тем проще. Первая версия FAT (для MS DOS до 2.0) имеет маленький корневой каталог, не имеет иерархии каталогов (они же папки, они же директории) &amp;mdash; все файлы в корне. Для простых целей USB-полигона эти ограничения несущественны, а реализация FAT довольно проста и незамысловата. Но уж больно ранние версии убогенькие&amp;hellip; Да и поддержка их может прекратиться в любой момент за практически полной ненадобностью.&lt;/p&gt;
&lt;p&gt;Тогда, может быть, сразу extFAT? Относительно свеженькая, 2006 года, предназначена главным образом именно для флэшек. Однако ее заявленные преимущетва &amp;mdash; увеличенные ограничения на размер файла, кластера, улучшение распределения свободного места, поддержка транзакций &amp;mdash; в рамках проекта USB-полигона вообще никак не помогают, зато она проприетарная и заметно более сложная, чем даже предшествующая FAT32.&lt;/p&gt;
&lt;p&gt;А вот FAT32 выглядит не такой уж страшной, если наплевать на длинные имена файлов и использование в них не латинских символов. Особенно, если еще и обойтись только чтением. На ней и остановлюсь.&lt;/p&gt;
&lt;h2 id="_9"&gt;Способ имитации&lt;/h2&gt;
&lt;p&gt;Ну, грубо говоря, тут все довольно просто. Операционная система будет обращаться к устройству, предполагая, что это флэшка. Сперва почитает MBR &amp;mdash; master boot record, потом PBR &amp;mdash; partition boot record, то есть загрузочную запись раздела, потом захочет узнать подробности о файловой системе и почитает FAT &amp;mdash; file allocation table, потом, возможо, если ее попросить, полезет в какой-нибудь файл.&lt;/p&gt;
&lt;p&gt;ОС, стало быть, будет читать, а устройство, в свою очередь, будет получать команды чтения, а в них &amp;mdash; в командах &amp;mdash; есть адреса читаемых данных. MBR без вариантов по нулевому адресу, PBR по адресу, указанному в MBR, место FAT записано в PBR, а в FAT расписано, где какой файл начинается.&lt;/p&gt;
&lt;p&gt;Получается, в ответ на запросы чтения можно сфабриковать липовые данные таким образом, что ОС получит примерно то, что ожидает, какие-то правдоподобные данные. При обращении по адресу 0 к MBR ответим, что PBR лежит по адресу А, и будем знать, что если будет обращение к А, то надо отвечать так, как будто прочиталась PBR, ну и так далее.&lt;/p&gt;
&lt;p&gt;А отвечать на команды чтения устройство уже умеет, и где взять адрес данных &amp;mdash; тоже знает.&lt;/p&gt;
&lt;p&gt;Итак, необходимо будет отслеживать обращения к следующим фиктивным областям в виртуальной памяти устройства:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;главная загрузочная запись устройства&lt;/li&gt;
&lt;li&gt;загрузочная запись раздела, хватит одной, хотя можно и четыре&lt;/li&gt;
&lt;li&gt;основная таблица FAT &amp;mdash; список кластеров, занятых папками и файлами&lt;/li&gt;
&lt;li&gt;резервная таблица FAT&lt;/li&gt;
&lt;li&gt;файловая запись, соответствующая корневому каталогу&lt;/li&gt;
&lt;li&gt;прочие файловые записи, по обстоятельствам (фиктивные файлы, а при желании &amp;mdash; и фиктивные папки)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Теперь надо разобраться во внутренней структуре этих областей, разрисовать их подробнее, но об этом в следующий раз.&lt;/p&gt;</summary><category term="usb-polygon"></category></entry><entry><title>USB-polygon-8: Обмен по USB, еще о взаимодействии с «чистым» устройством</title><link href="http://romeogolf.github.io/usb-polygon-8.html" rel="alternate"></link><updated>2017-01-29T20:00:00+05:00</updated><author><name>RomeoGolf</name></author><id>tag:romeogolf.github.io,2017-01-29:usb-polygon-8.html</id><summary type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;Завершая этап&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;Физическое устройство&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#scsi-"&gt;Пользовательская SCSI-команда&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;Завершая этап&lt;/h2&gt;
&lt;p&gt;В результате проделанной работы получилось &amp;laquo;сырое&amp;raquo; с точки зрения файловой системы MassStorage-устройство, приспособленное к обмену информацией с ПК по USB. С определенными ограничениями, конечно: во-первых, требуется некоторый самописный код для ПК, причем, требующий прав администратора; во-вторых, на устройстве программа тоже выглядит не особенно изящно, нужно городить какие-то конструкции для идентификации запрашиваемой и получаемой информации по ее адресу, а также какое-то распределение в адресном пространстве источников и приемников информации. Ну, это уже зависит от конкретной задачи, а текущая задача &amp;mdash; учебная &amp;mdash; фактически выполнена.&lt;/p&gt;
&lt;p&gt;Теперь хотелось бы развить тему: сделать устройство, более точно имитирующее флэш-накопитель. То есть, надо добавить некоторое подобие файловой системы.&lt;/p&gt;
&lt;p&gt;Однако, перед этим хотелось бы провести еще пару экспериментов с &amp;laquo;сырым&amp;raquo; устройством.&lt;/p&gt;
&lt;h2 id="_2"&gt;Физическое устройство&lt;/h2&gt;
&lt;p&gt;Первая &amp;laquo;доделка&amp;raquo; касается кода для ПК. Доступ к устройству осуществляется при помощи дескриптора (HANDLE), который возвращает функция &lt;code&gt;CreateFile&lt;/code&gt;. Этой функции сейчас передается в качестве параметра &lt;code&gt;DevicePath&lt;/code&gt;, который, в свою очередь, возвращается функцией &lt;code&gt;SetupDiEnumDeviceInterfaces&lt;/code&gt;, принимающей среди параметров в том числе GUID интерфейса, можно диска, можно тома.&lt;/p&gt;
&lt;p&gt;Хочу попробовать достучаться до платы, как до физического устройства, PhysicalDrive. Есть мнение, что это будет более единообразно для разных версий ОС Windows, а также должно снять сомнения, к чему же правильнее обращаться &amp;mdash; к диску или к тому. &lt;/p&gt;
&lt;p&gt;Для этого снова пригодится функция &lt;code&gt;DeviceIoControl&lt;/code&gt;, которой вторым параметром нужно передать &lt;code&gt;IOCTL_VOLUME_GET_VOLUME_DISK_EXTENTS&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;В коде после комментария &lt;code&gt;// ----- работа с устройством -----&lt;/code&gt; надо добавить объявление новых переменных:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;                    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;diskNum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                &lt;span class="c1"&gt;// количество дисков&lt;/span&gt;
                    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;physicalDrive&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="c1"&gt;// строка под &amp;quot;\\\\.\\PhysicalDrive%d&amp;quot;&lt;/span&gt;
                    &lt;span class="n"&gt;DWORD&lt;/span&gt; &lt;span class="n"&gt;bufsize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bufsizeret&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;      &lt;span class="c1"&gt;// размеры буфера&lt;/span&gt;
                    &lt;span class="n"&gt;VOLUME_DISK_EXTENTS&lt;/span&gt; &lt;span class="n"&gt;buf_ioctl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// буфер для GET_VOLUME_DISK_EXTENTS&lt;/span&gt;
                    &lt;span class="n"&gt;bufsize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;VOLUME_DISK_EXTENTS&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Однако, парочку появившихся типов этот код не знает. Не буду подключать соответствующий заголовок, просто запишу после объявления &lt;code&gt;struct scsi_st&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;_DISK_EXTENT&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;DWORD&lt;/span&gt; &lt;span class="n"&gt;DiskNumber&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;LARGE_INTEGER&lt;/span&gt; &lt;span class="n"&gt;StartingOffset&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;LARGE_INTEGER&lt;/span&gt; &lt;span class="n"&gt;ExtentLength&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;DISK_EXTENT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;PDISK_EXTENT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;_VOLUME_DISK_EXTENTS&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="n"&gt;DWORD&lt;/span&gt; &lt;span class="n"&gt;NumberOfDiskExtents&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="n"&gt;DISK_EXTENT&lt;/span&gt; &lt;span class="n"&gt;Extents&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ANYSIZE_ARRAY&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;VOLUME_DISK_EXTENTS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;А также такие &lt;code&gt;#define&lt;/code&gt; после всех &lt;code&gt;#include&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#define IOCTL_VOLUME_BASE   ((ULONG) &amp;#39;V&amp;#39;)&lt;/span&gt;
&lt;span class="cp"&gt;#define IOCTL_VOLUME_GET_VOLUME_DISK_EXTENTS \&lt;/span&gt;
&lt;span class="cp"&gt;  CTL_CODE(IOCTL_VOLUME_BASE, 0, METHOD_BUFFERED, FILE_ANY_ACCESS)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Теперь ниже  &lt;code&gt;// ----- работа с устройством -----&lt;/code&gt; после обявления переменных можно добавить код:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;                    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DeviceIoControl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hDevice&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;IOCTL_VOLUME_GET_VOLUME_DISK_EXTENTS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;buf_ioctl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;bufsize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;bufsizeret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="nb"&gt;NULL&lt;/span&gt;
                            &lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;OutFormatMsg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;PhysicDiscErr&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;_tprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;DiscNum = %lu&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buf_ioctl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NumberOfDiskExtents&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                        &lt;span class="n"&gt;diskNum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;buf_ioctl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Extents&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;DiskNumber&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                        &lt;span class="n"&gt;_tprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Disk = %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;diskNum&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;diskNum&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                            &lt;span class="n"&gt;sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;physicalDrive&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\\\\&lt;/span&gt;&lt;span class="s"&gt;.&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;PhysicalDrive%d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;diskNum&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                        &lt;span class="p"&gt;}&lt;/span&gt;
                        &lt;span class="n"&gt;_tprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;physicalDrive: %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;physicalDrive&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Теперь в консольном выводе появятся новые строки:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;. . .
--- This is my device! ---
DiscNum = 1
Disk = 1
physicalDrive: \\.\PhysicalDrive1
WriteFile done
len = 1024
ReadFile done
data_2 = 0
len = 1024
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;То есть, дисков 1, номер диска 1, строка для &lt;code&gt;CreateFile&lt;/code&gt; сформирована. Можно сразу после пытаться получить дескриптор устройства по номеру физического диска:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;                    &lt;span class="n"&gt;HANDLE&lt;/span&gt; &lt;span class="n"&gt;hDevice2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;CreateFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                            &lt;span class="n"&gt;physicalDrive&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;GENERIC_READ&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;GENERIC_WRITE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="c1"&gt;//0,&lt;/span&gt;
                            &lt;span class="c1"&gt;//FILE_SHARE_READ or FILE_SHARE_WRITE,&lt;/span&gt;
                            &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;OPEN_EXISTING&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;FILE_FLAG_WRITE_THROUGH&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;FILE_FLAG_NO_BUFFERING&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="nb"&gt;NULL&lt;/span&gt;
                            &lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hDevice2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;INVALID_HANDLE_VALUE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;OutFormatMsg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;CreateFile 2 Error&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;_tprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_T&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;CreateFile 2 done! &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

                        &lt;span class="c1"&gt;// сюда вставить ReadFile и WriteFile;&lt;/span&gt;
                        &lt;span class="c1"&gt;// сюда же можно и обе&lt;/span&gt;
                        &lt;span class="c1"&gt;// DeviceIoControl с IOCTL_SCSI_PASS_THROUGH_DIRECT&lt;/span&gt;

                        &lt;span class="n"&gt;CloseHandle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hDevice2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;И в имеющихся &lt;code&gt;ReadFile&lt;/code&gt; и &lt;code&gt;WriteFile&lt;/code&gt; после их перестановки на новое место (указанное комментарием в коде) заменяю &lt;code&gt;hDevice&lt;/code&gt; на &lt;code&gt;hDevice2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Проверено &amp;mdash; работает. Делает все то же, что и предыдущая версия.&lt;/p&gt;
&lt;p&gt;Еще можно попробовать заблокировать и размонтировать устройство при помощи &lt;code&gt;DeviceIoControl&lt;/code&gt; с параметрами &lt;code&gt;FSCTL_LOCK_VOLUME&lt;/code&gt; и &lt;code&gt;FSCTL_DISMOUNT_VOLUME&lt;/code&gt; соответственно, но это уже другая история.&lt;/p&gt;
&lt;h2 id="scsi-"&gt;Пользовательская SCSI-команда&lt;/h2&gt;
&lt;p&gt;Теперь обращусь к устройству. До сих пор оно выполняло только стандартные команды, передаваемые при помощи &lt;code&gt;ScsiPassThroughDirect&lt;/code&gt;, это &lt;code&gt;WRITE(10)&lt;/code&gt; с кодом 0x2A и &lt;code&gt;READ (10)&lt;/code&gt; с кодом 0x28.&lt;/p&gt;
&lt;p&gt;А если мне надо выполнить какое-то свое действие, не предусмотренное набором SCSI-команд? Или, скажем, надо именно записать, но, допустим, в нулевой &amp;laquo;сектор&amp;raquo;, а операционная система после очередного обновления безопасности не разрешает этого делать, чтобы сильно умелые ручки не портили MBR устройств? &amp;laquo;Сектор&amp;raquo; здесь написал в кавычках, потому что нет никаких секторов в помине, есть только используемые в обмене адреса данных, которые в нормальном устройстве могли бы действительно указывать на сектор.&lt;/p&gt;
&lt;p&gt;Пробую: в SCSI-команде записи закрываю строку с кодом команды, а вместо нее пишу ее копию, но с кодом 0xC1: команды от 0xC0 до 0xFF вроде бы vendor cpecific.&lt;/p&gt;
&lt;p&gt;Отчет о выполнении операции записи получен, однако на светодиодной индикации платы не видно, чтобы что-то записалось. Пора править код программы для устройства.&lt;/p&gt;
&lt;p&gt;Открываю &lt;code&gt;/Lib/SCSI.c&lt;/code&gt;, нахожу там функцию &lt;code&gt;bool SCSI_DecodeSCSICommand(void)&lt;/code&gt;, в ней переключатель &lt;code&gt;switch (CommandBlock.SCSICommandData[0])&lt;/code&gt;, благо, кроме него там почти ничего нет. Сразу под строкой &lt;code&gt;case SCSI_CMD_WRITE_10:&lt;/code&gt; добавляю строку &lt;code&gt;case 0xC1:&lt;/code&gt;. Тем самым заставляю устройство реагировать на команду 0xC1 так же, как и на команду 0x2A.&lt;/p&gt;
&lt;p&gt;Проверяю &amp;mdash; работает. То есть, запись снова проходит, и на светодиодах отображается переданный с ПК байт.&lt;/p&gt;
&lt;p&gt;Таким образом можно дублировать имеющиеся команды, можно писать совсем собственные. Для самописных команд можно особым образом обрабатывать Command Descriptor Block (CDB), а как это сделать &amp;mdash; можно подсмотреть в используемой здесь функции &lt;code&gt;SCSI_Command_ReadWrite_10&lt;/code&gt;, например. Там есть ближе к началу строки&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;BlockAddress&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SwapEndian_32&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint32_t&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;CommandBlock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SCSICommandData&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="n"&gt;TotalBlocks&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SwapEndian_16&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint16_t&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;CommandBlock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SCSICommandData&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;В них функция извлекает адрес и длину из указателя на 2 и 7 байты CDB. Можно напихать в CDB для самописной команды свою информацию в нужные места, а в обработчике вытащить ее аналогичным образом, зная место и размер.&lt;/p&gt;
&lt;p&gt;Ну вот, теперь с &amp;laquo;сырым&amp;raquo; устройством практически всё. Что касается кода &amp;mdash; надо закоммитить текущие изменения в git с тегами &amp;laquo;v0.3&amp;raquo; для обеих программ.&lt;/p&gt;
&lt;p&gt;Далее начнется работа по имитации файловой системы на устройстве, несмотря на отсутствие памяти для этой самой файловой системы.&lt;/p&gt;</summary><category term="usb-polygon"></category></entry><entry><title>USB-polygon-7: Обмен по USB, подготовка устройства</title><link href="http://romeogolf.github.io/usb-polygon-7.html" rel="alternate"></link><updated>2017-01-25T20:00:00+05:00</updated><author><name>RomeoGolf</name></author><id>tag:romeogolf.github.io,2017-01-25:usb-polygon-7.html</id><summary type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;Проект заново&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;&amp;laquo;Лампочки и кнопки&amp;raquo;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;Проверка связи&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-"&gt;Пиши-читай (заготовка)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#flash-"&gt;Чтение и запись мимо flash-памяти&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;Еще немного о взаимодействии с ПК&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;Проект заново&lt;/h2&gt;
&lt;p&gt;Продолжаем разговор. Попробую завести какой-то обмен между платой и ПК. Подготовлю заготовку контроллерной программы, но не буду продолжать то, что сделано раньше, а начну сначала.&lt;/p&gt;
&lt;p&gt;Создаю папку &lt;code&gt;usb-polygon&lt;/code&gt;, копирую в нее demo-проект &lt;code&gt;MassStorage&lt;/code&gt; из &lt;code&gt;ClassDriver&lt;/code&gt; и саму библиотеку &lt;code&gt;LUFA&lt;/code&gt; (второе, в принципе, не обязательно, но я так сделаю), и в &lt;code&gt;MassStorage&lt;/code&gt; создаю git-репозиторий.&lt;/p&gt;
&lt;p&gt;Далее правлю &lt;code&gt;Makefile&lt;/code&gt;, оставляя в переменной &lt;code&gt;LUFA_PATH&lt;/code&gt; только одну пару точек (библиотека теперь лежит одним уровнем выше) и закрываю комментариями переменные &lt;code&gt;COMPILER_PATH&lt;/code&gt; и &lt;code&gt;SHELL&lt;/code&gt; &amp;mdash; они не нужны, если cygwin уже настроен, как описано в предыдущих выпусках цикла. В результате получаю первую успешную компиляцию проекта с получением hex-файла, который, однако, еще нельзя использовать.&lt;/p&gt;
&lt;p&gt;Надо исправить в &lt;code&gt;Makefile&lt;/code&gt; переменную &lt;code&gt;MCU&lt;/code&gt; на &lt;code&gt;at90usb162&lt;/code&gt; и &lt;code&gt;BOARD&lt;/code&gt; на &lt;code&gt;NONE&lt;/code&gt; и начинать править код, потому что компилятор выдаст ошибки. Чтобы получить удачную компиляцию, в коде &lt;code&gt;MassStorage.c&lt;/code&gt; закрываю комментариями функции (и блоки, их содержащие), с &lt;code&gt;Dataflash&lt;/code&gt; в названии, а заодно и с &lt;code&gt;LED&lt;/code&gt; в названии, потому что в моей плате хоть и есть светодиоды, но не такие и не там. Также закрываю Dataflash-функции в модуле &lt;code&gt;Lib/SCSI.c&lt;/code&gt; и директивы &lt;code&gt;#include&lt;/code&gt; с файлами &lt;code&gt;LEDs.c&lt;/code&gt;, &lt;code&gt;Dataflash.c&lt;/code&gt; и &lt;code&gt;Platform.c&lt;/code&gt; в заголовочном файле &lt;code&gt;MassStorage.h&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="_2"&gt;&amp;laquo;Лампочки и кнопки&amp;raquo;&lt;/h2&gt;
&lt;p&gt;Теперь надо добавить код, который будет выдавать что-то интересное на светодиоды и реагировать на кнопки.&lt;/p&gt;
&lt;p&gt;Перед главной функцией (&lt;code&gt;main&lt;/code&gt;) добавляю объявление переменной &amp;mdash; контрольного счетчика, который можно будет увеличивать разными способами: в основном цикле безусловно или при обнаружении изменения флага, в прерываниях, еще как-нибудь:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;cnt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;          &lt;span class="c1"&gt;// просто счетчик&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;В главной функции после &lt;code&gt;GlobalInterruptEnable();&lt;/code&gt; добавляю инициализацию портов, объявление переменных и запуск таймеров:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;PORTD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x00&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// начальное значение - все нули&lt;/span&gt;
    &lt;span class="n"&gt;DDRD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0xFF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     &lt;span class="c1"&gt;// все линии порта на вывод&lt;/span&gt;
    &lt;span class="n"&gt;PORTC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x00&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// без &amp;quot;подтяжки&amp;quot; (есть внешняя)&lt;/span&gt;
    &lt;span class="n"&gt;DDRC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x00&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     &lt;span class="c1"&gt;// все линии порта на ввод&lt;/span&gt;

    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;cnt_bt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     &lt;span class="c1"&gt;// счетчик нажатий на кнопки&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;mode_out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="c1"&gt;// режим вывода&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;bt_now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     &lt;span class="c1"&gt;// состояние кнопок&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;bt_old&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     &lt;span class="c1"&gt;// состояние кнопок в прошлый раз&lt;/span&gt;

    &lt;span class="cm"&gt;/* запуск таймера 0 на период ~0.01 с */&lt;/span&gt;
    &lt;span class="cm"&gt;/* (защита от дребезга) */&lt;/span&gt;
    &lt;span class="n"&gt;TCCR0B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="cm"&gt;/* 1 тик = 0.000032 с */&lt;/span&gt;
    &lt;span class="n"&gt;TCNT0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="cm"&gt;/* 256 раз ~ 0.008192 c  */&lt;/span&gt;

    &lt;span class="cm"&gt;/* запуск таймера 1 на период 0.5 с */&lt;/span&gt;
    &lt;span class="cm"&gt;/* (счетчик с полусекундной задержкой) */&lt;/span&gt;
    &lt;span class="n"&gt;TCCR1B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;              &lt;span class="cm"&gt;/* 1 тик = 0.000032 с */&lt;/span&gt;
    &lt;span class="n"&gt;TCNT1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;65536&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;15625&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="cm"&gt;/* разрешение прерываний таймера 1*/&lt;/span&gt;
    &lt;span class="cm"&gt;/*TIMSK1 = (1 &amp;lt;&amp;lt; TOIE1);*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;В главном цикле &lt;code&gt;for&lt;/code&gt; после &lt;code&gt;USB_USBTask();&lt;/code&gt; добавляю код:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;        &lt;span class="cm"&gt;/* проверка срабатывания таймера без прерываний по флагу */&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;TIFR1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;TCNT1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;65536&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;15625&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="cm"&gt;/* перезапуск таймера 1 */&lt;/span&gt;
            &lt;span class="n"&gt;TIFR1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;              &lt;span class="cm"&gt;/* сброс флага таймера 1 */&lt;/span&gt;
            &lt;span class="n"&gt;cnt&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                  &lt;span class="cm"&gt;/* инкремент контрольного счетчика по таймеру */&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="cm"&gt;/* обработка действий по срабатыванию таймера 0 */&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;TIFR0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;TCNT0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="cm"&gt;/* перезапуск таймера 0 */&lt;/span&gt;
            &lt;span class="n"&gt;TIFR0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="cm"&gt;/* сброс флага срабатывания таймера 0 */&lt;/span&gt;

            &lt;span class="cm"&gt;/* cnt++;*/&lt;/span&gt;     &lt;span class="c1"&gt;// инкремент счетчика - чтобы что-то изменялось&lt;/span&gt;
            &lt;span class="n"&gt;bt_now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PINC&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                  &lt;span class="c1"&gt;// считывание порта с кнопками&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bt_now&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;bt_old&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;         &lt;span class="c1"&gt;// если состояние порта изменилось&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;bt_now&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0x30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// если нажаты сразу две верхние кнопки на разрядах 3 и 4&lt;/span&gt;
                    &lt;span class="n"&gt;mode_out&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;             &lt;span class="c1"&gt;// циклически изменить режим отображения,&lt;/span&gt;
                    &lt;span class="n"&gt;mode_out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mode_out&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;// которых всего 4 - 0, 1, 2 и 3 (2 разряда по маске)&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;                    &lt;span class="c1"&gt;// в противном случае&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;bt_now&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0x10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;cnt_bt&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;  &lt;span class="c1"&gt;// верхняя кнопка увеличивает счет нажатий&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;bt_now&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0x20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;cnt_bt&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;  &lt;span class="c1"&gt;// а вторая сверху - уменьшает&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="n"&gt;bt_old&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bt_now&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;            &lt;span class="c1"&gt;// и сохраняем состояние порта для следующей проверки&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mode_out&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;PORTD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cnt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// просто счетчик&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;
                     &lt;span class="n"&gt;PORTD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bt_now&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;            &lt;span class="c1"&gt;// состояние кнопок&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;PORTD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cnt_bt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// счетчик нажатий&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;PORTD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x55&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// просто константа&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;После главного цикла добавлю на всякий случай незадействованный обработчик прерывания таймера 1:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/* обработчик прерывания таймера, если разрешено, для проверки */&lt;/span&gt;
&lt;span class="n"&gt;ISR&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TIMER1_OVF_vect&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;TCNT1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;65536&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;15625&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// перезапуск таймера&lt;/span&gt;
    &lt;span class="n"&gt;cnt&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                  &lt;span class="c1"&gt;// инкремент контрольного счетчика&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Все это компилируется и работает на плате в автономном режиме: светодиоды по умолчанию демонстрируют счетчик, изменяющийся с полусекундным интервалом, одновременное нажатие на верхние две кнопки переключает режим отображения, позволяя показать состояние кнопок, &amp;laquo;кнопочный&amp;raquo; счетчик (увеличиваемый нажатием на верхнюю кнопку и уменьшаемый нажатием на вторую) или просто константу 0х55 (светодиоды горят через один). Плата при этом видна в системе как флэш-накопитель с файловой системой RAW и емкостью 0. Причем, Windows 7 дает ей букву очень не сразу и настойчиво предлагает отформатировать. Сохраняю очередной коммит в git и добавляю ему тег &amp;laquo;v0.1&amp;raquo;.&lt;/p&gt;
&lt;h2 id="_3"&gt;Проверка связи&lt;/h2&gt;
&lt;p&gt;Для начала хочу сделать так, чтобы плата посредством светодиодов показала, что видит обращение к себе со стороны компьютера.&lt;/p&gt;
&lt;p&gt;Под объявлением счетчика cnt добавляю объявление еще одного:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;cnt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;cnt_usb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;В переключателе &lt;code&gt;switch (mode_out)&lt;/code&gt; вместо вывода константы делаю вывод этого счетчика:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;                &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;PORTD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cnt_usb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;И &lt;code&gt;mode_out&lt;/code&gt; при объявлении присваиваю значение 3, чтобы показывало, что там творится при подаче питания с порта. Ну и надо наконец найти подходящее место, в которое вставить инкремент этого счетчика.&lt;/p&gt;
&lt;p&gt;Нахожу функцию &lt;code&gt;void MassStorage_Task(void)&lt;/code&gt;, в которой обрабатываются SCSI-команды, подаваемые устройству. Вот сразу после выяснения статуса команды проверяю этот статус и, если команда выполнена успешно, увеличиваю значение счетчика: после&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;        &lt;span class="cm"&gt;/* Decode the received SCSI command, set returned status code */&lt;/span&gt;
        &lt;span class="n"&gt;CommandStatus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SCSI_DecodeSCSICommand&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="nl"&gt;MS_SCSI_COMMAND_Pass&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;MS_SCSI_COMMAND_Fail&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;вставляю&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CommandStatus&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Status&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;MS_SCSI_COMMAND_Pass&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="n"&gt;cnt_usb&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;После компиляции и прошивки  запускаю выполнение (под Windows 7). Счетчик мгновенно досчитывает до значения 11. Потом потихонечку отсчитывает до 18, а потом резко наматывает довольно много, одновременно на экране ПК появляется предложение отформатировать диск, а счетчик продолжает считать. Буква диска получена. Счетчик еще считает потихонечку. Выделение буквы диска в проводнике вызывает всплеск отсчета, щелчок правой кнопкой &amp;mdash; тоже, как и выбор пункта &amp;laquo;Свойства&amp;raquo; контекстного меню.&lt;/p&gt;
&lt;p&gt;А счетчик продолжает считать. Система при подключении опрашивает устройство, чтобы узнать, что это и какие драйвера подключать. Потом пытается прочитать информацию о файловой системе, раз уж это MassStorage. Ну и потом периодически опрашивает, чтобы быть в курсе &amp;mdash; не уснуло ли, а то и вовсе отключилось.&lt;/p&gt;
&lt;p&gt;Кстати, если сравнивать статус не с &lt;code&gt;MS_SCSI_COMMAND_Pass&lt;/code&gt;, а с &lt;code&gt;MS_SCSI_COMMAND_Fail&lt;/code&gt;, счетчик ведет себя похоже, только не тикает, пока к устройству нет обращения. По-видимому, это связано с нереализованными в устройстве операциями записи и чтения. Точнее, с испорченными &amp;mdash; там же были закрыты функции Dataflash.&lt;/p&gt;
&lt;p&gt;Сделаю из этого в git отдельную ветку, скажем, test_usb.&lt;/p&gt;
&lt;p&gt;Продолжу проверку связи. Условие с приращением счетчика &lt;code&gt;cnt_usb&lt;/code&gt; в &lt;code&gt;MassStorage.c&lt;/code&gt; я закрою, зато добавлю строчку &lt;code&gt;cnt_usb++&lt;/code&gt; в модуле &lt;code&gt;SCSI.c&lt;/code&gt; в функции &lt;code&gt;bool SCSI_DecodeSCSICommand(void)&lt;/code&gt;, в переключателе &lt;code&gt;CommandBlock.SCSICommandData[0]&lt;/code&gt; при выборе &lt;code&gt;SCSI_CMD_INQUIRY'. Ну и добавлю объявление переменной&lt;/code&gt;cnt_usb&lt;code&gt;в&lt;/code&gt;SCSI.h&lt;code&gt;, где-нибудь в самом конце перед&lt;/code&gt;#endif`:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;        &lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;cnt_usb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Такая модификация позволяет узнать, когда и сколько раз система выдает устройству запрос &lt;code&gt;INQUIRY&lt;/code&gt;. Оказывается, пять раз после подключения, а потом по разику после запуска программы на С++ из предыдущего &lt;a href="http://romeogolf.github.io/usb-polygon-6.html"&gt;выпуска&lt;/a&gt;, потому что там есть явная подача этой команды при помощи &lt;code&gt;DeviceIoControl&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Аналогичным образом &amp;mdash; переставляя инкремент счетчика в разные пункты данного &lt;code&gt;switch&lt;/code&gt; &amp;mdash; можно исследовать количество и интенсивность подачи разных SCSI-команд системой устройству при подключении или при программном обращении. Это тема забавная, но не очень интересная, потому что такую информацию можно найти не обязательно методами реверс-инжиниринга, достаточно почитать документацию. Но сохраню коммит с подсчетом &lt;code&gt;INQUIRY&lt;/code&gt; в той же ветке и вернусь в ветку &lt;code&gt;master&lt;/code&gt; к тегу &amp;laquo;v0.1&amp;raquo;.&lt;/p&gt;
&lt;h2 id="-"&gt;Пиши-читай (заготовка)&lt;/h2&gt;
&lt;p&gt;На следующем этапе пробую реализовать запись и чтение данных по USB. Понятно, что в прототипе функции чтения и записи реализованы так, чтобы читать и писать в микросхему флэш-памяти, то есть, сделано это все в модуле DataflashManager. Но у меня флэшки нет, и данный модуль мне не нужен. Однако, убрать его совсем я пока не могу, потому что в нем есть важные макроопределения, без которых не компилируется проект. Значит, нужно эти самые &lt;code&gt;#define&lt;/code&gt; перенести в нужный модуль (лучше, пожалуй, сделать для этого отдельный, но это попозже, пока для проверки &amp;mdash; так) и переписать функции чтения-записи без участия флэш.&lt;/p&gt;
&lt;p&gt;Для начала в заголовочном файле SCSI.h, где-нибудь в самом конце перед &lt;code&gt;#endif&lt;/code&gt;, вставляю&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/* ----- instead DataflashManager ----- */&lt;/span&gt;

&lt;span class="cm"&gt;/* ------------------------------------ */&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;для строк, которые должны заменить &lt;code&gt;DataflashManager.h&lt;/code&gt;, и начинаю заполнять этот пробел. Сначала надо вставить то, что в &lt;code&gt;DataflashManager.h&lt;/code&gt; отсутствует, но подключается через &lt;code&gt;#include&lt;/code&gt;. Подключается хитро, с проверкой переменной &lt;code&gt;BOARD&lt;/code&gt;, определенной в makefile, поэтому возьму этот кусок из &lt;code&gt;LUFA\CodeTemplates\DriverStubs\Dataflash.h&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/* from ..\..\LUFA\CodeTemplates\DriverStubs\Dataflash.h */&lt;/span&gt;
    &lt;span class="cm"&gt;/* Public Interface - May be used in end-application: */&lt;/span&gt;
        &lt;span class="cm"&gt;/* Macros: */&lt;/span&gt;
            &lt;span class="cm"&gt;/** Constant indicating the total number of dataflash ICs mounted on the selected board. */&lt;/span&gt;
            &lt;span class="cp"&gt;#define DATAFLASH_TOTALCHIPS     1 &lt;/span&gt;&lt;span class="c1"&gt;// TODO: Replace with the number of Dataflashes on the board, max 2&lt;/span&gt;
            &lt;span class="cm"&gt;/** Mask for no dataflash chip selected. */&lt;/span&gt;
            &lt;span class="cp"&gt;#define DATAFLASH_NO_CHIP        0&lt;/span&gt;
            &lt;span class="cm"&gt;/** Mask for the first dataflash chip selected. */&lt;/span&gt;
            &lt;span class="cp"&gt;#define DATAFLASH_CHIP1          1 &lt;/span&gt;&lt;span class="c1"&gt;// TODO: Replace with mask with the pin attached to the first Dataflash /CS set&lt;/span&gt;
            &lt;span class="cm"&gt;/** Mask for the second dataflash chip selected. */&lt;/span&gt;
            &lt;span class="cp"&gt;#define DATAFLASH_CHIP2          2 &lt;/span&gt;&lt;span class="c1"&gt;// TODO: Replace with mask with the pin attached to the second Dataflash /CS set&lt;/span&gt;
            &lt;span class="cm"&gt;/** Internal main memory page size for the board&amp;#39;s dataflash ICs. */&lt;/span&gt;
            &lt;span class="cp"&gt;#define DATAFLASH_PAGE_SIZE      1024 &lt;/span&gt;&lt;span class="c1"&gt;// TODO: Replace with the page size for the Dataflash ICs&lt;/span&gt;
            &lt;span class="cm"&gt;/** Total number of pages inside each of the board&amp;#39;s dataflash ICs. */&lt;/span&gt;
            &lt;span class="cp"&gt;#define DATAFLASH_PAGES          8192 &lt;/span&gt;&lt;span class="c1"&gt;// TODO: Replace with the total number of pages inside one of the Dataflash ICs&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Недостающие значения заполнил чем-то интуитивно похожим на правду, не разбираясь пока в тонкостях использования. Дальше переписываю уже из &lt;code&gt;DataflashManager.h&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/* from DataflashManager.h */&lt;/span&gt;
    &lt;span class="cm"&gt;/* Preprocessor Checks: */&lt;/span&gt;
        &lt;span class="cp"&gt;#if (DATAFLASH_PAGE_SIZE % 16)&lt;/span&gt;
            &lt;span class="cp"&gt;#error Dataflash page size must be a multiple of 16 bytes.&lt;/span&gt;
        &lt;span class="cp"&gt;#endif&lt;/span&gt;

    &lt;span class="cm"&gt;/* Defines: */&lt;/span&gt;
        &lt;span class="cm"&gt;/** Total number of bytes of the storage medium, comprised of one or more Dataflash ICs. */&lt;/span&gt;
        &lt;span class="cp"&gt;#define VIRTUAL_MEMORY_BYTES         ((uint32_t)DATAFLASH_PAGES * DATAFLASH_PAGE_SIZE * DATAFLASH_TOTALCHIPS)&lt;/span&gt;
        &lt;span class="cm"&gt;/** Block size of the device. This is kept at 512 to remain compatible with the OS despite the underlying&lt;/span&gt;
&lt;span class="cm"&gt;         *  storage media (Dataflash) using a different native block size. Do not change this value.&lt;/span&gt;
&lt;span class="cm"&gt;         */&lt;/span&gt;
        &lt;span class="cp"&gt;#define VIRTUAL_MEMORY_BLOCK_SIZE    512&lt;/span&gt;
        &lt;span class="cm"&gt;/** Total number of blocks of the virtual memory for reporting to the host as the device&amp;#39;s total capacity. Do not&lt;/span&gt;
&lt;span class="cm"&gt;         *  change this value; change VIRTUAL_MEMORY_BYTES instead to alter the media size.&lt;/span&gt;
&lt;span class="cm"&gt;         */&lt;/span&gt;
        &lt;span class="cp"&gt;#define VIRTUAL_MEMORY_BLOCKS        (VIRTUAL_MEMORY_BYTES / VIRTUAL_MEMORY_BLOCK_SIZE)&lt;/span&gt;
        &lt;span class="cm"&gt;/** Blocks in each LUN, calculated from the total capacity divided by the total number of Logical Units in the device. */&lt;/span&gt;
        &lt;span class="cp"&gt;#define LUN_MEDIA_BLOCKS             (VIRTUAL_MEMORY_BLOCKS / TOTAL_LUNS)&lt;/span&gt;

    &lt;span class="cm"&gt;/* Function Prototypes: */&lt;/span&gt;
        &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;WriteBlocks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;BlockAddress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                          &lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;TotalBlocks&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;ReadBlocks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;BlockAddress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                         &lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;TotalBlocks&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;При этом укорачиваю названия функций чтения и записи. В &lt;code&gt;SCSI.c&lt;/code&gt; вставляю пока пустые определения объявленных в заголовочнике функций:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;WriteBlocks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;BlockAddress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                          &lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;TotalBlocks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;ReadBlocks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;BlockAddress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                         &lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;TotalBlocks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;После этого в функции &lt;code&gt;SCSI_Command_ReadWrite_10&lt;/code&gt; раскомментирую блок &lt;code&gt;if (IsDataRead == DATA_READ)&lt;/code&gt; и в нем тоже укорачиваю названия функций чтения и записи, чтобы соответствовали. Теперь можно закрыть пока что комментариями&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;//      #include &amp;quot;DataflashManager.h&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;в заголовочниках &lt;code&gt;SCSI.h&lt;/code&gt; и &lt;code&gt;MassStorage.h&lt;/code&gt;. Теперь &lt;code&gt;make clean&lt;/code&gt;, &lt;code&gt;make&lt;/code&gt; и проверка работоспособности &amp;mdash; прошивка и созерцание диодиков. Работает, как раньше, но без модуля &lt;code&gt;DataflashManager&lt;/code&gt;. Надо добавить коммит git.&lt;/p&gt;
&lt;p&gt;Правда, совсем стирать этот модуль рано, ведь функции чтения и записи еще пустые, а для их реализации надо опираться на имеющиеся.&lt;/p&gt;
&lt;h2 id="flash-"&gt;Чтение и запись мимо flash-памяти&lt;/h2&gt;
&lt;p&gt;Из модуля &lt;code&gt;DataflashManager&lt;/code&gt; беру тела функций &lt;code&gt;DataflashManager_ReadBlocks&lt;/code&gt; и &lt;code&gt;DataflashManager_WriteBlocks&lt;/code&gt; для &lt;code&gt;ReadBlocks&lt;/code&gt; и &lt;code&gt;WriteBlocks&lt;/code&gt; соответственно, стираю оттуда все, связанное с flash-памятью, добавляю по паре собственных переменных и модифицирую получение данных из буфера конечной точки. Получается следующее:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/** Writes blocks (OS blocks, not Dataflash pages) to the storage medium, the board Dataflash IC(s), from&lt;/span&gt;
&lt;span class="cm"&gt; *  the pre-selected data OUT endpoint. This routine reads in OS sized blocks from the endpoint and writes&lt;/span&gt;
&lt;span class="cm"&gt; *  them to the Dataflash in Dataflash page sized blocks.&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; *  \param[in] BlockAddress  Data block starting address for the write sequence&lt;/span&gt;
&lt;span class="cm"&gt; *  \param[in] TotalBlocks   Number of blocks of data to write&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;WriteBlocks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;BlockAddress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                  &lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;TotalBlocks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;CurrDFPage&lt;/span&gt;          &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;BlockAddress&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;VIRTUAL_MEMORY_BLOCK_SIZE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;DATAFLASH_PAGE_SIZE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;CurrDFPageByte&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;BlockAddress&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;VIRTUAL_MEMORY_BLOCK_SIZE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;DATAFLASH_PAGE_SIZE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;uint8_t&lt;/span&gt;  &lt;span class="n"&gt;CurrDFPageByteDiv16&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CurrDFPageByte&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;uint8_t&lt;/span&gt;  &lt;span class="n"&gt;data_8&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="cm"&gt;/* Wait until endpoint is ready before continuing */&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Endpoint_WaitUntilReady&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TotalBlocks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;BytesInBlockDiv16&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="cm"&gt;/* Write an endpoint packet sized data block to the Dataflash */&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BytesInBlockDiv16&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;VIRTUAL_MEMORY_BLOCK_SIZE&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="cm"&gt;/* Check if the endpoint is currently empty */&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Endpoint_IsReadWriteAllowed&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="cm"&gt;/* Clear the current endpoint bank */&lt;/span&gt;
                &lt;span class="n"&gt;Endpoint_ClearOUT&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="cm"&gt;/* Wait until the host has sent another packet */&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Endpoint_WaitUntilReady&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
                  &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="cm"&gt;/* Check if end of Dataflash page reached */&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CurrDFPageByteDiv16&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DATAFLASH_PAGE_SIZE&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="cm"&gt;/* Reset the Dataflash buffer counter, increment the page counter */&lt;/span&gt;
                &lt;span class="n"&gt;CurrDFPageByteDiv16&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;CurrDFPage&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="cm"&gt;/* Write one 16-byte chunk of data to the Dataflash */&lt;/span&gt;
            &lt;span class="n"&gt;data_8&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Endpoint_Read_8&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;data_8&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Endpoint_Read_8&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;data_8&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Endpoint_Read_8&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;data_8&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Endpoint_Read_8&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;data_8&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Endpoint_Read_8&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;data_8&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Endpoint_Read_8&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;data_8&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Endpoint_Read_8&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;data_8&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Endpoint_Read_8&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;data_8&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Endpoint_Read_8&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;data_8&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Endpoint_Read_8&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;data_8&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Endpoint_Read_8&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;data_8&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Endpoint_Read_8&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;data_8&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Endpoint_Read_8&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;data_8&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Endpoint_Read_8&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;data_8&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Endpoint_Read_8&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;data_8&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Endpoint_Read_8&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;data_PC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data_8&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="cm"&gt;/* Increment the Dataflash page 16 byte block counter */&lt;/span&gt;
            &lt;span class="n"&gt;CurrDFPageByteDiv16&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="cm"&gt;/* Increment the block 16 byte block counter */&lt;/span&gt;
            &lt;span class="n"&gt;BytesInBlockDiv16&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="cm"&gt;/* Check if the current command is being aborted by the host */&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IsMassStoreReset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="cm"&gt;/* Decrement the blocks remaining counter */&lt;/span&gt;
        &lt;span class="n"&gt;TotalBlocks&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/* If the endpoint is empty, clear it ready for the next packet from the host */&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Endpoint_IsReadWriteAllowed&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
      &lt;span class="n"&gt;Endpoint_ClearOUT&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/** Reads blocks (OS blocks, not Dataflash pages) from the storage medium, the board Dataflash IC(s), into&lt;/span&gt;
&lt;span class="cm"&gt; *  the pre-selected data IN endpoint. This routine reads in Dataflash page sized blocks from the Dataflash&lt;/span&gt;
&lt;span class="cm"&gt; *  and writes them in OS sized blocks to the endpoint.&lt;/span&gt;
&lt;span class="cm"&gt; *&lt;/span&gt;
&lt;span class="cm"&gt; *  \param[in] BlockAddress  Data block starting address for the read sequence&lt;/span&gt;
&lt;span class="cm"&gt; *  \param[in] TotalBlocks   Number of blocks of data to read&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;ReadBlocks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;BlockAddress&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                 &lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;TotalBlocks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;CurrDFPage&lt;/span&gt;          &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;BlockAddress&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;VIRTUAL_MEMORY_BLOCK_SIZE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;DATAFLASH_PAGE_SIZE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;uint16_t&lt;/span&gt; &lt;span class="n"&gt;CurrDFPageByte&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;BlockAddress&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;VIRTUAL_MEMORY_BLOCK_SIZE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;DATAFLASH_PAGE_SIZE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;uint8_t&lt;/span&gt;  &lt;span class="n"&gt;CurrDFPageByteDiv16&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CurrDFPageByte&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;uint8_t&lt;/span&gt;  &lt;span class="n"&gt;data_8&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kt"&gt;uint8_t&lt;/span&gt;  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pdata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data_8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="cm"&gt;/* Wait until endpoint is ready before continuing */&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Endpoint_WaitUntilReady&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TotalBlocks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;BytesInBlockDiv16&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="cm"&gt;/* Read an endpoint packet sized data block from the Dataflash */&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BytesInBlockDiv16&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;VIRTUAL_MEMORY_BLOCK_SIZE&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="cm"&gt;/* Check if the endpoint is currently full */&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Endpoint_IsReadWriteAllowed&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="cm"&gt;/* Clear the endpoint bank to send its contents to the host */&lt;/span&gt;
                &lt;span class="n"&gt;Endpoint_ClearIN&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

                &lt;span class="cm"&gt;/* Wait until the endpoint is ready for more data */&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Endpoint_WaitUntilReady&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
                  &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="cm"&gt;/* Check if end of Dataflash page reached */&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CurrDFPageByteDiv16&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DATAFLASH_PAGE_SIZE&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="cm"&gt;/* Reset the Dataflash buffer counter, increment the page counter */&lt;/span&gt;
                &lt;span class="n"&gt;CurrDFPageByteDiv16&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;CurrDFPage&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="n"&gt;data_8&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data_device&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="cm"&gt;/* Read one 16-byte chunk of data from the Dataflash */&lt;/span&gt;
            &lt;span class="n"&gt;Endpoint_Write_8&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pdata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
            &lt;span class="n"&gt;Endpoint_Write_8&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pdata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
            &lt;span class="n"&gt;Endpoint_Write_8&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pdata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
            &lt;span class="n"&gt;Endpoint_Write_8&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pdata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
            &lt;span class="n"&gt;Endpoint_Write_8&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pdata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
            &lt;span class="n"&gt;Endpoint_Write_8&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pdata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
            &lt;span class="n"&gt;Endpoint_Write_8&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pdata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
            &lt;span class="n"&gt;Endpoint_Write_8&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pdata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
            &lt;span class="n"&gt;Endpoint_Write_8&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pdata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
            &lt;span class="n"&gt;Endpoint_Write_8&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pdata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
            &lt;span class="n"&gt;Endpoint_Write_8&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pdata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
            &lt;span class="n"&gt;Endpoint_Write_8&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pdata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
            &lt;span class="n"&gt;Endpoint_Write_8&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pdata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
            &lt;span class="n"&gt;Endpoint_Write_8&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pdata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
            &lt;span class="n"&gt;Endpoint_Write_8&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pdata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
            &lt;span class="n"&gt;Endpoint_Write_8&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pdata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

            &lt;span class="cm"&gt;/* Increment the Dataflash page 16 byte block counter */&lt;/span&gt;
            &lt;span class="n"&gt;CurrDFPageByteDiv16&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="cm"&gt;/* Increment the block 16 byte block counter */&lt;/span&gt;
            &lt;span class="n"&gt;BytesInBlockDiv16&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="cm"&gt;/* Check if the current command is being aborted by the host */&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IsMassStoreReset&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
              &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="cm"&gt;/* Decrement the blocks remaining counter */&lt;/span&gt;
        &lt;span class="n"&gt;TotalBlocks&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/* If the endpoint is full, send its contents to the host */&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Endpoint_IsReadWriteAllowed&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
      &lt;span class="n"&gt;Endpoint_ClearIN&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;data_8&lt;/code&gt; &amp;mdash; это массив для обмена данными с буфером конечной точки, &lt;code&gt;data_PC&lt;/code&gt; и &lt;code&gt;data_device&lt;/code&gt; будут контрольными переменными для их отображения на светодиодах и в консоли ПК соответственно, а &lt;code&gt;first&lt;/code&gt; нужна для того, чтобы в контрольную переменную попал первый байт передаваемого из ПК массива и не перезатерся при дальнейшей передаче 16-байтных кусков. Контрольные переменные надо не забыть объявить в &lt;code&gt;SCSI.h&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="cm"&gt;/* variables */&lt;/span&gt;
        &lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;data_PC&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="kt"&gt;uint8_t&lt;/span&gt; &lt;span class="n"&gt;data_device&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;А также их надо определить и использовать в &lt;code&gt;MassStorage.c&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;:cpp
uint8_t data_PC;
uint8_t data_device;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;перед главной функцией, &lt;code&gt;data_device = cnt_bt;&lt;/code&gt; перед &lt;code&gt;switch (mode_out) {&lt;/code&gt; и &lt;code&gt;PORTD = data_PC;&lt;/code&gt; вместо &lt;code&gt;PORTD = 0x55&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Компиляция, прошивка, проверка. Теперь код для ПК, написанный несколько ранее на С++, работает ожидаемо: в консоли пишет &lt;code&gt;data_2 =&lt;/code&gt; и число, соответствующее счетчику &lt;code&gt;cnt_bt&lt;/code&gt; на устройстве (увеличивается нажатием верхней кнопки, уменьшается второй кнопкой, отображается на светодиодах в &amp;laquo;режиме 2&amp;raquo;), а на светодиодах в &amp;laquo;режиме 3&amp;raquo; вместо константы 0x55 отображается то, что указано в коде С++ в нулевом элементе массива q.&lt;/p&gt;
&lt;p&gt;И буква устройству в Windows 7 стала выделяться гораздо быстрее &amp;mdash; практически сразу после подключения.&lt;/p&gt;
&lt;p&gt;Это изменения, достойные новой версии. Коммит с тегом &amp;laquo;v0.2&amp;raquo;&lt;/p&gt;
&lt;h2 id="_4"&gt;Еще немного о взаимодействии с ПК&lt;/h2&gt;
&lt;p&gt;Вернусь к коду на С++, написанному для ПК. В операциях чтения и записи, реализованных через &lt;code&gt;DeviceIoControl&lt;/code&gt;, размер передаваемых данных указывается дважды: в поле &lt;code&gt;myspti.t_spti.DataTransferLength&lt;/code&gt; и в 7&amp;ndash;8 байтах &lt;code&gt;myspti.t_spti.Cdb&lt;/code&gt;, причем, в первом случае &amp;mdash; в байтах, а во втором &amp;mdash; в логических блоках. Насколько я разобрался, размер логического блока соответствует &lt;code&gt;VIRTUAL_MEMORY_BLOCK_SIZE&lt;/code&gt; на устройстве, то есть 512 байтов. Так вот, эти два размера в &lt;code&gt;myspti&lt;/code&gt; должны соответствовать друг другу, иначе могут быть ошибки. Например, можно поставить &lt;code&gt;q1 = 512&lt;/code&gt; и &lt;code&gt;myspti.t_spti.Cdb[8] = 0x01&lt;/code&gt; и будет работать, а &lt;code&gt;q1 = 1024&lt;/code&gt; и &lt;code&gt;myspti.t_spti.Cdb[8] = 0x01&lt;/code&gt; вызовет ошибку.&lt;/p&gt;
&lt;p&gt;А теперь я закрою эти две сложные конструкции чтения и записи с заполнением структур &lt;code&gt;myspti&lt;/code&gt; и вызовом &lt;code&gt;DeviceIoControl&lt;/code&gt; блочным комментарием, а вмето них, чуть выше их, напишу следующее:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;                    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WriteFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hDevice&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;q1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;q2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;OutFormatMsg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ReadFile Error&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;_tprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;WriteFile done&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                        &lt;span class="n"&gt;_tprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;len = %lu&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;q2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;


                    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ReadFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hDevice&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;q1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;q2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;OutFormatMsg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ReadFile Error&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;_tprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ReadFile done&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                        &lt;span class="n"&gt;_tprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;data_2 = %x&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
                        &lt;span class="n"&gt;_tprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;len = %lu&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;q2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;То есть, воспользуюсь для чтения и записи специально предназначенными для этого функциями. Компилирую, прошиваю, проверяю. &lt;/p&gt;
&lt;p&gt;Работает! Ура? Вроде, ура. Теперь уже можно использовать разработанное устройство для общения с ПК &amp;mdash; передавать данные в обе стороны и как-то их использовать.&lt;/p&gt;
&lt;p&gt;Причем, можно использовать не только данные, но и адрес. То есть, устройство, получив данные, может проанализировать адрес, по которому была команда их записать (или, получив команду чтения, проанализировать адрес, с которого данные затребованы) и выполнить определенные действия в зависимости от этого адреса. Сам адрес-то фиктивный, никакой памяти, к которой относится адресация, на плате нет. При использовании &lt;code&gt;ReadFile/WriteFile&lt;/code&gt; можно управлять адресом c ПК при помощи предварительно выполненной функции &lt;code&gt;SetFilePointer(hDevice, 0, NULL, FILE_BEGIN);&lt;/code&gt;, а в программе устройства анализировать &lt;code&gt;BlockAddress&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Пожалуй, на этом надо заканчивать, и так слишком много получилось для одного выпуска. Продолжение следует&amp;hellip;&lt;/p&gt;</summary><category term="usb-polygon"></category></entry><entry><title>USB-polygon-6: Обмен по USB, поиск среди устройств</title><link href="http://romeogolf.github.io/usb-polygon-6.html" rel="alternate"></link><updated>2017-01-09T20:00:00+05:00</updated><author><name>RomeoGolf</name></author><id>tag:romeogolf.github.io,2017-01-09:usb-polygon-6.html</id><summary type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;А что мы, собственно, нашли?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;Как спросить устройство?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#inquiry"&gt;Запрос INQUIRY и как это делается&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;А что мы, собственно, нашли?&lt;/h2&gt;
&lt;p&gt;В предыдущем &lt;a href="http://romeogolf.github.io/usb-polygon-5.html"&gt;выпуске&lt;/a&gt; получилось завести пример кода на С++, который в состоянии обнаружить подключенную флэшку. А что он еще может обнаружить?&lt;/p&gt;
&lt;p&gt;Закрою в коде примера условие&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;_tcscmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lpBuffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_T&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;USBSTOR&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;которое отсеивает устройства, не имеющие в своем &amp;laquo;FriendlyName&amp;raquo; подстроки &lt;code&gt;USBSTOR&lt;/code&gt;. Консольный вывод программы у меня показывает, что обнаружен CD-ROM (судя по &amp;laquo;\?\ide#diskst&amp;raquo;), а жесткий диск не видит. Если воткнуть флэшку &amp;mdash; то и ее тоже, конечно, находит.&lt;/p&gt;
&lt;p&gt;Попробую заменить строку&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;GUID&lt;/span&gt; &lt;span class="n"&gt;InterfaceGuid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="mh"&gt;0x53F56307&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0xB6BF&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0x11D0&lt;/span&gt;&lt;span class="p"&gt;,{&lt;/span&gt;&lt;span class="mh"&gt;0x94&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0xF2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0x00&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0xA0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0xC9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0x1E&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0xFB&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0x8B&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;на&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="c1"&gt;// \\?\usbstor#disk&amp;amp;ven_&amp;lt;name&amp;gt;&amp;amp;rev_0001#7&amp;amp;4e...&lt;/span&gt;
    &lt;span class="c1"&gt;// GUID_DEVINTERFACE_DISK&lt;/span&gt;
    &lt;span class="c1"&gt;//const GUID InterfaceGuid = { 0x53F56307,0xB6BF,0x11D0,{0x94,0xF2,0x00,0xA0,0xC9,0x1E,0xFB,0x8B} };&lt;/span&gt;

    &lt;span class="c1"&gt;// \\?\storage#removablemedia#8...&lt;/span&gt;
    &lt;span class="c1"&gt;// GUID_DEVINTERFACE_VOLUME&lt;/span&gt;
    &lt;span class="c1"&gt;// нельзя FriendlyName&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;GUID&lt;/span&gt; &lt;span class="n"&gt;InterfaceGuid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="mh"&gt;0x53f5630dL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0xb6bf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x11d0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mh"&gt;0x94&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0xf2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x00&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0xa0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0xc9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x1e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0xfb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x8b&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;для экспериментов. Первый вариант будет искать диски, а второй &amp;mdash; логические тома.&lt;/p&gt;
&lt;p&gt;Запуск программы с открытым вторым вариантом &lt;code&gt;InterfaceGuid&lt;/code&gt; показывает флэшку (если вставлена) и все разделы жесткого диска. Ах да, и CD-ROM тоже.&lt;/p&gt;
&lt;p&gt;По идее, именно второй вариант мне и нужен, потому что надо открыть устройство с определенной буквой, а буквы присваиваются разделам, а не устройствам, пусть даже у моей самоделки одному устройству соответствует один &amp;laquo;раздел&amp;raquo;, как, впрочем, у большинства флэшек. Но при использовании второго варианта недопустим параметр &lt;code&gt;SPDRP_FRIENDLYNAME&lt;/code&gt; для функции &lt;code&gt;SetupDiGetDeviceRegistryProperty&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Более того, мне вообще не нравится использование &lt;code&gt;SetupDiGetDeviceRegistryProperty&lt;/code&gt;: во-первых, работа с реестром в разных версиях Windows (XP и 7) несколько отличается, и неизвестно, какие неожиданности может подкинуть попытка обеспечить &amp;laquo;кроссплатформенность&amp;raquo; хотя бы в пределах Windows; во-вторых, в реестр это самое &amp;laquo;дружественное имя&amp;raquo; записывается при первом обнаружении устройства и определении, какой драйвер для него использовать, а мне хотелось бы иметь возможность идентификации платы при каждом включении, то есть, искать идентификатор именно на устройстве, а не в реестре.&lt;/p&gt;
&lt;h2 id="_2"&gt;Как спросить устройство?&lt;/h2&gt;
&lt;p&gt;А как обратиться к устройству? Видимо, надо сначала получить его дескриптор через &lt;code&gt;CreateFile&lt;/code&gt;. Параметр-путь у нас уже есть после вызова &lt;code&gt;SetupDiGetDeviceInterfaceDetail&lt;/code&gt;. То есть, обращение к реестру уже не нужно, пробуем по очереди открыть каждое обнаруженное устройство из класса &amp;laquo;том накопителя&amp;raquo;. Если не откроется &amp;mdash; значит, и не надо. Если откроется &amp;mdash; его можно будет спросить.&lt;/p&gt;
&lt;p&gt;Вот это вот:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;        &lt;span class="n"&gt;RequiredLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;SetupDiGetDeviceRegistryProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hDevInfo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;DeviceInfoData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SPDRP_ENUMERATOR_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PBYTE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;lpBuffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RequiredLength&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;RequiredLength&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GetLastError&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;ERROR_INSUFFICIENT_BUFFER&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;LocalFreeIf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lpBuffer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;lpBuffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TCHAR&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;LocalAlloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LPTR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RequiredLength&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TCHAR&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;OutFormatMsg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_T&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;SetupDiGetDeviceRegistryProperty&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;удаляем, следующий аналогичный блок с &lt;code&gt;SPDRP_FRIENDLYNAME&lt;/code&gt; вместо &lt;code&gt;SPDRP_ENUMERATOR_NAME&lt;/code&gt; (и &lt;code&gt;_tprintf&lt;/code&gt; после него) &amp;mdash; тоже, закрытое комментарием условие отсева &lt;code&gt;USBSTOR&lt;/code&gt; &amp;mdash; туда же. И &lt;code&gt;LocalFreeIf(lpBuffer);&lt;/code&gt; также можно удалить вместе с объявлением буфера &lt;code&gt;lpBuffer&lt;/code&gt; вверху кода, этот буфер теперь не нужен.&lt;/p&gt;
&lt;p&gt;Короче, от всего условия отсева остается только &lt;code&gt;_tprintf(_T("%s\n"), pDeviceInterfaceDetailData-&amp;gt;DevicePath);&lt;/code&gt;. Причем, эту строчку имеет смысл сдвинуть на ступень влево, удалить обрамляющие скобки, оставшиеся от условия и добавить пояснение, что именно мы выводим в консоль.&lt;/p&gt;
&lt;p&gt;Затем пытаемся открыть устройство, выведем результат попытки, и закрываем, если открылось.&lt;/p&gt;
&lt;p&gt;Итого, вместо условия отсева и отображения имени флэшки получаем следующее:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;        &lt;span class="n"&gt;_tprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_T&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pDeviceInterfaceDetailData-&amp;gt;DevicePath: %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;pDeviceInterfaceDetailData&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;DevicePath&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;HANDLE&lt;/span&gt; &lt;span class="n"&gt;hDevice&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;CreateFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;pDeviceInterfaceDetailData&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;DevicePath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;GENERIC_READ&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;GENERIC_WRITE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;FILE_SHARE_READ&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;FILE_SHARE_WRITE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;//0,&lt;/span&gt;
                &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;OPEN_EXISTING&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;//FILE_FLAG_WRITE_THROUGH | FILE_FLAG_NO_BUFFERING, //FILE_ATTRIBUTE_NORMAL,&lt;/span&gt;
                &lt;span class="nb"&gt;NULL&lt;/span&gt;
                &lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hDevice&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;INVALID_HANDLE_VALUE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;_tprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_T&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;CreateFile failed! &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;_tprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_T&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;CreateFile done! &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
            &lt;span class="n"&gt;CloseHandle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hDevice&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;В результате обнаруживаются CD-ROM, воткнутая флэшка, мое устройство и разделы жесткого диска, причем, с разделами диска получение дескриптора не работает. А отличить флэшку от моей платы по выводу программы практически нереально. Их строки отличаются только цифрами после &lt;code&gt;\\?\storage#removablemedia#&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Причем, в Windows 7 обнаруженные CD-ROM, флэшка и самоделка определяются программой так:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pDeviceInterfaceDetailData-&amp;gt;DevicePath: \\?\ide#cdromtsstcorp_cddvdw_sh-224bb________________sb00____#5&amp;amp;135419d0&amp;amp;0&amp;amp;1.0.0#{53f5630d-b6bf-11d0-94f2-00a0c91efb8b}
CreateFile done! 
pDeviceInterfaceDetailData-&amp;gt;DevicePath: \\?\storage#volume#_??_usbstor#disk&amp;amp;ven_generic&amp;amp;prod_flash_disk&amp;amp;rev_8.07#15e1289b&amp;amp;0#{53f56307-b6bf-11d0-94f2-00a0c91efb8b}#{53f5630d-b6bf-11d0-94f2-00a0c91efb8b}
CreateFile done! 
pDeviceInterfaceDetailData-&amp;gt;DevicePath: \\?\storage#volume#_??_usbstor#disk&amp;amp;ven_lufa&amp;amp;prod_dataflash_disk&amp;amp;rev_0.00#955373038393518170f0&amp;amp;0#{53f56307-b6bf-11d0-94f2-00a0c91efb8b}#{53f5630d-b6bf-11d0-94f2-00a0c91efb8b}
CreateFile done! 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;То есть, имеется информация о disk&amp;amp;ven, и уже можно найти нужное устройство, но мне этого мало, и есть необходимость использовать Windows XP, где эти данные отличаются.&lt;/p&gt;
&lt;p&gt;Готовлю дальнейшую доработку &amp;mdash; убираю лишнюю информацию из консоли: закрываю печать &amp;laquo;CreateFile failed!&amp;raquo; и переношу отображение &lt;code&gt;DevicePath&lt;/code&gt; непосредственно перед &amp;laquo;CreateFile done!&amp;raquo;, делаю коммит.&lt;/p&gt;
&lt;p&gt;Теперь у нас есть дескрипторы обнаруженных устройств, с которыми можно работать. Где-то там прячется самодельная плата, надо ее как-то идентифицировать. В этом поможет запрос &lt;code&gt;INQUIRY&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="inquiry"&gt;Запрос &lt;code&gt;INQUIRY&lt;/code&gt; и как это делается&lt;/h2&gt;
&lt;p&gt;ПК общается с USB-устройствами, используя интерфейс SCSII. Ну, то есть, не только с USB, но с ними тоже. Протокол SCSII предполагает обмен при помощи команд: компьютер посылает команду устройству, оно отвечает. Среди команд есть Inquiry &amp;mdash; запрос основных характеристик устройства. По этим характеристикам устройство можно идентифицировать. А чтобы отправить SCSII-команду, нужно использовать функцию &lt;code&gt;DeviceIoControl&lt;/code&gt;. Сама по себе эта функция не страшная, а вот ее параметры&amp;hellip; Надо подготовить изрядных размеров структуру и заполнить ее начальные значения, потом забрать результат.&lt;/p&gt;
&lt;p&gt;В общем, проще пояснить комментариями в коде.&lt;/p&gt;
&lt;p&gt;Для использования SCSII-интерфейса надо подключить &lt;code&gt;#include &amp;lt;ntddscsi.h&amp;gt;&lt;/code&gt;, и в свойствах проекта указать путь к этому заголовочнику: &lt;code&gt;Project -&amp;gt; Properties&lt;/code&gt;, в окне свойств в левой панели выбрать &lt;code&gt;C/C++ Build -&amp;gt; Settings&lt;/code&gt;, и на вкладке &lt;code&gt;Tool Settings&lt;/code&gt; выбрать &lt;code&gt;GCC C++ Compiler -&amp;gt; Includes&lt;/code&gt;, для &lt;code&gt;Include paths (-I)&lt;/code&gt; выбрать в файловой системе &lt;code&gt;C:\MinGW\include\ddk&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Чуть ниже объявим такую структуру:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// Это структура _SCSI_PASS_THROUGH_DIRECT_WITH_BUFFER,&lt;/span&gt;
&lt;span class="c1"&gt;// которая eсть в spti.h из состава Windows DDK&lt;/span&gt;
&lt;span class="c1"&gt;// и нет в MinGW&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;scsi_st&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;SCSI_PASS_THROUGH_DIRECT&lt;/span&gt; &lt;span class="n"&gt;t_spti&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;DWORD&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;              &lt;span class="c1"&gt;// realign buffer to double word boundary&lt;/span&gt;
    &lt;span class="n"&gt;byte&lt;/span&gt; &lt;span class="n"&gt;sensebuf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Можно, конечно, подключить заголовочник spti.h, но его надо сначала где-то найти, потом куда-то положить&amp;hellip; Пусть так будет.&lt;/p&gt;
&lt;p&gt;И между &lt;code&gt;_tprintf(_T("CreateFile done! \n"));&lt;/code&gt; и &lt;code&gt;CloseHandle(hDevice);&lt;/code&gt; вставляем такой код:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;            &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;vbuf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;512&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;             &lt;span class="c1"&gt;// буфер для принятого пакета&lt;/span&gt;
            &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;returned&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     &lt;span class="c1"&gt;// место под количество прочитанных байт&lt;/span&gt;

            &lt;span class="n"&gt;memset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scsi_st&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;    &lt;span class="c1"&gt;// инициализация структуры&lt;/span&gt;
            &lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t_spti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SCSI_PASS_THROUGH_DIRECT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// длина&lt;/span&gt;
            &lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t_spti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Lun&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;          &lt;span class="c1"&gt;// логический номер устройства (в одном устройстве может быть несколько логических)&lt;/span&gt;
            &lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t_spti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TargetId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     &lt;span class="c1"&gt;// целевой контроллер или устройство на шине&lt;/span&gt;
            &lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t_spti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PathId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;       &lt;span class="c1"&gt;// SCSII-порт или шина для запроса.&lt;/span&gt;
            &lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t_spti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CdbLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// длина command descriptor block (CDB, для кодов команд до 0x1F длина 6)&lt;/span&gt;
            &lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t_spti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataIn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SCSI_IOCTL_DATA_IN&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// на прием&lt;/span&gt;
            &lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t_spti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SenseInfoLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     &lt;span class="c1"&gt;// длина блока sensebuf и его смещение&lt;/span&gt;
            &lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t_spti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SenseInfoOffset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SCSI_PASS_THROUGH_DIRECT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DWORD&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t_spti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TimeOutValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;span class="c1"&gt;// таймаут ожидания окончания операции&lt;/span&gt;
            &lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t_spti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataTransferLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// длина данных для обмена&lt;/span&gt;
            &lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t_spti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataBuffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vbuf&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;span class="c1"&gt;// указатель на буфер данных&lt;/span&gt;
            &lt;span class="c1"&gt;// собственно CDB (блок описания команды):&lt;/span&gt;
            &lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t_spti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cdb&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x12&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// код команды INQUIRY&lt;/span&gt;
            &lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t_spti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cdb&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x24&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// 36 - размер данных&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DeviceIoControl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                        &lt;span class="n"&gt;hDevice&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                        &lt;span class="c1"&gt;// дескриптор устройства&lt;/span&gt;
                        &lt;span class="n"&gt;IOCTL_SCSI_PASS_THROUGH_DIRECT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// dwIoControlCode управляющий код операции - интерфейс для отправки CDB&lt;/span&gt;
                        &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                        &lt;span class="c1"&gt;// входной буфер&lt;/span&gt;
                        &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scsi_st&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;                &lt;span class="c1"&gt;// его размер&lt;/span&gt;
                        &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                        &lt;span class="c1"&gt;// выходной буфер&lt;/span&gt;
                        &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scsi_st&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;                &lt;span class="c1"&gt;// его размер&lt;/span&gt;
                        &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;returned&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;                      &lt;span class="c1"&gt;// сколько данных передано (надо бы сверить)&lt;/span&gt;
                        &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;                        &lt;span class="c1"&gt;// указатель на OVERLAPPED, не нужно.&lt;/span&gt;

                &lt;span class="n"&gt;vbuf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                               &lt;span class="c1"&gt;// для удобства вывода в консоль&lt;/span&gt;
                &lt;span class="n"&gt;_tprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_T&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;PDT = %x&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;vbuf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;        &lt;span class="c1"&gt;// тип устройства SCSII&lt;/span&gt;
                &lt;span class="n"&gt;_tprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_T&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;RMB = %x&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vbuf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0x080&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// съемный/нет&lt;/span&gt;
                &lt;span class="n"&gt;_tprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_T&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ver. SPC = %x&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;vbuf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;   &lt;span class="c1"&gt;// версия SPC&lt;/span&gt;
                &lt;span class="n"&gt;_tprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_T&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;vendor = %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;vbuf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;    &lt;span class="c1"&gt;// строковое обозначение производителя&lt;/span&gt;
                &lt;span class="n"&gt;_tprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_T&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;product = %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;vbuf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;  &lt;span class="c1"&gt;// строковое обозначение продукта&lt;/span&gt;
                &lt;span class="n"&gt;_tprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_T&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ver = %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;vbuf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;      &lt;span class="c1"&gt;// строковое обозначение версии&lt;/span&gt;

                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;_tcscmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;vbuf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;_T&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;LUFA&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;       &lt;span class="c1"&gt;// поиск своего устройства&lt;/span&gt;
                    &lt;span class="n"&gt;_tprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_T&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;--- This is my device! ---&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="n"&gt;_tprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_T&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;                         &lt;span class="c1"&gt;// для удобочитаемости пустая строка&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Таким образом, посредством DeviceIoControl выдается SCSII-команда INQUIRY, которая требует вернуть структуру с данными об устройстве. Причем, собственно команда лежит в блоке описания команды CDB, который хотя и имеет размер (16 байтов, насколько я помню), но конкретно для INQUIRY нужны только два: в нулевом передается код команды INQUIRY и в четвертом &amp;mdash; размер принимаемых данных.&lt;/p&gt;
&lt;p&gt;Ответ на команду INQUIRY окажется в буфере &lt;code&gt;vbuf&lt;/code&gt; и имеет условно фиксированный размер, то есть, должна быть как минимум 36 байтов, хотя может быть и больше и содержать дополнительную информацию. Но обойдемся минимальной частью. Вот что можно оттуда извлечь:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;В младшем (нулевом) байте (в его младших пяти разрядах) хранится PDT &amp;mdash; PERIPHERAL DEVICE TYPE, тип устройства. 0 &amp;mdash; устройства прямого доступа (например, магнитные диски, флэшки тоже), 1 &amp;mdash; устройства последовательного доступа, типа стриммеров, 2 &amp;mdash; принтеры&amp;hellip; Много их. Вот, например, из обнаруженного, кроме 0, тип 5: CD-ROM.&lt;/li&gt;
&lt;li&gt;7 разряд первого байта указывает единицей на то, что устройство съемное.&lt;/li&gt;
&lt;li&gt;Второй байт хранит версию стандарта SPC, причем, 4 соответствует  SPC-2, а 5 &amp;mdash; SPC-3.&lt;/li&gt;
&lt;li&gt;В четвертом байте лежит длина дополнительных данных, тех, что за пределами 36 байтов. Причем, не просто так, а еще и вычисления какие-то требуются, но это неважно, потому что не нужно.&lt;/li&gt;
&lt;li&gt;С 8 по 15 байт занимает обозначение производителя VENDOR IDENTIFICATION.&lt;/li&gt;
&lt;li&gt;С 16 по 31 байт занимает обозначение изделия PRODUCT IDENTIFICATION.&lt;/li&gt;
&lt;li&gt;С 32 по 35 байт &amp;mdash; версия изделия PRODUCT REVISION LEVEL.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Остальное или не используется, или не интересно, потому что не нужно.&lt;/p&gt;
&lt;p&gt;Как видно, строки обозначения производителя, изделия и версии могут оканчиваться нулевым символом, а могут и нет, таким образом, для некоторых устройств можно прочитать всю строку оптом, попросив только указатель на массив символов, начиная с 8 байта, однако на других устройствах надо читать все отдельно, при этом, стоит тридцать шестой байт обнулить, а то мало ли что там будет валяться и может прилипнуть к строке версии изделия.&lt;/p&gt;
&lt;p&gt;Вот пример того, что вывел текущий код под Windows 7:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pDeviceInterfaceDetailData-&amp;gt;DevicePath: \\?\ide#cdromtsstcorp_cddvdw_sh-224bb________________sb00____#5&amp;amp;135419d0&amp;amp;0&amp;amp;1.0.0#{53f5630d-b6bf-11d0-94f2-00a0c91efb8b}
CreateFile done! 
PDT = 5
RMB = 1
ver. SPC = 0
vendor = TSSTcorpCDDVDW SH-224BB SB00
product = CDDVDW SH-224BB SB00
ver = SB00

pDeviceInterfaceDetailData-&amp;gt;DevicePath: \\?\storage#volume#_??_usbstor#disk&amp;amp;ven_generic&amp;amp;prod_flash_disk&amp;amp;rev_8.07#15e1289b&amp;amp;0#{53f56307-b6bf-11d0-94f2-00a0c91efb8b}#{53f5630d-b6bf-11d0-94f2-00a0c91efb8b}
CreateFile done! 
PDT = 0
RMB = 1
ver. SPC = 4
vendor = Generic Flash Disk      8.07
product = Flash Disk      8.07
ver = 8.07

pDeviceInterfaceDetailData-&amp;gt;DevicePath: \\?\storage#volume#_??_usbstor#disk&amp;amp;ven_lufa&amp;amp;prod_dataflash_disk&amp;amp;rev_0.00#955373038393518170f0&amp;amp;0#{53f56307-b6bf-11d0-94f2-00a0c91efb8b}#{53f5630d-b6bf-11d0-94f2-00a0c91efb8b}
CreateFile done! 
PDT = 0
RMB = 1
ver. SPC = 0
vendor = LUFA
product = Dataflash Disk
ver = 0.00
--- This is my device! ---
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Получилась работоспособная версия, которая находит нужную плату среди подключенных устройств. Это будет коммит с тегом v0.2.&lt;/p&gt;
&lt;p&gt;Теперь пссле строчки &lt;code&gt;_tprintf(_T("--- This is my device! ---\n"));&lt;/code&gt; можно добавлять код, работающий с макетной платой. Добавлю для начала попытку записи и чтения. А так как ReadFile &amp;mdash; функция довольно сложная, выполняющая не только собственно чтение, полагаю, она не заработает. Поэтому сделаю опять через DeviceIoControl:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;                    &lt;span class="c1"&gt;// ----- работа с устройством -----&lt;/span&gt;
                    &lt;span class="n"&gt;BOOL&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;UCHAR&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;512&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                    &lt;span class="n"&gt;DWORD&lt;/span&gt; &lt;span class="n"&gt;q1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;q2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;q1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;512&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                    &lt;span class="n"&gt;ZeroMemory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scsi_st&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

                    &lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t_spti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SCSI_PASS_THROUGH_DIRECT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t_spti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PathId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t_spti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TargetId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t_spti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Lun&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t_spti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CdbLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t_spti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataIn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SCSI_IOCTL_DATA_OUT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t_spti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SenseInfoLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t_spti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataTransferLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;q1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t_spti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TimeOutValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t_spti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataBuffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t_spti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SenseInfoOffset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SCSI_PASS_THROUGH_DIRECT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DWORD&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t_spti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cdb&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x2a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//SCSIOP_WRITE;&lt;/span&gt;

                    &lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t_spti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cdb&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x00&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t_spti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cdb&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x00&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t_spti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cdb&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x00&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t_spti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cdb&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x00&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                    &lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t_spti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cdb&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x00&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t_spti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cdb&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x02&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                    &lt;span class="n"&gt;ULONG&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scsi_st&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DeviceIoControl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hDevice&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;IOCTL_SCSI_PASS_THROUGH_DIRECT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;q2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;OutFormatMsg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Write Error DevIoCtl&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;_tprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Write done&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                        &lt;span class="n"&gt;_tprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;len = %lu&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;q2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;

                    &lt;span class="n"&gt;q2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t_spti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SCSI_PASS_THROUGH_DIRECT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t_spti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PathId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t_spti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TargetId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t_spti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Lun&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t_spti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CdbLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t_spti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataIn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SCSI_IOCTL_DATA_IN&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t_spti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SenseInfoLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t_spti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataTransferLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;q1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t_spti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TimeOutValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t_spti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataBuffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t_spti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SenseInfoOffset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SCSI_PASS_THROUGH_DIRECT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DWORD&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                    &lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t_spti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cdb&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x28&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//SCSIOP_READ;&lt;/span&gt;

                    &lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t_spti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cdb&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x00&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t_spti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cdb&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x00&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t_spti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cdb&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x00&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t_spti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cdb&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x00&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                    &lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t_spti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cdb&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x00&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t_spti&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Cdb&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x02&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DeviceIoControl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hDevice&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;IOCTL_SCSI_PASS_THROUGH_DIRECT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;q1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;myspti&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;q1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;q2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;OutFormatMsg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Read Error DevIoCtl&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;_tprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;data_2 = %x&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
                        &lt;span class="n"&gt;_tprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;len = %lu&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;q2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="c1"&gt;// --------------------------------&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Нулевой байт CDB, как обычно, код команды; первый байт поделен на поля, но в них все равно должны быть везде нули; в байтах со второго по пятый для команд записи и чтения передается logical block assress &amp;mdash; логический адрес первого блока данных на устройстве; шестой байт зарезервирован; в седьмом и восьмом байтах &amp;mdash; размер посылки в логических блоках, старшим вперед. Пока неважно, что в этих адресах, все равно обмен еще не сможет сработать.&lt;/p&gt;
&lt;p&gt;В q будет буфер, q1 и q2 &amp;mdash; размер данных и количество реально переданых.&lt;/p&gt;
&lt;p&gt;DeviceIoControl выполняется без ошибок (в Windows XP), но читается в первом байте буфера единица, которая была туда записана в коде, то есть, операция чтения не перезаписала ее. Да и длина данных почему-то равна 80. То есть, обмен не работает. Этого и следовало ожидать, потому что код платы его еще не поддерживает. Я даже немного удивлен, что ошибок не возникло.&lt;/p&gt;
&lt;p&gt;Впрочем, при проверке в Windows 7 запись не работает:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Write Error DevIoCtl: Неверная функция.


data_2 = 1
len = 80
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Пора коммитить код и переходить к реализации обмена со стороны контроллера.&lt;/p&gt;</summary><category term="usb-polygon"></category></entry><entry><title>USB-polygon-5: Обмен по USB, поиск устройства</title><link href="http://romeogolf.github.io/usb-polygon-5.html" rel="alternate"></link><updated>2016-12-27T20:00:00+05:00</updated><author><name>RomeoGolf</name></author><id>tag:romeogolf.github.io,2016-12-27:usb-polygon-5.html</id><summary type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;Подготовка&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;Заготовка проекта&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;Начинаем искать&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;Запуск и отладка&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;Коротко о коде&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;Подготовка&lt;/h2&gt;
&lt;p&gt;На текущий момент самодельная отладочная плата на контроллере AT90USB162 при подключении к ПК определяется в Windows, как USB MassStorage-устройство, попросту &amp;mdash; флэшка, и даже получает букву диска. Надо каким-то образом начинать обмен реальными данными, не только служебными. Зажечь нужные светодиоды по команде с компьютера, получить на экране число нажатий кнопки на устройстве, что-нибудь подобное для начала.&lt;/p&gt;
&lt;p&gt;Можно попробовать заставить плату прикинуться &amp;laquo;настоящим&amp;raquo; устройством с файлами и читать-писать эти &amp;laquo;файлы&amp;raquo; средствами операционной системы. Но это я отложу на попозже. Сперва попробую обмен с физическим устройством, а не с файлами на нем.&lt;/p&gt;
&lt;p&gt;Для этого сперва надо подготовить инструмент. Придется писать некоторый код для компьютера. Остановлюсь пока на Windows по ряду причин. Основная причина среди них &amp;mdash; у меня уже есть под рукой кое-какая заготовка, в которой можно подглядеть идеи. Эта заготовка мне не очень нравится, но работает, и на нее можно опираться.&lt;/p&gt;
&lt;p&gt;Упомянутая заготовка написана на С++. Опять же, придется использовать API-функции операционной системы, что проще всего делать также на С++: в MSDN расписаны параметры функций и есть примеры, и ориентировано все на С++, а для, скажем, Delphi (или Lazarus) придется переписывать. Полагаю, и примеры на всякого рода форумах тоже проще будет найти на том же С++. А я уже давно на нем ничего приличного не писал, и версию от Microsoft ставить не желаю.&lt;/p&gt;
&lt;p&gt;Зато у меня уже есть Eclipse, который используется для Java (в том числе, под Android) и таких проектов на Python, которые сложнее пары скриптовых файлов. Буду в качестве среды разработки использовать его же.&lt;/p&gt;
&lt;p&gt;Однако, Eclipse &amp;mdash; это только среда, сам по себе он не будет ничего компилировать. А в качестве компилятора традиционно (хотя и не обязательно) в связке с ним используется GCC. Для Windows этот компилятор (строго говоря &amp;mdash; семейство компиляторов) сам по себе (по крайней мере, пока что) не бывает, а появляется в составе линуксообразного окружения, MinGW или Cygwin. Причем, Cygwin у меня уже имеется, и используется в том числе при работе с этой самоделкой &amp;mdash; выбор и настройка инструментария описана в одном из предыдущих &lt;a href="http://romeogolf.github.io/usb-polygon-3.html"&gt;выпусков&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Сделал пробный проектик под С++ и начал как-то с ним упражняться. Угрохал на это дело изрядно времени. Эх, стоило пошагово описывать все подводные камни на этом пути, нехилая лоция бы могла получиться&amp;hellip; Короче, при всем моем уважении к этим продуктам (Eclipse и GCC), настройка их (особенно под Windows) &amp;mdash; это замечательный способ провести долгие зимние вечера, если больше нечем их занять.&lt;/p&gt;
&lt;p&gt;Темная тема оформления редактора кода не влияет на тему оформления остальных окон и панелей Eclipse, за них отвечает оконный менеджер, либо надо менять руками отдельно множество строк в конфигурации в разных местах и записывать при этом, что на что менял. Подтянуть настройки, сделанные в рабочем пространстве Java, для рабочего пространства С++ у меня так и не получилось. В настройках проекта надо не забывать добавлять опцию статической линковки некоторых библиотек, иначе не заработает на другой машине. Да и на этой же, впрочем, тоже. Надо не забывать указывать про с++11, чтобы иметь возможность использовать современные фишки языка. И все это и тому подобное вылезало достаточно внезапно и с недостаточно очевидными причинами, просто не знаю, что бы я делал без &lt;a href="http://stackoverflow.com/"&gt;StackOverflow&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Наконец, что-то как-то заработало, стали получаться простые консольные приложения. В процессе выяснилось, что GCC в Cygwin и в MinGW имеют заметные отличия &amp;mdash; бинарники библиотек отличаются, заголовочные файлы к этим библиотекам тоже. При попытке компиляции примеров, слизанных с форумов и сделанных в MS Visual Studio, компилятор из MinGW вызывал меньше проблем, так что пришлось устанавливать еще и этот набор софта.&lt;/p&gt;
&lt;p&gt;Итак, для написания кода на ПК буду использовать ОС Windows (XP и 7), Eclipse, GCC из состава MinGW. Все это было постепенно установлено и худо-бедно настроено. Не так, чтобы работать было комфортно, но вполне удовлетворительно, а чисто визуальные примочки (типа стилей подсветки синтаксиса или темной цветовой темы) прикручу как-нибудь позже, если будет лишнее время и желание.&lt;/p&gt;
&lt;p&gt;Дальше предполагаю такую последовательность действий:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Обнаружить подключенные USB-устройства. Как вариант &amp;mdash; сузить поиск до MassStorage-устройств. Поначалу плата-самоделка даже не нужна, хотя что-то типа флэшки желательно подключить. Сойдет и вмонтированный в корпус системника кардридер, который тоже USB-устройство.&lt;/li&gt;
&lt;li&gt;Среди подключенных устройств найти свое по какому-либо идентификатору. Тут уже плату надо подключить, но можно ничего в ней не модифицировать.&lt;/li&gt;
&lt;li&gt;Открыть это устройство для обмена. То есть, получить его дескриптор, который можно передать функциям Readfile/Writefile. Здесь тоже плата нужна.&lt;/li&gt;
&lt;li&gt;Выполнить обмен без ошибок. Вот на этом этапе скорее всего придется что-то править в программе контроллера отладочной платы.&lt;/li&gt;
&lt;li&gt;Использовать результаты обмена: считать состояние кнопок, зажечь определенные светодиоды. Тут дописывать программу контроллера придется однозначно, без вариантов.&lt;/li&gt;
&lt;li&gt;В процессе решать возникающие проблемы, обеспечивать совместимость хотя бы в двух версиях Windows.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_2"&gt;Заготовка проекта&lt;/h2&gt;
&lt;p&gt;Запускаю Eclipse, создаю новый проект: &lt;code&gt;File -&amp;gt; New -&amp;gt; C++ Project&lt;/code&gt;, получаю заготовку исходного кода, выдающего в консоли сакраментальное &amp;laquo;Hello, World!&amp;raquo;. &lt;/p&gt;
&lt;p&gt;&lt;a href="http://romeogolf.github.io/images/usb-polygon/05/new-prj-cpp.png" title="New Project"&gt;&lt;img alt="new-prj" src="http://romeogolf.github.io/images/usb-polygon/05/preview/new-prj-cpp-small.png" title="New Project" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Сразу лезу в настройки проекта, потому что уже в курсе, что собранный код не запустится. &lt;code&gt;Project -&amp;gt; Properties&lt;/code&gt;, и в окне &lt;code&gt;Properties for usb-polygon&lt;/code&gt; в правой панели выбираю &lt;code&gt;C/C++ Build -&amp;gt; Settings&lt;/code&gt;, на вкладке &lt;code&gt;Tool Settings&lt;/code&gt; выбираю &lt;code&gt;MinGW C++ Linker -&amp;gt; Miscellaneous&lt;/code&gt; и в поле &lt;code&gt;Linker flags&lt;/code&gt; вписываю &lt;code&gt;-static-libgcc -static-libstdc++&lt;/code&gt;, иначе придется соответствующие библиотеки таскать вместе с проектом. Предпочитаю прилинковать статически.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://romeogolf.github.io/images/usb-polygon/05/linker-flag.png" title="Подключение библиотек"&gt;&lt;img alt="linker-flag" src="http://romeogolf.github.io/images/usb-polygon/05/preview/linker-flag-small.png" title="Подключение библиотек" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Заодно на этой же вкладке выбираю &lt;code&gt;GCC C++ Compiler -&amp;gt; Dialect&lt;/code&gt;, и в поле &lt;code&gt;Language standard&lt;/code&gt; ставлю &lt;code&gt;ISO C++11 (-srd=c++0x)&lt;/code&gt;, пригодится.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://romeogolf.github.io/images/usb-polygon/05/dialect.png"&gt;&lt;img alt="dialect" src="http://romeogolf.github.io/images/usb-polygon/05/preview/dialect-small.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Теперь можно и &lt;code&gt;Project -&amp;gt; Build Project&lt;/code&gt;, и &lt;code&gt;Run As -&amp;gt; Local C/C++ Application&lt;/code&gt;, и в консоли, представленной одним из окошек среды Eclipse, появится то, что просили в тринадцатой строчке автоматически сгенерированного кода, то есть, &amp;laquo;!!!Hello, word!!!&amp;raquo;.&lt;/p&gt;
&lt;p&gt;Создаю в папке проекта git-репозиторий и сохраняю это все в виде начального коммита.&lt;/p&gt;
&lt;h2 id="_3"&gt;Начинаем искать&lt;/h2&gt;
&lt;p&gt;Перед тем, как искать устройства USB, подключенные к компьютеру, стоит поискать в интернете, как это делают другие. Вариантов довольно много. Я порылся в форумах, нашел несколько работоспособных решений, остановился на одном, на фундаменте которого начал строить дальше. Код и небольшое обсуждение было обнаружено здесь: &lt;a href="http://programmersforum.ru/showthread.php?t=151603"&gt;CyberForum.ru&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;И вот код, который я взял за основу:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;windows.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;Setupapi.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;tchar.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;OutFormatMsg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;TCHAR&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Msg&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="n"&gt;LPVOID&lt;/span&gt; &lt;span class="n"&gt;lpMsgBuf&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;FormatMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FORMAT_MESSAGE_ALLOCATE_BUFFER&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="n"&gt;FORMAT_MESSAGE_FROM_SYSTEM&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="n"&gt;FORMAT_MESSAGE_IGNORE_INSERTS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;GetLastError&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;MAKELANGID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LANG_NEUTRAL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SUBLANG_DEFAULT&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TCHAR&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;lpMsgBuf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nb"&gt;NULL&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;_tprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_T&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%s: %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;Msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TCHAR&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;lpMsgBuf&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;LocalFree&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lpMsgBuf&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cp"&gt;#define LocalFreeIf(Pointer) if(Pointer) { LocalFree(Pointer); Pointer = NULL; }&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;setlocale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;PSP_DEVICE_INTERFACE_DETAIL_DATA&lt;/span&gt; &lt;span class="n"&gt;pDeviceInterfaceDetailData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;SP_DEVICE_INTERFACE_DATA&lt;/span&gt; &lt;span class="n"&gt;DeviceInterfaceData&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;SP_DEVINFO_DATA&lt;/span&gt; &lt;span class="n"&gt;DeviceInfoData&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;HDEVINFO&lt;/span&gt; &lt;span class="n"&gt;hDevInfo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;TCHAR&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;lpBuffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;GUID&lt;/span&gt; &lt;span class="n"&gt;InterfaceGuid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="mh"&gt;0x53F56307&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0xB6BF&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0x11D0&lt;/span&gt;&lt;span class="p"&gt;,{&lt;/span&gt;&lt;span class="mh"&gt;0x94&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0xF2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0x00&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0xA0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0xC9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0x1E&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0xFB&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0x8B&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="n"&gt;hDevInfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SetupDiGetClassDevs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;InterfaceGuid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;DIGCF_PRESENT&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;DIGCF_DEVICEINTERFACE&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hDevInfo&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;INVALID_HANDLE_VALUE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;OutFormatMsg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_T&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;SetupDiGetClassDevs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;DeviceInfoData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cbSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SP_DEVINFO_DATA&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;DeviceInterfaceData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cbSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SP_DEVICE_INTERFACE_DATA&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DWORD&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;SetupDiEnumDeviceInterfaces&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hDevInfo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;InterfaceGuid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;DeviceInterfaceData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ULONG&lt;/span&gt; &lt;span class="n"&gt;RequiredLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;SetupDiGetDeviceInterfaceDetail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;hDevInfo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
            &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;DeviceInterfaceData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pDeviceInterfaceDetailData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RequiredLength&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;RequiredLength&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;DeviceInfoData&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;GetLastError&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;ERROR_INSUFFICIENT_BUFFER&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;LocalFreeIf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;pDeviceInterfaceDetailData&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;pDeviceInterfaceDetailData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PSP_DEVICE_INTERFACE_DETAIL_DATA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;LocalAlloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LMEM_FIXED&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RequiredLength&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;pDeviceInterfaceDetailData&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;cbSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SP_DEVICE_INTERFACE_DETAIL_DATA&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;OutFormatMsg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_T&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;SetupDiGetDeviceInterfaceDetail&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;RequiredLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;SetupDiGetDeviceRegistryProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hDevInfo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
            &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;DeviceInfoData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SPDRP_ENUMERATOR_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PBYTE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;lpBuffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RequiredLength&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;RequiredLength&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GetLastError&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;ERROR_INSUFFICIENT_BUFFER&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;LocalFreeIf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lpBuffer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;lpBuffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TCHAR&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;LocalAlloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LPTR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RequiredLength&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TCHAR&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;OutFormatMsg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_T&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;SetupDiGetDeviceRegistryProperty&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;_tcscmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lpBuffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_T&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;USBSTOR&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// Точно USB накопитель...&lt;/span&gt;
            &lt;span class="n"&gt;_tprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_T&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;pDeviceInterfaceDetailData&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;DevicePath&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="cm"&gt;/* \\?\usbstor#disk&amp;amp;ven_generic&amp;amp;prod_usb_flash_disk&amp;amp;rev_0.00#000000000000ec&amp;amp;0#{53f56307-b6bf-11d0-94f2-00a0c91efb8b} */&lt;/span&gt;

            &lt;span class="n"&gt;RequiredLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;SetupDiGetDeviceRegistryProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hDevInfo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;DeviceInfoData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SPDRP_FRIENDLYNAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PBYTE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;lpBuffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RequiredLength&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;RequiredLength&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GetLastError&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;ERROR_INSUFFICIENT_BUFFER&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;LocalFreeIf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lpBuffer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="n"&gt;lpBuffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TCHAR&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;LocalAlloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LPTR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RequiredLength&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TCHAR&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;OutFormatMsg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_T&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;SetupDiGetDeviceRegistryProperty2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="n"&gt;_tprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_T&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;lpBuffer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;LocalFreeIf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lpBuffer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;LocalFreeIf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pDeviceInterfaceDetailData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;SetupDiDestroyDeviceInfoList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hDevInfo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_4"&gt;Запуск и отладка&lt;/h2&gt;
&lt;p&gt;Теперь надо заставить этот код заработать в Eclipse.&lt;/p&gt;
&lt;p&gt;В файле &lt;code&gt;usb-polygon.cpp&lt;/code&gt; убираю автоматически созданный код и вставляю код из форума. Куча красных подчеркиваний. Сохраняю файл. Куча красного исчезает, но Eclipse начинает показывать свой норов: подчеркивает красным &lt;code&gt;_tprintf&lt;/code&gt; (&amp;laquo;Function &amp;lsquo;printf&amp;rsquo; could not be resolved&amp;raquo;), хотя &lt;code&gt;tchar.h&lt;/code&gt; подключен. Подключаю дополнительно &lt;code&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/code&gt;, и Eclipse перестает считать, что это &amp;laquo;not resolved&amp;raquo;. Убираю это подключение &amp;mdash; &lt;code&gt;_tprintf&lt;/code&gt; не подчеркивается. Чудеса&amp;hellip; Ладно, оставляю на всякий случай.&lt;/p&gt;
&lt;p&gt;Теперь надо разобраться с функциями SetupDi&amp;hellip;, которые считаются неопределенными. Дело в библиотеке SetupAPI, точнее, в ее отсутствии в проекте. Надо добавить в свойства проекта: &lt;code&gt;Project -&amp;gt; Properties&lt;/code&gt;, в окне свойств в левой панели выбрать &lt;code&gt;C/C++ Build -&amp;gt; Settings&lt;/code&gt;, и на вкладке &lt;code&gt;Tool Settings&lt;/code&gt; выбрать &lt;code&gt;MinGW C++ Linker -&amp;gt; Libraries&lt;/code&gt;, для &lt;code&gt;Library search path (-L)&lt;/code&gt; выбрать в файловой системе &lt;code&gt;C:\MinGW\lib&lt;/code&gt;,  а для &lt;code&gt;Libraries (-l)&lt;/code&gt; ввести руками &lt;code&gt;setupapi&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Пересобираю проект. Компиляция проходит успешно. Запускаю &amp;mdash; в консоли чисто. Вставляю флэшку, запускаю проект еще раз, получаю (в Windows XP) что-то типа&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;\\?\usbstor#disk&amp;amp;ven_kingston&amp;amp;prod_dt_101_ii&amp;amp;rev_1.00#001cc05fe930f961715b0183&amp;amp;0#{53f56307-b6bf-11d0-94f2-00a0c91efb8b}
Kingston DT 101 II USB Device
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Пробую воткнуть свою плату и снова запустить программу, в консоли вижу следующее:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;\\?\usbstor#disk&amp;amp;ven_lufa&amp;amp;prod_dataflash_disk&amp;amp;rev_0.00#955373038393518170f0&amp;amp;0#{53f56307-b6bf-11d0-94f2-00a0c91efb8b}
LUFA Dataflash Disk USB Device
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Надо сказать, в Windows 7 результат получается такой же, вот только ждать, когда система выделит плате букву диска, приходится долго, да еще и надо каждый раз отказываться от форматирования.&lt;/p&gt;
&lt;p&gt;Ну что же, нашли. И код нашли подходящий, и флешку с его помощью тоже нашли, и даже плату свою. Замечательно, начало положено, надо сохранить наработки в git.&lt;/p&gt;
&lt;h2 id="_5"&gt;Коротко о коде&lt;/h2&gt;
&lt;p&gt;Как говорил Козьма Прутков, &amp;laquo;Бросая в воду камешки, смотри на круги, ими образуемые; иначе такое бросание будет пустою забавою&amp;raquo;.&lt;/p&gt;
&lt;p&gt;Тупо использовать чужой код &amp;mdash; это очень нехорошо, надо хотя бы разобраться, как он работает. Это не трудно, с учетом того, что предварительно был проведен поиск по MSDN и разного рода литературе и форумам на тему решения задачи. Например, &lt;a href="https://msdn.microsoft.com/ru-ru/library/windows/hardware/ff545011(v=vs.85).aspx"&gt;Guidelines for Using SetupAPI&lt;/a&gt;, опять же, &lt;a href="https://msdn.microsoft.com/library/windows/hardware/ff553567"&gt;Using Device Installation Functions&lt;/a&gt;. Я уже и сам подходил к подобному решению, но медленно и некрасиво.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;OutFormatMsg&lt;/code&gt; &amp;mdash; вспомогательная функция для форматированного вывода сообщений об ошибках, если они возникнут.&lt;/p&gt;
&lt;p&gt;В теле функции &lt;code&gt;main&lt;/code&gt; сперва встречаем &lt;code&gt;SetupDiGetClassDevs&lt;/code&gt; &amp;mdash; это функция, возвращающая дескриптор (&lt;code&gt;hDevInfo&lt;/code&gt;) набора данных обо всех устройствах указанного класса device setup class или device interface class. Этот Device Information Set &amp;mdash; довольно сложная структура, подробно описанная в MSDN, даже с картинкой.&lt;/p&gt;
&lt;p&gt;Класс задается своим глобально уникальным идентификатором &lt;code&gt;InterfaceGuid&lt;/code&gt;, который определен чуть выше по коду. Это &lt;code&gt;GUID_DEVINTERFACE_DISK&lt;/code&gt;, идентификатор дисковых устройств, но можно попробовать еще &lt;code&gt;GUID_DEVINTERFACE_VOLUME&lt;/code&gt;, равный &lt;code&gt;{ 0x53f5630dL, 0xb6bf, 0x11d0, {0x94, 0xf2, 0x00, 0xa0, 0xc9, 0x1e, 0xfb, 0x8b} }&lt;/code&gt; и соответствующий томам накопителей.&lt;/p&gt;
&lt;p&gt;Далее, &lt;code&gt;SetupDiEnumDeviceInterfaces&lt;/code&gt; позволяет перебрать все имеющиеся устройства интересующего класса. Эта функция последовательно (в цикле) выдает информацию в структуре SP_DEVICE_INTERFACE_DATA, и возвращает TRUE до тех пор, пока не закончатся соответствующие устройства.&lt;/p&gt;
&lt;p&gt;Чтобы из полученной структуры вытащить детальную информацию об устройстве, используется функция &lt;code&gt;SetupDiGetDeviceInterfaceDetail&lt;/code&gt;, возвращающая структуру &lt;code&gt;SP_DEVICE_INTERFACE_DETAIL_DATA&lt;/code&gt;, в которой хранится, собственно, только &lt;code&gt;DevicePath&lt;/code&gt; &amp;mdash; нуль-терминированная строка, содержащая device interface path, который можно передать в качестве параметра для &lt;code&gt;CreateFile&lt;/code&gt;. Вот только работает эта функция довольно ректально: сначала ее нужно вызвать и получить ошибку, зато узнать, сколько места понадобится под упомянутую структуру с деталями, потом вызвать еще раз с полученным размером, чтобы получить саму структуру ради упомянутой строки.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SetupDiGetDeviceRegistryProperty&lt;/code&gt; поищет в системном реестре и вернет  заданные в параметрах свойства (в нашем случае &lt;code&gt;SPDRP_ENUMERATOR_NAME&lt;/code&gt;, то есть имя перечислителя) для указанного устройства. Вызывается тоже через одно место, дважды, первый раз для получения размера.&lt;/p&gt;
&lt;p&gt;Далее перечислитель сверяется на наличие подстроки &lt;code&gt;&amp;lt;&amp;lt;USBSTOR&amp;gt;&amp;gt;&lt;/code&gt;, чтобы убедиться, что это именно что-то флэшкообразное. Перечислитель (enumerator) &amp;mdash; системный компонент, связанный с однотипными PnP-устройствами. Насколько я понял, именно он отвечает за то, какой драйвер будет вызван для работы с определенным устройством.&lt;/p&gt;
&lt;p&gt;Если в процессе последовательного перебора мы (ну, не совсем мы &amp;mdash; система&amp;hellip;) наткнулись на флэшку (&lt;code&gt;USBSTOR&lt;/code&gt;), то сначала выдадим с помощью &lt;code&gt;_tprintf&lt;/code&gt; ее DevicePath.&lt;/p&gt;
&lt;p&gt;Потом еще разок (ну, то есть пару раз) вызовем &lt;code&gt;SetupDiGetDeviceRegistryProperty&lt;/code&gt;, но попросим другое свойство &amp;mdash; &lt;code&gt;SPDRP_FRIENDLYNAME&lt;/code&gt;, то есть строку с удобочитаемым именем устройства &amp;mdash; и выдадим второй строкой его.&lt;/p&gt;
&lt;p&gt;Под конец приберемся за собой: подчистим выделенную память: как строковую (макросом &lt;code&gt;LocalFreeIf&lt;/code&gt;), так и выделенную под информацию об устройствах (функцией &lt;code&gt;SetupDiDestroyDeviceInfoList&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Пока что так, расширять буду позже.&lt;/p&gt;</summary><category term="usb-polygon"></category></entry><entry><title>Итоги первого года</title><link href="http://romeogolf.github.io/first-year.html" rel="alternate"></link><updated>2016-11-23T17:00:00+05:00</updated><author><name>RomeoGolf</name></author><id>tag:romeogolf.github.io,2016-11-23:first-year.html</id><summary type="html">&lt;p&gt;Итак, подходит к завершению первый год существования данного сайта. Надеюсь, не последний. Пора подводить итоги.&lt;/p&gt;
&lt;p&gt;Гостей было не особенно много, в день от двух до десятка, изредка до тридцати с лишним. В почте ни одного письма, в комментариях одна-единственная благодарность, за которую я сам очень благодарен ее автору, потому что приятно знать, что опубликованное мною хоть кому-то пригодилось или, по крайней мере, понравилось.&lt;/p&gt;
&lt;p&gt;Проект, мягко говоря, ни разу не коммерческий (по крайней мере, до сих пор), а тратить на хобби килорублей за продление домена совершенно не хочется. Прежде всего потому, что лишних килорублей просто нет. Поэтому скоро (с начала января) сайт будет доступен по адресу &lt;a href="http://romeogolf.github.io/"&gt;http://romeogolf.github.io/&lt;/a&gt;. Точнее, он и сейчас там доступен (с перенаправлением), но скоро будет только там. Ежели кто планирует заходить сюда в будущем повторно &amp;mdash; милости прошу.&lt;/p&gt;
&lt;p&gt;Закрывать это дело пока не собираюсь. У меня не закончен цикл про макетную плату на контроллере AT90USB162, а хотелось бы, и это еще программа-минимум. Темы есть, было бы время.&lt;/p&gt;
&lt;p&gt;Спасибо всем, кто меня читает.&lt;/p&gt;</summary><category term="разное"></category></entry><entry><title>USB-polygon-4: Обмен по USB, начало</title><link href="http://romeogolf.github.io/usb-polygon-4.html" rel="alternate"></link><updated>2016-09-27T20:00:00+05:00</updated><author><name>RomeoGolf</name></author><id>tag:romeogolf.github.io,2016-09-27:usb-polygon-4.html</id><summary type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;Выбор класса устройства&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;Выбор библиотеки&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;Подготовка&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;&amp;laquo;&amp;hellip; доработать напильником&amp;raquo;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;Маленькое расширение программы&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;Что дальше?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;Выбор класса устройства&lt;/h2&gt;
&lt;p&gt;Продолжаю разговор про самодельную отладочную плату на контроллере AT90USB162.&lt;/p&gt;
&lt;p&gt;В примененном контроллере есть возможность подключения к компьютеру по USB. Прежде чем использовать эту возможность, нужно определиться с классом устройства. Операционная система будет общаться с устройством посредством драйверов и выбирать соответствующий драйвер в зависимости от класса. Так что же выбрать?&lt;/p&gt;
&lt;p&gt;В той же &lt;a href="https://en.wikipedia.org/wiki/USB#PHDC"&gt;Википедии&lt;/a&gt; насчитывается порядка двух десятков классов USB-устройств. Для сделанной отладочной платы можно сразу исключить узкоспецифичные, например, Audio, Video, Image, Printer и прочее подобное, а также Wireless Controller, поскольку к беспроводной связи этот макет не приспособлен совсем. Тогда выбор ограничивается такими классами:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;00 Unspesified&lt;/li&gt;
&lt;li&gt;02 Communication Device Class &amp;amp; 0A CDC-data&lt;/li&gt;
&lt;li&gt;03 Human Interface Device&lt;/li&gt;
&lt;li&gt;05 Physical Interface Device&lt;/li&gt;
&lt;li&gt;08 MassStorage Device Class&lt;/li&gt;
&lt;li&gt;DC Diagnostic Device&lt;/li&gt;
&lt;li&gt;EF Miscellaneous&lt;/li&gt;
&lt;li&gt;FE Application-specific&lt;/li&gt;
&lt;li&gt;FF Vendor-specific&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Классы Unspesified, Application-specific, Vendor-specific, Miscellaneous страшновато даже рассматривать. Явно придется делать много работы вручную &amp;mdash; писать кучу кода для устройства, наверняка писать драйвер для операционной системы. Хотелось бы для начала что-то попроще.&lt;/p&gt;
&lt;p&gt;Про Diagnostic Device и Physical Interface Device не нашел информации. То есть, составить представление, что это за штуки такие &amp;mdash; можно, а как это сделать самому, да попроще &amp;mdash; не нашел.&lt;/p&gt;
&lt;p&gt;CDC &amp;mdash; вроде бы неплохой класс, предназначенный для передачи приличных объемов информации в обоих направлениях. И теоретически эту информацию можно использовать не только таким способом, какой предполагает класс устройства, то есть, не только для преобразования в другие виды интерфейсов (типа COM), но и для управления самим устройством и даже для хранения на устройстве. Но все же этот класс тоже достаточно специфичен и узконаправлен. Не понравился он мне.&lt;/p&gt;
&lt;p&gt;HID &amp;mdash; ничего себе штучка для реализации устройства с небольшими объемами и скоростями циркулирующей информации. В Windows работа с ним довольно проста благодаря встроенным драйверам. Я даже попробовал как-то сделать простенькую макетку на AT89C5131 по книге Агурова. Все оказалось довольно просто, где-то за неделю (занимаясь вечерами) устройство заработало. Однако у этого класса есть несколько минусов, которые мне сильно не понравились. Во-первых, хотя драйвер такому устройству не нужен, все же нужен INF-файл. То есть, воткнуть в любой компьютер, чтобы сразу заработало, не получится. Во-вторых, скорости обмена весьма дохленькие. Для моргания светодиодиком &amp;mdash; более чем достаточно, но я еще не знаю, во что выльется мой макет. Есть предположение, что в инструмент для настройки и отладки другого прибора с передачей приличных объемов информации, с записью промежуточных результатов работы в файл с последующим считыванием и все такое. Кроме того, после беглого обзора по форумам у меня сложилось впечатление, что в Linux работа с HID далеко не так проста, как в Windows, а как с этим делом в Android, я вообще не понял.&lt;/p&gt;
&lt;p&gt;MassStorage Device &amp;mdash; на первый взгляд самое оно. Рассчитано на большие объемы информации, удовлетворительные скорости, в современных ОС не требует драйверов для установки. Да что там, современных &amp;mdash; где-то с Windows Me уже не требует. Тоже, конечно, не без недостатков. Во-первых, обмен может вестись только по инициативе хост-устройства, то есть, компьютера. Во-вторых, не мешало бы реализовать файловую систему, даже если она не нужна вовсе. Хотя, можно и обойтись, но придется заниматься костылевелосипедостроением. Опять же, строить файловую систему там, где она не нужна &amp;mdash; тоже велосипедокостыли те еще. И в-третьих, забегая вперед, уже после реализации этого класса был обнаружен неприятный факт: работа с MassStorage кэшируется ОС, и изменения на устройстве, видимые под видом файлов, системой игнорируются, так как данные читаются один раз ив дальнейшем берутся не из устройства, а из кэша. Это, конечно, можно объехать на кривой козе, но придется что-то писать вручную, а что именно &amp;mdash; я пока не знаю.&lt;/p&gt;
&lt;p&gt;Есть еще казалось бы заманчивый вариант: MTP, Media Transfer Protocol. Активно используется современными смартфонами на Android. Вроде бы позволяет и обновившиеся данные в файлах перечитывать, и потоковые данные передавать/забирать. Вот только беглый обзор реализации на устройстве немного пугает, а поддержка в ОС огорчает: мне, к сожалению, надо еще пользоваться местами Windows XP, а я не смог по-человечески подключить к ней свой смартфон с четвертым андроидом. В семерке &amp;mdash; вопросов нет, в восьмом Debian &amp;mdash; тоже, но мне-то и XP надо. Опять же, вопрос &amp;mdash; можно ли подключить MTP-устройство к, скажем, планшету с Android? Пока не знаю, а MassStorage &amp;mdash; однозначно можно. Плюс к этому относительно невысокая скорость обмена большими объемами и разработчик &amp;mdash; Microsof, что настораживает.&lt;/p&gt;
&lt;p&gt;В общем, остановился на MassStorage Device, попросту говоря, флэшка.&lt;/p&gt;
&lt;h2 id="_2"&gt;Выбор библиотеки&lt;/h2&gt;
&lt;p&gt;Несколько лет назад, как я уже упоминал, попробовал сделать простую макетку на AT89C5131. Никаких библиотек не использовал, но тогда и выбора особого не было, и с HID-устройствами работать несколько проще, и я тогда предпочитал собственные велосипеды готовым решениям даже в ущерб простоте и скорости написания кода. Сегодня я сначала посмотрю, нельзя ли подтянуть что-то готовое. Конечно, не всегда использование библиотек является оптимальным, например, если огромный монстр имеет тучу возможностей, а надо только моргнуть диодиком, или наоборот, дохленький кусочек кода для своих целей еще пилить и пилить, так что проще сразу с нуля начать. Ну, посмотрим, что есть готового.&lt;/p&gt;
&lt;p&gt;Во-первых, конечно, родная атмеловская библиотека. В ней привлекает то, что она все же родная, под эти контроллеры заточенная, да еще и самим производителем. Документация опять же на сайте Atmel имеется, и на первый взгляд даже неплохая и с примерами.&lt;/p&gt;
&lt;p&gt;Во-вторых, одна из самых популярных (по встречаемости на форумах и в результатах выдачи поисковиков) библиотека LUFA. Очень хорошие отзывы на форумах, широкий спектр применения, уже образовавшееся сообщество с возможностью найти ответы на возникающие вопросы, очень нетребовательная лицензя MIT (если вдруг макет перерастет во что-то значительное). Заточена под AVR-GCC, входящий в состав AVR-Toolchain, то есть, с чем я и так собирался работать.&lt;/p&gt;
&lt;p&gt;В-третьих, V-USB. Библиотека с обилием примеров применения, но ее основной фишкой является программная эмуляция USB для контроллеров, не имеющих аппаратной реализации, кроме того, с ее использованием в основном встречались HID-устройства. Впрочем, достаточно и того, что это программная эмуляция. Не нужно.&lt;/p&gt;
&lt;p&gt;В-четвертых, все прочие, типа Dr. Stefan Salewski&amp;rsquo;s AT90USB1287 Stack, PJRC Teensy Stack и все такое. Не очень популярные решения разного рода, имеющие крайне мало примеров, где можно было бы подсмотреть особенности практического применения. Не вижу причин использовать что-то из них, поскольку это именно тот случай, когда допиливать может оказаться не проще, чем собрать с нуля самому.&lt;/p&gt;
&lt;p&gt;Посмотрел бегло по диагонали документацию к USB-стеку Atmel и описание примеров. Потом заглянул на &lt;a href="http://www.fourwalledcubicle.com/LUFA.php"&gt;страничку LUFA&lt;/a&gt;, где ознакомился с кратким описанием, скачал библиотеку и документацию. И LUFA понравилась больше. Порылся немножко по форумам: там тоже решение от Atmel больше ругают, чем хвалят, а LUFA &amp;mdash; наоборот. Ладно, выбираю LUFA.&lt;/p&gt;
&lt;h2 id="_3"&gt;Подготовка&lt;/h2&gt;
&lt;p&gt;На упомянутой чуть выше страничке LUFA скачал саму библиотеку и документацию к ней. В архиве с библиотекой есть папка &lt;code&gt;LUFA&lt;/code&gt; &amp;mdash; собственно, библиотека, и папка &lt;code&gt;DEMOS&lt;/code&gt; &amp;mdash; это не &amp;laquo;народ&amp;raquo; по-гречески, это примеры применения. Примеры замечательные и на самые разные случаи жизни, для устройств, хостов и приборов, которые способны и на то, и на другое. В папке &lt;code&gt;lufa-LUFA-151115\Demos\Device\LowLevel\&lt;/code&gt; можно найти и аудиоустройство, и мышь с клавиатурой, и HID, но, самое главное, там есть MassStorage. &lt;/p&gt;
&lt;p&gt;Делаю отдельную папку для проекта, скажем, &lt;code&gt;lufa-test&lt;/code&gt;, и копирую в нее упомянутые &lt;code&gt;LUFA&lt;/code&gt; и &lt;code&gt;MassStorage&lt;/code&gt;. Разумеется, библиотеку можно не копировать, на то она и библиотека, но мало ли&amp;hellip; Вдруг захочется поковыряться немного в ее исходниках, так чтоб не запороть оригинал. А уж в &lt;code&gt;MassStorage&lt;/code&gt; буду ковыряться по полной программе, для того и копирую. Это будет основная папка проекта для макета.&lt;/p&gt;
&lt;p&gt;Там уже лежит Makefile, значит, можно попробовать запустить &lt;code&gt;make&lt;/code&gt;, но не просто так, а в предварительно настроенном cygwin (о выборе и настройке компилятора &amp;mdash; в предыдущем &lt;a href="http://romeogolf.github.io/usb-polygon-3.html"&gt;выпуске&lt;/a&gt; цикла). Сперва захожу в соответствующую папку:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /cygdrive/k/radio/asm/lufa-test/MassStorage/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;и командую &lt;code&gt;make&lt;/code&gt;. Получаю ответ:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;makefile:38: ../../../../LUFA/Build/lufa_atprogram.mk: No such file or directory
make: *** Нет правила для сборки цели «../../../../LUFA/Build/lufa_atprogram.mk».  Останов.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Что не удивительно. Надо было все-таки сначала открыть и отредактировать Makefile под свои нужды. Для начала надо найти в нем переменную &lt;code&gt;LUFA_PATH&lt;/code&gt; и оставить в ней только одну пару точек в пути: &lt;code&gt;../LUFA&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Вот теперь &lt;code&gt;make&lt;/code&gt; замечательно запускается, проект компилируется, в папке проекта создаются всякого рода файлы, которых не было. Даже появился MassStorage.hex, который можно прошить в устройство посредством FLIP. Вот только не стоит пока этого делать &amp;mdash; бесполезно. &lt;/p&gt;
&lt;p&gt;Первая же переменная в Makefile &amp;mdash; &lt;code&gt;MCU&lt;/code&gt; &amp;mdash; указывает на контроллер at90usb1287, а у меня at90usb162.
Третья переменная &amp;mdash; &lt;code&gt;BOARD&lt;/code&gt; &amp;mdash; указывает на какую-то отладочную плату. Не важно, какую, важно, что у меня &amp;mdash; никакая, в списках не значится. &lt;/p&gt;
&lt;p&gt;Однако, начало положено, есть какая-то заготовка.&lt;/p&gt;
&lt;h2 id="_4"&gt;&amp;laquo;&amp;hellip; доработать напильником&amp;raquo;&lt;/h2&gt;
&lt;p&gt;Начинаю подгонять заготовку под то, что имеется.&lt;/p&gt;
&lt;p&gt;Для начала заменяю в Makefile значение &lt;code&gt;MCU&lt;/code&gt; с &lt;code&gt;at90usb1287&lt;/code&gt; на &lt;code&gt;at90usb162&lt;/code&gt;, а значение &lt;code&gt;BOARD&lt;/code&gt; &amp;mdash; на &lt;code&gt;NONE&lt;/code&gt;, чищу результаты компиляции при помощи &lt;code&gt;make clean&lt;/code&gt; и снова запускаю &lt;code&gt;make&lt;/code&gt;. Компиляция сваливается с ошибкой. Да не с одной, а с целой кучей:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;... до сих пор более-менее нормально ...

Lib/DataflashManager.c: In &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;DataflashManager_WriteBlocks&amp;#39;&lt;/span&gt;:
Lib/DataflashManager.c:52:77: warning: division by zero &lt;span class="o"&gt;[&lt;/span&gt;-Wdiv-by-zero&lt;span class="o"&gt;]&lt;/span&gt;
  uint16_t &lt;span class="nv"&gt;CurrDFPage&lt;/span&gt;          &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE&lt;span class="o"&gt;)&lt;/span&gt; / D
ATAFLASH_PAGE_SIZE&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                                                                             ^
Lib/DataflashManager.c:53:77: warning: division by zero &lt;span class="o"&gt;[&lt;/span&gt;-Wdiv-by-zero&lt;span class="o"&gt;]&lt;/span&gt;
  uint16_t &lt;span class="nv"&gt;CurrDFPageByte&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE&lt;span class="o"&gt;)&lt;/span&gt; % D
ATAFLASH_PAGE_SIZE&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                                                                             ^
Lib/DataflashManager.c:68:21: error: &lt;span class="s1"&gt;&amp;#39;DF_CMD_BUFF1WRITE&amp;#39;&lt;/span&gt; undeclared &lt;span class="o"&gt;(&lt;/span&gt;first use i
n this &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  Dataflash_SendByte&lt;span class="o"&gt;(&lt;/span&gt;DF_CMD_BUFF1WRITE&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                     ^
Lib/DataflashManager.c:68:21: note: each undeclared identifier is reported only 
once &lt;span class="k"&gt;for&lt;/span&gt; each &lt;span class="k"&gt;function&lt;/span&gt; it appears in
Lib/DataflashManager.c:98:44: error: &lt;span class="s1"&gt;&amp;#39;DF_CMD_BUFF2TOMAINMEMWITHERASE&amp;#39;&lt;/span&gt; undeclared
 &lt;span class="o"&gt;(&lt;/span&gt;first use in this &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
     Dataflash_SendByte&lt;span class="o"&gt;(&lt;/span&gt;UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_
CMD_BUFF1TOMAINMEMWITHERASE&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                                            ^
Lib/DataflashManager.c:98:77: error: &lt;span class="s1"&gt;&amp;#39;DF_CMD_BUFF1TOMAINMEMWITHERASE&amp;#39;&lt;/span&gt; undeclared
 &lt;span class="o"&gt;(&lt;/span&gt;first use in this &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
     Dataflash_SendByte&lt;span class="o"&gt;(&lt;/span&gt;UsingSecondBuffer ? DF_CMD_BUFF2TOMAINMEMWITHERASE : DF_
CMD_BUFF1TOMAINMEMWITHERASE&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                                                                             ^
In file included from ../LUFA/../LUFA/Drivers/USB/USB.h:382:0,
                 from Lib/../Descriptors.h:40,
                 from Lib/../MassStorage.h:45,
                 from Lib/DataflashManager.h:42,
                 from Lib/DataflashManager.c:40:
../LUFA/../LUFA/Drivers/Board/Dataflash.h:141:60: error: &lt;span class="s1"&gt;&amp;#39;DATAFLASH_CHIP0&amp;#39;&lt;/span&gt; undec
lared &lt;span class="o"&gt;(&lt;/span&gt;first use in this &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;#define DATAFLASH_CHIP_MASK(index)      CONCAT_EXPANDED(DATAFLASH_CHIP, inde&lt;/span&gt;
x&lt;span class="o"&gt;)&lt;/span&gt;
                                                            ^
../LUFA/../LUFA/Drivers/USB/../../Common/Common.h:210:37: note: in definition of
 macro &lt;span class="s1"&gt;&amp;#39;CONCAT&amp;#39;&lt;/span&gt;
     &lt;span class="c"&gt;#define CONCAT(x, y)            x ## y&lt;/span&gt;
                                     ^
... и тому подобное ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;И при беглом просмотре похоже на то, что все ошибки связаны с DataflashManager, модулем, расположенным тут же в папке &lt;code&gt;Lib&lt;/code&gt;. Модуль явно отвечает за управление флэш-памятью, это видно даже из названия, но написано и внутри в Doxygen-комментарии. А у меня на плате флэш нету и в ближайшем будущем не ожидается. Попробую тупо вырезать это дело: убираю в Makefile из значения переменной &lt;code&gt;SRC&lt;/code&gt; запись &amp;laquo;&lt;code&gt;Lib/DataflashManager.c&lt;/code&gt;&amp;raquo;, в h-файлах закрываю &amp;laquo;&lt;code&gt;include "DataflashManager.h"&lt;/code&gt;&amp;raquo;, в MassStorage.c и SCSI.c нахожу и закрываю (символами комментария) все строки с функциями, начинающимися с &lt;code&gt;Dataflash&lt;/code&gt;. Причем, естественно, не только сами строки, но всю содержащую конструкцию, типа &lt;code&gt;if&lt;/code&gt;, скажем.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;make
 &lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt;    : Begin compilation of project &lt;span class="s2"&gt;&amp;quot;MassStorage&amp;quot;&lt;/span&gt;...

avr-gcc.exe &lt;span class="o"&gt;(&lt;/span&gt;AVR_8_bit_GNU_Toolchain_3.5.2_1680&lt;span class="o"&gt;)&lt;/span&gt; 4.9.2
Copyright &lt;span class="o"&gt;(&lt;/span&gt;C&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="m"&gt;2014&lt;/span&gt; Free Software Foundation, Inc.
This is free software&lt;span class="p"&gt;;&lt;/span&gt; see the &lt;span class="nb"&gt;source &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; copying conditions.  There is NO
warranty&lt;span class="p"&gt;;&lt;/span&gt; not even &lt;span class="k"&gt;for&lt;/span&gt; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

 &lt;span class="o"&gt;[&lt;/span&gt;GCC&lt;span class="o"&gt;]&lt;/span&gt;     : Compiling C file &lt;span class="s2"&gt;&amp;quot;SCSI.c&amp;quot;&lt;/span&gt;
avr-gcc -c -pipe -gdwarf-2 -g2 -mmcu&lt;span class="o"&gt;=&lt;/span&gt;at90usb162 -fshort-enums -fno-inline-small-
functions -fpack-struct -Wall -fno-strict-aliasing -funsigned-char -funsigned-bi
tfields -ffunction-sections -I. -I../LUFA/.. -DARCH&lt;span class="o"&gt;=&lt;/span&gt;ARCH_AVR8 -DBOARD&lt;span class="o"&gt;=&lt;/span&gt;BOARD_NONE
-DF_USB&lt;span class="o"&gt;=&lt;/span&gt;8000000UL -DF_CPU&lt;span class="o"&gt;=&lt;/span&gt;8000000UL -mrelax -fno-jump-tables -x c -Os -std&lt;span class="o"&gt;=&lt;/span&gt;gnu9 
&lt;span class="m"&gt;9&lt;/span&gt; -Wstrict-prototypes -DUSE_LUFA_CONFIG_HEADER -IConfig/  -MMD -MP -MF Lib/SCSI.
d Lib/SCSI.c -o Lib/SCSI.o
Lib/SCSI.c: In &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;SCSI_Command_Read_Capacity_10&amp;#39;&lt;/span&gt;:
Lib/SCSI.c:216:23: error: &lt;span class="s1"&gt;&amp;#39;LUN_MEDIA_BLOCKS&amp;#39;&lt;/span&gt; undeclared &lt;span class="o"&gt;(&lt;/span&gt;first use in this funct
ion&lt;span class="o"&gt;)&lt;/span&gt;
  Endpoint_Write_32_BE&lt;span class="o"&gt;(&lt;/span&gt;LUN_MEDIA_BLOCKS - 1&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                       ^
Lib/SCSI.c:216:23: note: each undeclared identifier is reported only once &lt;span class="k"&gt;for&lt;/span&gt; ea
ch &lt;span class="k"&gt;function&lt;/span&gt; it appears in
Lib/SCSI.c:219:23: error: &lt;span class="s1"&gt;&amp;#39;VIRTUAL_MEMORY_BLOCK_SIZE&amp;#39;&lt;/span&gt; undeclared &lt;span class="o"&gt;(&lt;/span&gt;first use in t
his &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  Endpoint_Write_32_BE&lt;span class="o"&gt;(&lt;/span&gt;VIRTUAL_MEMORY_BLOCK_SIZE&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                       ^
Lib/SCSI.c: In &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;SCSI_Command_ReadWrite_10&amp;#39;&lt;/span&gt;:
Lib/SCSI.c:298:22: error: &lt;span class="s1"&gt;&amp;#39;LUN_MEDIA_BLOCKS&amp;#39;&lt;/span&gt; undeclared &lt;span class="o"&gt;(&lt;/span&gt;first use in this funct
ion&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;BlockAddress &amp;gt;&lt;span class="o"&gt;=&lt;/span&gt; LUN_MEDIA_BLOCKS&lt;span class="o"&gt;)&lt;/span&gt;
                      ^
Lib/SCSI.c:320:62: error: &lt;span class="s1"&gt;&amp;#39;VIRTUAL_MEMORY_BLOCK_SIZE&amp;#39;&lt;/span&gt; undeclared &lt;span class="o"&gt;(&lt;/span&gt;first use in t
his &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  CommandBlock.DataTransferLength -&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;uint32_t&lt;span class="o"&gt;)&lt;/span&gt;TotalBlocks * VIRTUAL_MEMORY_BLO
CK_SIZE&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                                                              ^
make: *** &lt;span class="o"&gt;[&lt;/span&gt;../LUFA/Build/lufa_build.mk:295: Lib/SCSI.o&lt;span class="o"&gt;]&lt;/span&gt; Ошибка 1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;После компиляции стало чуть получше, то есть, ошибок поменьше, но &amp;laquo;чуть&amp;raquo; не считается, потому что все равно не компилируется. А это потому, что теперь неизвестны константы, объявленные в DataflashManager. Ладно, &lt;code&gt;include&lt;/code&gt; возвращаю. Функции из этого модуля закрыты, компиляции модуль тоже не подлежит, но нужное из него возьмем.&lt;/p&gt;
&lt;p&gt;Чищу результаты неудачной компиляции, запускаю &lt;code&gt;make&lt;/code&gt; &amp;mdash; Ура! Откомпилировано!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;... много-премного букв ...

avr-size --mcu&lt;span class="o"&gt;=&lt;/span&gt;at90usb162 --format&lt;span class="o"&gt;=&lt;/span&gt;avr MassStorage.elf
AVR Memory Usage
----------------
Device: at90usb162

Program:    &lt;span class="m"&gt;4054&lt;/span&gt; bytes &lt;span class="o"&gt;(&lt;/span&gt;24.7% Full&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.text + .data + .bootloader&lt;span class="o"&gt;)&lt;/span&gt;

Data:        &lt;span class="m"&gt;113&lt;/span&gt; bytes &lt;span class="o"&gt;(&lt;/span&gt;22.1% Full&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;.data + .bss + .noinit&lt;span class="o"&gt;)&lt;/span&gt;


 &lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt;    : Finished building project &lt;span class="s2"&gt;&amp;quot;MassStorage&amp;quot;&lt;/span&gt;.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Запускаю FLIP. Не забываю на подключенной плате нажать Reset, не отпуская, нажать HWB, отпустить Reset, отпустить HWB. После чего в окне FLIP подключаюсь к плате, загружаю hex-файл и жму Run. Прошивка загружается. &lt;/p&gt;
&lt;p&gt;Теперь плата отображается в Windows XP и в семерке в виде флэшки &amp;laquo;LUFA Dataflash Disk USB Device&amp;raquo;, ему выделяется буква диска, можно посмотреть свойства. Он пустой, без файловой системы, и Windows 7 все порывается при подключении его отформатировать.&lt;/p&gt;
&lt;p&gt;&lt;img alt="new-dew-lufa" src="http://romeogolf.github.io/images/usb-polygon/04/new-dev-lufa.png" title="New device LUFA" /&gt; 
&lt;a href="http://romeogolf.github.io/images/usb-polygon/04/lufa-pref.png" title="LUFA preference"&gt;&lt;img alt="lufa-pref" src="http://romeogolf.github.io/images/usb-polygon/04/preview/lufa-pref-small.png" title="LUFA preference" /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;И в диспетчере устройств плата прописалась аж в трех местах (на примере Windows XP): &amp;laquo;Дисковые устройства&amp;raquo;, &amp;laquo;Контроллеры универсальной последовательной шины USB&amp;raquo; и &amp;laquo;Тома запоминающих устройств&amp;raquo;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://romeogolf.github.io/images/usb-polygon/04/dev-man-lufa.png" title="LUFA preference"&gt;&lt;img alt="dev-man-lufa" src="http://romeogolf.github.io/images/usb-polygon/04/preview/dev-man-lufa-small.png" title="LUFA preference" /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;h2 id="_5"&gt;Маленькое расширение программы&lt;/h2&gt;
&lt;p&gt;Теперь компьютер думает, что моя плата пусть хреновенькая, но все-таки флэшка. Однако, кроме как создавать видимость флэшки, плата больше ничего пока не может. А у нее ведь есть светодиодики и кнопки! Зря, что ли?&lt;/p&gt;
&lt;p&gt;И вообще смешно получается &amp;mdash; взял готовый пример и только выкидывал из него лишнее. Надо же что-то и добавить!&lt;/p&gt;
&lt;p&gt;Открываю основной файл проекта &amp;mdash; MassStorage.c. Ага, а в нем еще есть что убрать. Закрываю все строки с функциями, начинающимися на &amp;laquo;LEDs&amp;raquo;, потому что у меня хоть и есть светодиоды, но совсем не такие и не там. Кстати, заодно в MassStorage.h закрываю &amp;laquo;&lt;code&gt;include &amp;lt;LUFA/Drivers/Board/LEDs.h&amp;gt;&lt;/code&gt;&amp;raquo;, &amp;laquo;&lt;code&gt;include &amp;lt;LUFA/Drivers/Board/Dataflash.h&amp;gt;&lt;/code&gt;&amp;raquo; и &amp;laquo;&lt;code&gt;include &amp;lt;LUFA/Platform/Platform.h&amp;gt;&lt;/code&gt;&amp;raquo;, потому что у меня несколько не тот BOARD, что предполагался в демонстрационном примере.&lt;/p&gt;
&lt;p&gt;Но вернмся к основному сишному файлу. Главная функция, как очевидно следует из названия, &lt;code&gt;main&lt;/code&gt;. В ней все, что идет перед началом бесконечного цикла &amp;mdash; инициализация всякого рода сущностей, от программных переменных до аппаратных регистров. В самом цикле &lt;code&gt;for (;;)&lt;/code&gt; будет крутиться то, что нам собственно и надо. Сейчас там вертится обработка событий USB, не требующая вот-прям-щаз-реакции, то, что не надо делать в прерываниях.&lt;/p&gt;
&lt;p&gt;Инициализирую порты: порт D, на котором у меня светодиоды, и порт C, на котором кнопки. После имеющейся в заготовке строчки &lt;code&gt;GlobalInterruptEnable();&lt;/code&gt; пишу:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;PORTD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x00&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// начальное значение - все нули&lt;/span&gt;
    &lt;span class="n"&gt;DDRD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0xFF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     &lt;span class="c1"&gt;// все линии порта на вывод&lt;/span&gt;
    &lt;span class="n"&gt;PORTC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x00&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// без &amp;quot;подтяжки&amp;quot; (есть внешняя)&lt;/span&gt;
    &lt;span class="n"&gt;DDRC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x00&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     &lt;span class="c1"&gt;// все линии порта на ввод&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;И объявляю переменные:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;cnt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;span class="c1"&gt;// тупо счетчик&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;cnt_bt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     &lt;span class="c1"&gt;// счетчик нажатий на кнопки&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;mode_out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="c1"&gt;// режим вывода&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;bt_now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     &lt;span class="c1"&gt;// состояние кнопок&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;bt_old&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     &lt;span class="c1"&gt;// состояние кнопок в прошлый раз&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Дальше в цикле &lt;code&gt;for (;;)&lt;/code&gt; после строчки &lt;code&gt;USB_USBTask();&lt;/code&gt; можно писать всякую отсебятину:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;        &lt;span class="n"&gt;cnt&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                              &lt;span class="c1"&gt;// инкремент счетчика - чтобы что-то изменялось&lt;/span&gt;
        &lt;span class="n"&gt;bt_now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PINC&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                      &lt;span class="c1"&gt;// считывание порта с кнопками&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bt_now&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;bt_old&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;             &lt;span class="c1"&gt;// если состояние порта изменилось&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;bt_now&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0x30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;     &lt;span class="c1"&gt;// если нажаты сразу две верхние кнопки на разрядах 3 и 4&lt;/span&gt;
            &lt;span class="n"&gt;mode_out&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                 &lt;span class="c1"&gt;// циклически изменить режим отображения,&lt;/span&gt;
            &lt;span class="n"&gt;mode_out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mode_out&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// которых всего 4 - 0, 1, 2 и 3 (2 разряда по маске)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;                        &lt;span class="c1"&gt;// в противном случае&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;bt_now&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0x10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;cnt_bt&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;  &lt;span class="c1"&gt;// верхняя кнопка увеличивает счет нажатий&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;bt_now&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0x20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;cnt_bt&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;  &lt;span class="c1"&gt;// а вторая сверху - уменьшает&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;bt_old&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bt_now&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                &lt;span class="c1"&gt;// и сохраняем состояние порта для следующей проверки&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;А дальше вывожу в порт D, то есть, на светодиоды, некоторые данные в зависимости от режима:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;        &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mode_out&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; 
            &lt;span class="n"&gt;PORTD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cnt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     &lt;span class="c1"&gt;// просто счетчик&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; 
            &lt;span class="n"&gt;PORTD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bt_now&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// состояние кнопок&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;PORTD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cnt_bt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// счетчик нажатий&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;PORTD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x55&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// просто константа&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Теперь если я нажму на две верхние кнопки одновременно, то могу переключать выводимые данные:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;В режиме счетчика светодиоды горят все. Потому что счетчик на такой частоте успевает прокручиваться с таким темпом обновления, что глазом уследить за морганием светодиода практически нереально.&lt;/li&gt;
&lt;li&gt;В режиме состояния кнопок горят светодиоды, соответствующие ненажатой кнопке, потому что нажатые кнопки замыкают подтянутый вывод на корпус.&lt;/li&gt;
&lt;li&gt;В режиме счетчика нажатий верхняя кнопка увеличивает значение, выдаваемое на светодиодах, а вторая сверху кнопка &amp;mdash; уменьшает.&lt;/li&gt;
&lt;li&gt;В режиме константы светодиоды горят через один, что соответствует шестнадцатиричной константе 0x55.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;При попытке переключения режимов, а также в режиме счетчика нажатий наглядно видна проблема дребезга контактов. Режимы скачут хаотично, счетчик изменяется не на еденицу, и на на какое-то фиксированное число, а тоже как хочет. В моем случае одна кнопка дребезжала настолько выразительно, что дребезг был заметен даже в режиме отображения текущего состояния. Это было, конечно, прикольно и наглядно, но настолько кошмарно, что я эту кнопку перепаял.&lt;/p&gt;
&lt;p&gt;Самое простое, что можно здесь сделать &amp;mdash; это добавить задержку после конструкции &lt;code&gt;switch&lt;/code&gt;, например, вставить библиотечную функцию &lt;code&gt;_delay_ms(100);&lt;/code&gt;. Для того, чтобы оно заработала, надо не забыть добавить &lt;code&gt;include &amp;lt;util/delay.h&amp;gt;&lt;/code&gt; после &lt;code&gt;#include "MassStorage.h"&lt;/code&gt;. Теперь после компиляции и светодиоды в режиме счетчика перемигиваются с частотой 0,1 с, и на кнопки реакция более-менее нормальная, даже немного заторможенная: если нажимать быстро, некоторые нажатия могут пропуститься. &lt;/p&gt;
&lt;p&gt;Но некрасиво это. И главный цикл тормозить так грубо &amp;mdash; очень плохо, и функция-задержка реализована так себе&amp;hellip; В общем, пришло время попробовать таймеры.&lt;/p&gt;
&lt;p&gt;Убираю &lt;code&gt;_delay_ms()&lt;/code&gt;. Закрываю &lt;code&gt;cnt++;&lt;/code&gt;. После объявления переменных вставляю запуск таймеров:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="cm"&gt;/* запуск таймера 0 на период ~0.01 с */&lt;/span&gt;
    &lt;span class="n"&gt;TCCR0B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;           &lt;span class="cm"&gt;/* 1 тик = 0.000032 с */&lt;/span&gt;
    &lt;span class="n"&gt;TCNT0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;            &lt;span class="cm"&gt;/* 256 раз ~ 0.008192 с */&lt;/span&gt;

    &lt;span class="cm"&gt;/* запуск таймера 1 на период 0.5 с */&lt;/span&gt;
    &lt;span class="n"&gt;TCCR1B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;TCNT1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;65536&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;15625&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;После &lt;code&gt;USB_USBTask();&lt;/code&gt; проверяю таймер 1, и если он сработал &amp;mdash; увеличиваю счетчик:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;        &lt;span class="cm"&gt;/* проверка срабатывания таймера без прерываний */&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;TIFR1&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;TCNT1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;65536&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;15625&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;TIFR1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;cnt&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;А всю остальную конструкцию &amp;mdash; от считывания порта с кнопками до отображения &amp;mdash; выполняем после проверки срабатывания таймера 0, для чего сразу после проверки таймера 1 вставляю следующее:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;TIFR0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;TCNT0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;TIFR0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;и после завершающей &lt;code&gt;switch&lt;/code&gt; фигурной скобки ставлю еще одну скобку, закрывающую эту проверку. Хорошо бы еще соответственно сдвинуть отступы в коде для красоты.&lt;/p&gt;
&lt;p&gt;Теперь светодиоды в режиме счетчика моргают с частотой в полсекунды. А с таймером 0 можно поиграться, устанавливая разные варианты &lt;code&gt;TCNT0&lt;/code&gt; и &lt;code&gt;TCCR0B&lt;/code&gt;, добиваясь такого времени опроса кнопок, чтобы и дребезг не влиял, и быстрые двойные щелчки по кнопке не пропускались. &lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Предупреждение&lt;/dt&gt;
&lt;dd&gt;Вообще-то говоря, приведенный код &amp;mdash; ни разу не пример для подражания. И разряды таким образом прописывать/маскировать нехорошо, и константы в коде числом задавать нездорово, и стиль оформления хромает. Но макет &amp;mdash; он и есть макет: и плата, и код. Я считаю позволительным для вещей, служащих лишь для проверки работоспособности, отступать от правил и стандартов в угоду быстроте. Тем более, что это не будет повторно использоваться или развиваться до чего-то приличного, а будет стерто и забыто.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Итак, из заготовки (в качестве которой служит демонстрационный пример библиотеки LUFA) сделан &amp;laquo;проект&amp;raquo;, который позволяет компьютеру увидеть в плате &amp;laquo;флэшку&amp;raquo;, и при этом делает еще какую-то, пусть и не очень полезную, работу. Полноценного обмена с компьютером еще нет, хотя какой-то &amp;mdash; служебными пакетами &amp;mdash; уже есть.&lt;/p&gt;
&lt;h2 id="_6"&gt;Что дальше?&lt;/h2&gt;
&lt;p&gt;Раз обмен по USB как-то завелся, надо организовать обмен данными между платой и компьютером, причем, пользовательскими данными, которые нужны мне, а не компьютеру. Вижу три направления:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Обмен &amp;laquo;сырыми&amp;raquo; данными с &amp;laquo;железом&amp;raquo;, пользуясь дескриптором устройства, с помощью собственной программы.&lt;/li&gt;
&lt;li&gt;Организация &amp;laquo;липовой&amp;raquo; файловой системы на устройстве и обмен средствами операционной системы &amp;mdash; посредством чтения/записи файлов, которых на самом деле нет, без написания программы для компьютере.&lt;/li&gt;
&lt;li&gt;Организация &amp;laquo;липовой&amp;raquo; файловой системы и обмен данными через ReadFile/WriteFile, но уже с дескрипторами несуществующих в реальности файлов, опять же с помощью собственной программы.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Забегая вперед, скажу, что первый вариант проще с точки зрения программы для устройства (она уже почти готова), но сложнее в плане написания программы для ПК. Кроме того, в нем нехорошо с кроссплатформенностью, есть проблемы даже при переносе с Windows XP на семерку, не говоря о Linux. Второй вариант хорош тем, что для ПК вообще писать не надо, но не получается перечитать обновленный файл (если данные изменились, пока устройство было подключено), потому что данные кешируются при первом же чтении. И похоже, что финишем будет вынужденный третий вариант, но посмотрим, что получится.&lt;/p&gt;</summary><category term="usb-polygon"></category></entry><entry><title>USB-polygon-3: Первое включение</title><link href="http://romeogolf.github.io/usb-polygon-3.html" rel="alternate"></link><updated>2016-08-23T20:00:00+05:00</updated><author><name>RomeoGolf</name></author><id>tag:romeogolf.github.io,2016-08-23:usb-polygon-3.html</id><summary type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;Включение и опознание&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;Проверка работоспособности платы&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_3"&gt;Компилятор для начала&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;Программа для проверки&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;Компиляция и первые вопросы&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;Выбор компилятора&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_7"&gt;Итог&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;Включение и опознание&lt;/h2&gt;
&lt;p&gt;Плата смонтирована и проверена &amp;laquo;на дым&amp;raquo;. Дым при включении не пошел, компьютер тоже не сгорел. Плата работает, правда, определяется как неизвестное устройство. &lt;/p&gt;
&lt;p&gt;&lt;a href="http://romeogolf.github.io/images/usb-polygon/03/unknown-device.png" title="Неизвестное устройство"&gt;&lt;img alt="unknown-device" src="http://romeogolf.github.io/images/usb-polygon/03/preview/unknown-device-small.png" title="Неизвестное устройство" /&gt;&lt;/a&gt; 
&lt;img alt="fault-device" src="http://romeogolf.github.io/images/usb-polygon/03/fault-device.png" title="Найдено новое оборудование" /&gt; &lt;/p&gt;
&lt;p&gt;Контроллер для платы выбирался специально с таким расчетом, чтобы программировать без программатора, непосредственно через USB-порт. Пришло время проверить, как устройство готово к этой процедуре. С сайта Atmel скачиваю программу &lt;a href="http://www.atmel.com/ru/ru/tools/flip.aspx"&gt;FLIP&lt;/a&gt;, устанавливаю ее. Для скачивания, правда, придется зарегистрироваться, но регистрация очень простая, никаких особенных данных не просят. Есть варианты для Windows (работает и в 7, и в ХР) и Linux (проверил в Debian). &lt;/p&gt;
&lt;p&gt;Если на компьютере с Windows не установлена виртуальная машина Java, то надо выбрать дистрибутив FLIP, в который включена JRE.&lt;/p&gt;
&lt;p&gt;После установки FLIP в Windows на запрос драйвера после подключения платы нужно указать его местоположение в районе C:\Program Files\Atmel\Flip 3.4.7\usb (для Windows XP):&lt;/p&gt;
&lt;p&gt;&lt;a href="http://romeogolf.github.io/images/usb-polygon/03/driver.png" title="Выбор драйвера"&gt;&lt;img alt="driver" src="http://romeogolf.github.io/images/usb-polygon/03/preview/driver-small.png" title="Выбор драйвера" /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;Теперь устройство (чистое и непрошитое) будет определяться системой:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://romeogolf.github.io/images/usb-polygon/03/device-manager.png" title="Диспетчер устройств"&gt;&lt;img alt="device-manager" src="http://romeogolf.github.io/images/usb-polygon/03/preview/device-manager-small.png" title="Диспетчер устройств" /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;И открываться в FLIP даже без нажатий на кнопку HWB на плате.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://romeogolf.github.io/images/usb-polygon/03/flip-not-active.png" title="FLIP неактивный"&gt;&lt;img alt="flip-grey" src="http://romeogolf.github.io/images/usb-polygon/03/preview/flip-not-active-small.png" title="FLIP неактивный" /&gt;&lt;/a&gt; 
&lt;img alt="flip-select" src="http://romeogolf.github.io/images/usb-polygon/03/flip-device-sel.png" title="FLIP - выбор устройства" /&gt; 
&lt;a href="http://romeogolf.github.io/images/usb-polygon/03/flip-active.png" title="FLIP активный"&gt;&lt;img alt="flip-active" src="http://romeogolf.github.io/images/usb-polygon/03/preview/flip-active-small.png" title="FLIP активный" /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;И вот FLIP запущен, устройство подключено, обнаружено и открыто, хотелось бы что-то туда прошить. Но что?!&lt;/p&gt;
&lt;h2 id="_2"&gt;Проверка работоспособности платы&lt;/h2&gt;
&lt;h3 id="_3"&gt;Компилятор для начала&lt;/h3&gt;
&lt;p&gt;Готовых прошивок для моей платы нет, разумеется. Надо написать для начала что-то совсем примитивное, помигать светодиодами. Просто убедиться, что плата прошивается и включается. Пришла пора выбора инструмента. Желательно что-то простое, даже консольное. В идеале &amp;mdash; кроссплатформенное. Первое, что приходит в голову для AVR &amp;mdash; Atmel Studio, но в плане простоты это перебор, а в плане кроссплатформенности &amp;mdash; недобор.&lt;/p&gt;
&lt;p&gt;Неглубоко порывшись в интернетах, нашел упоминание о таком пакете, как &lt;a href="https://ru.wikipedia.org/wiki/WinAVR" title="WinAVR"&gt;WinAVR&lt;/a&gt;. Весит немного, устанавливается элементарно. Содержит в себе ряд утилит командной строки, обычно имеющихся в дистрибутивах Linux (cat, cmp, find, make, grep, gzip, less, sed и еще кое-что). Включает в себя и командную оболочку sh. Помимо компилятора имеется и подборка заголовочных файлов на разные случаи жизни, с мнемоникой для аппаратной составляющей разных контроллеров и с полезными функциями (типа crc16 или delay), которые можно использовать в своих проектах. В комплект входит еще и текстовый редактор Programmer`s notepad, который для небольших самоделок может вполне сойти за IDE, но я им не пользовался, попробовал только разик.&lt;/p&gt;
&lt;p&gt;Установил, настроил (в смысле, прописал в системной переменной PATH пути к папкам avr, bin и util\bin).&lt;/p&gt;
&lt;h3 id="_4"&gt;Программа для проверки&lt;/h3&gt;
&lt;p&gt;Написал примитивнейший код на С в файле test.c:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;avr/io.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;util/delay.h&amp;gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;PORTD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x00&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="cm"&gt;/* инициализация порта со светодиодами */&lt;/span&gt;
    &lt;span class="n"&gt;DDRD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0xFF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="cm"&gt;/* назначение порта на выход */&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;cnt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="cm"&gt;/* инициализация счетчика */&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;cnt&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;PORTD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cnt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;_delay_ms&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="cm"&gt;/* использование библиотечной функции задержки */&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Теперь его бы как-то подготовить для прошивки&amp;hellip; WinAVR рассчитан в первую очередь на работу с Makefile. И хотелось бы заготовку какую-нибудь, потому что стряпать этот файл самостоятельно, конечно, можно, но тогда надо вникать в работу компилятора хотя бы в общих чертах. А мне бы это попозже, мне бы светодиодиком моргнуть сначала&amp;hellip; &lt;/p&gt;
&lt;p&gt;Короче, нашел заготовку Makefile в книжке &amp;laquo;Программирование на языке С для AVR и PIC микроконтроллеров. Изд. 2-е, переработанное и дополненное&amp;raquo; Ю. А. Шпак, 2011. В этой книге кроме прочего в общих чертах описана работа с WinAVR, а в файлах на компакт-диске есть несколько проектов, заточенных именно под WinAVR, с Makefile в составе. Правда, позже обнаружил, что пример Makefile есть в составе WinAVR, в папке sample. А еще где-то там есть мастер создания Makefile, но с этим я уже не стал заморачиваться.&lt;/p&gt;
&lt;h3 id="_5"&gt;Компиляция и первые вопросы&lt;/h3&gt;
&lt;p&gt;Поправил Makefile под свои цели, то есть, MCU присвоил значение at90usb162, F_CPU = 8000000, TARGET = test. Запустил make, получил hex-файл. Ну, не только hex, там много чего появилось, но для FLIP мне нужен hex.&lt;/p&gt;
&lt;p&gt;Make запускал не заморачиваясь из файлового менеджера Unreal commander. Логичнее было бы использовать консольный, типа FAR, но этот был уже открыт. Для того, чтобы консольное окно не закрылось, отработав, команду make запускал с зажатой клавишей Shift. Получилось так:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://romeogolf.github.io/images/usb-polygon/03/winavr-make.png" title="Первая компиляция"&gt;&lt;img alt="winavr-make" src="http://romeogolf.github.io/images/usb-polygon/03/preview/winavr-make-small.png" title="Первая компиляция" /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;Выдача результата весьма информативна в плане человекочитаемости &amp;mdash; за это спасибо Makefile. Можно также запустить make clean, эта команда сотрет все, что наделал make:&lt;/p&gt;
&lt;p&gt;&lt;img alt="winavr-make-clean" src="http://romeogolf.github.io/images/usb-polygon/03/winavr-make-clean.png" title="Make clean" /&gt; &lt;/p&gt;
&lt;p&gt;А если запустить make вторично без clean, то получим такой вывод:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://romeogolf.github.io/images/usb-polygon/03/winavr-make-2.png" title="Вторая компиляция"&gt;&lt;img alt="winavr-make-2" src="http://romeogolf.github.io/images/usb-polygon/03/preview/winavr-make-2-small.png" title="Вторая компиляция" /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;Здесь видно, что компиляции никакой не делалось, потому что незачем, зато есть размер программы до компиляции и после, что позволит сравнить, скажем, занимаемую в кристалле память при внесении изменений в код программы.&lt;/p&gt;
&lt;p&gt;В программе FLIP открыл полученный hex, запустил прошивку кнопкой RUN. Кнопкой Start Application запустил выполнение. Получилась ерунда какая-то: светодиод PD0 моргает, остальные &amp;mdash; не горят. Нажал кнопку Reset, не помогло. Отключил плату от USB, включил снова &amp;mdash; ура, заработало! Пока не понял, в чем дело, может, по каким-то причинам контроллер сбрасывается. Предположил, что из-за сторожевого таймера.&lt;/p&gt;
&lt;p&gt;Про наличие сторожевого таймера в контроллере я в курсе, а как с ним работать &amp;mdash; пока нет. Думал, что он по умолчанию отключен, но пока не буду читать описание на эту тему, сделаю проще. Нашел готовый проект на основе такого контроллера и посмотрел, как этот таймер обездвижить, не вдаваясь в подробности. Добавил в программу &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;avr/wdt.h&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;и в самое начало функции main() еще три строчки:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="cm"&gt;/* Disable watchdog if enabled by bootloader/fuses */&lt;/span&gt;
    &lt;span class="n"&gt;MCUSR&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;=&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;WDRF&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;wdt_disable&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Помогло! Теперь счетчик стал моргать и после запуска программы кнопкой в окне FLIP, и кнопкой Reset на плате.&lt;/p&gt;
&lt;p&gt;Немножко побаловался, подключая и отключая плату по USB, понажимал кнопку Reset на плате, попробовал вводить в режим программирования комбинацией кнопок Reset и HWB. Покуражился и над программой &amp;mdash; накладывал на счетчик битовые маски, выводил фиксированные числа. Пока что все получается.&lt;/p&gt;
&lt;p&gt;Надо сказать, код еще маленький, а уже красотой не блещет. Работа со сторожевым таймером не отлажена и сделана без понимания, для задержки используется довольно корявая библиотечная функция, неоправданно кушающая ресурсы. Но я не заморачиваюсь пока что. Основную свою цель код выполняет &amp;mdash; работоспособность контроллера и платы проверена. А потом я не буду расширять возможности именно этой программы, а напишу более приличную или возьму чужую заготовку и переделаю под свои нужды. В любом случае, оттачивать эту времянку смысла нет.&lt;/p&gt;
&lt;h2 id="_6"&gt;Выбор компилятора&lt;/h2&gt;
&lt;p&gt;Можно продолжить работу, написать что-то более интересное. Но немного смущает тот факт, что у WinAVR последняя активность автора проекта проявлялась довольно давно. Если проект заброшен, то не хотелось бы начинать с его использования, так как если вдруг начнет получаться что-то более-менее серьезное, потом могут появиться проблемы при необходимости перевода на другой более современный и развитый инструмент компиляции и сборки.&lt;/p&gt;
&lt;p&gt;Кроме того, WinAVR &amp;mdash; это, все-таки, для Windows, поэтому надо как минимум найти аналог для Linux, точнее наоборот &amp;mdash; то в Linux, из чего сделали этот аналог (потому как основой является gcc и ряд линуксовых утилит). А еще лучше найти нечто кроссплатформенное, чтобы проекты (те же Makefile) можно было перемещать между системами без правок.&lt;/p&gt;
&lt;p&gt;Стал копать в этом направлении. Накопал, что автор WinAVR работает теперь в Atmel в этом же направлении, над компилятором, входящим в состав Atmel Studio, а также доступным отдельно в виде Atmel AVR Toolchain &lt;a href="http://www.atmel.com/tools/ATMELAVRTOOLCHAINFORWINDOWS.aspx" title="Atmel AVR Toolchain for Windows"&gt;for Windows&lt;/a&gt; и &lt;a href="http://www.atmel.com/tools/ATMELAVRTOOLCHAINFORLINUX.aspx" title="Atmel AVR Toolchain for Linux"&gt;for Linux&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Казалось бы, Atmel AVR Toolchain и WinAVR &amp;mdash; это одно и то же, тем более, что от того же автора. Однако есть заметные отличия:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;В WinAVR входят утилиты для AVR и AVR32, а в Toolchain это разные комплекты;&lt;/li&gt;
&lt;li&gt;В Toolchain нет своего редактора, типа Programmer`s notepad, что само по себе не страшно, нормальных редакторов для написания кода навалом, предпочитаю VIM;&lt;/li&gt;
&lt;li&gt;В WinAVR есть папка sample, а в Toolchain только примеры, запрятанные в папке doc (которая есть и в WinAVR);&lt;/li&gt;
&lt;li&gt;Самое неприятное &amp;mdash; в Toolchain нет папки utils, в которой есть командная оболочка sh. Значит, придется еще поставить линуксообразную среду, типа cygwin или mingw.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Наверняка можно переделать Makefile таким образом, чтобы компиляция запускалась с использованием командной оболочки Windows. Однако так получилось, что cygwin у меня уже имеется, было нужно раньше по другим причинам. Опять же, Makefile пришлось бы делать разные для разных типов операционных систем.&lt;/p&gt;
&lt;p&gt;Cygwin, повторюсь, у меня установлен, причем, в довольно таки полной комплектации &amp;mdash; довольно много выбрано пунктов в основном разделе, разделах разработки и отладки, практически все системные утилиты и, конечно, vim. В подробности установки вдаваться не буду, это отдельная тема.&lt;/p&gt;
&lt;p&gt;Запустил терминал, добавил в настройках bash добавку к системной переменной PATH &amp;mdash; путь к Atmel AVR Toolchain:&lt;/p&gt;
&lt;p&gt;&lt;img alt="vim" src="http://romeogolf.github.io/images/usb-polygon/03/vim.png" title="vim ./.bashrc" /&gt; 
&lt;img alt="bashrc" src="http://romeogolf.github.io/images/usb-polygon/03/bashrc.png" title="bashrc" /&gt; &lt;/p&gt;
&lt;p&gt;Заодно добавил HISTCONTROL для удобства. Запустил для пробы make clean:&lt;/p&gt;
&lt;p&gt;&lt;img alt="cygwin-make-clean" src="http://romeogolf.github.io/images/usb-polygon/03/cygwin-make-clean.png" title="make clean in cygwin" /&gt; &lt;/p&gt;
&lt;p&gt;Ну, и для гарании &amp;mdash; make:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://romeogolf.github.io/images/usb-polygon/03/cygwin-make.png" title="make clean in cygwin"&gt;&lt;img alt="cygwin-make" src="http://romeogolf.github.io/images/usb-polygon/03/preview/cygwin-make-small.png" title="make clean in cygwin" /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;Как видно, результаты идентичные с WinAVR. При этом, не пришлось трогать Makefile, и проект работоспособен в разных вариантах Windows (при установленном cygwin) и в Linux. WinAVR можно удалять. Atmel AVR Toolchain при желании можно позднее прикрутить к какой-нибудь среде, или к Atmel Studio, или (для пущей кроссплатформенности) к Eclipse, но пока вполне достаточно консоли. Для навигации по файлам проекта &amp;mdash; любой файловый менеджер (у меня Unreal Commander), для написания/редактирования текста программ &amp;mdash; любой текстовый редактор (у меня GVIM for Windows) и для компиляции &amp;mdash; make в консоли cygwin. Пока что достаточно, а там видно будет.&lt;/p&gt;
&lt;h2 id="_7"&gt;Итог&lt;/h2&gt;
&lt;p&gt;Устройство работоспособно, определяется, прошивается, запускается и сбрасывается. Инструмент выбран и худо-бедно настроен.&lt;/p&gt;
&lt;p&gt;В общем, все заработало, и можно приступать к чему-то более интересному, чем моргание светодиодиком. По крайней мере, хотя бы управляемое моргание. А уж больше всего хочется связаться с компьютером по USB и передавать туда-сюда какие-нибудь пакеты каких-нибудь данных. Но это уже другая история.&lt;/p&gt;</summary><category term="usb-polygon"></category></entry><entry><title>USB-polygon-2: Схема и плата</title><link href="http://romeogolf.github.io/usb-polygon-2.html" rel="alternate"></link><updated>2016-08-12T20:00:00+05:00</updated><author><name>RomeoGolf</name></author><id>tag:romeogolf.github.io,2016-08-12:usb-polygon-2.html</id><summary type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;По амбарам, по сусекам&amp;hellip;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;Начинаю рисовать&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;Разводка&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_4"&gt;Изготовление&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_5"&gt;Заключение&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="_1"&gt;По амбарам, по сусекам&amp;hellip;&lt;/h2&gt;
&lt;p&gt;С элементной базой более-менее определился. Самое главное &amp;mdash; контроллер &amp;mdash; заказан AT90USB162 на AliExpress. Заодно там же заказан дешевенький энкодер &amp;mdash; побаловаться, но это потом. Штырьки для джамперов и сами перемычки сняты со старых материнских плат и прочей компьютерной техники. Кнопки от мышей, шнур USB &amp;mdash; тоже. Первоначально планировалось шнур к плате просто припаять, однако в запасах нашелся разъемчик mini-USB на плату, а также универсальный переходник для зарядки разного рода гаджетов, от которого был отрезан и разобран ответный разъем на кабель. Светодиоды тоже есть, снятые с каких-то плат, уже и не помню, откуда. &amp;laquo;Рассыпуху&amp;raquo; &amp;mdash; резисторы и конденсаторы &amp;mdash; решил брать для поверхностного монтажа, чтобы уменьшить размеры платы и поменьше сверлить. Эта мелочь тоже в основном демонтирована с других плат, материнских, винчестерных, флопповодных и прочего, только на 22 Ома пришлось искать. Среди горсти имеющихся кварцев нашелся и на 8 МГц, что радует, ибо пробежка по форумам показала, что с другими (кроме 8 и 16) есть проблемы при попытках программировать через FLIP.&lt;/p&gt;
&lt;p&gt;Стал выбирать инструмент для рисования и разводки схемы и платы. Перебрал несколько вариантов. Вообще-то, можно настолько простую схему нарисовать и карандашом, а плату вообще в чем угодно, от Sprint Layout до любого векторного редактора, но если уж задача учебная &amp;mdash; будем делать вид, что все по-взрослому, как бы серьезный проект. Поэтому хотелось бы выбрать что-то доступное, кроссплатформенное и достаточно серьезное с учетом возможных будущих действительно серьезных проектов.&lt;/p&gt;
&lt;p&gt;Остановился в конце концов на KiCAD. Он кроссплатформенный вполне, в чем я убедился, работая над проектом попеременно то в Windows XP, то в Windows 7, то в Debian Linux. Его возможностей за глаза достаточно для любительских целей. В нем можно и рисовать схему, и разводить плату. При разводке платы он проверяет правильность соединений и неподключенные контакты. И, наконец, он GNU GPL &amp;mdash; бери и пользуйся.&lt;/p&gt;
&lt;h2 id="_2"&gt;Начинаю рисовать&lt;/h2&gt;
&lt;p&gt;Питание развел в соответствии с атмеловским &lt;a href="http://www.atmel.com/ru/ru/Images/doc7707.pdf" title="Описание на AT90USB"&gt;описанием&lt;/a&gt; на контроллер, скомбинировав рисунки 7-1 и 7-2, поставил в нужном месте переключатель. То есть, беру +5 В от USB и, в зависимости от положения переключателя, либо питаю кристалл прямо от +5, либо подаю на встроенный преобразователь напряжения и питаю кристалл от +3,3 В. При рисовании схемы предусмотрел контакты для внешних устройств: +5 В, +3,3 В, текущее питание кристалла (в зависимости от положения переключателя) и корпус (хотя, по идее, корпус можно и так много откуда взять). Между +5 В и корпусом поставил традиционные две емкости, побольше и поменьше, а заодно воткнул светодиод для индикации подключенности питания, через токоограничивающий резистор, конечно.&lt;/p&gt;
&lt;p&gt;Кварц тоже воткнул в соответствии с официальной документацией, по рисунку 6-4. Конденсаторы нашел, кажется, на 20 пик. Кварц хотел взять на 12 МГц, один из заказанных в Китае, оставшихся от ремонта флэшки. Но, похоже, лучше всего будет поставить 8 МГц, чтобы избежать неприятностей при &amp;laquo;прошивке&amp;raquo; по USB.&lt;/p&gt;
&lt;p&gt;Подключил разъем mini-USB. Изначально хотел вывести просто контактные площадки, чтоб было куда подпаять шнурок, но подумал, что подпаять можно будет и к контактам, предусмотренным для разъема, а разъем (если вдруг захочется) на абы какие площадки не встанет.&lt;/p&gt;
&lt;p&gt;Нарисовал кнопку Reset, подтянутую к напряжению питания. Не к +5, что важно, а именно к текущему питанию, в зависимости от тумблера режима питания.&lt;/p&gt;
&lt;p&gt;Аналогичным образом подключил кнопку HWB, которая нужна для переключения контроллера в режим &amp;laquo;прошивки&amp;raquo; по USB. Но потом пришлось добавить еще один тумблер, переключающий направление с этого вывода к кнопке и к светодиоду. Так уж получилось, что HWB является одной из альтернативных функций порта D, а я хотел бы иметь возможность использовать весь этот порт, все восемь разрядов. На них я посадил по светодиоду (через токоограничивающие резисторы, конечно), анодом к порту, катодом на корпус. То есть, зажигаться они будут логической &amp;laquo;1&amp;raquo;. Линию, соединяющую резисторы этих светодиодов, я провел не прямо на корпус, а через джампер, чтобы иметь возможность отключить их оптом. Например, для того, чтобы попользоваться портом в других целях: каждая нитка порта идет не только на свой светодиод, но и на контактную площадку. Таким образом, можно к порту подпаять что-то внешнее, может, на ввод (типа энкодера), а может, и на вывод (типа экранчика).&lt;/p&gt;
&lt;p&gt;Порт B вывел на контактные площадки напрямую, без выкрутасов.&lt;/p&gt;
&lt;p&gt;Порт C не вполне полноценный. Разряд 1 занят на Reset, и играться с ним, переключая тумблером назначение, не хотелось бы. Разряд 0 занят на кварц, тут вообще не поиграешься. Разряд 3 вообще отсутствует напрочь. Остается пять штук. Решил посадить их на кнопки, с которыми можно будет поиграться разными методами &amp;mdash; опросом в цикле, обработкой прерываний, защитой от дребезга разными программными способами&amp;hellip; Каждая кнопка подтянута на питание, каждая нитка к кнопке идет через джампер, и каждая линия порта идет дополнительно на контактную площадку (для чего и джамперы).&lt;/p&gt;
&lt;p&gt;Кнопки сразу нарисовал трехконтактные, потому что при разводке буду учитывать мышиные. Незадействованный контакт отметил, чтобы не было ошибок при проверке разводки. &lt;/p&gt;
&lt;p&gt;Резисторы для &amp;laquo;подтяжки&amp;raquo; кнопок указал по 10 кОм, а токоограничивающие для светодиодов &amp;mdash; по 330 Ом, посчитав, что этого должно хватить. При расчете, правда, я предположил, что ток диодов не более 20 мА, то есть, даже при питании от +5 хватит с запасом. Но потом подкорректировал: на индикацию данных поставил резисторы по 270 Ом, а на индикатор питания, где стоит другой светодиод, увеличил уже до 2 кОм, и все равно слишком ярко.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://romeogolf.github.io/images/usb-polygon/02/shema.png" title="Схема"&gt;&lt;img alt="Схема в KiCAD" src="http://romeogolf.github.io/images/usb-polygon/02/preview/shema-medium.png" title="Схема" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Вот, собственно, и все с рисованием. &lt;/p&gt;
&lt;h2 id="_3"&gt;Разводка&lt;/h2&gt;
&lt;p&gt;Для нормальной разводки сначала надо сформировать список цепей, а потом поставить в соответствие каждому элементу его посадочную площадку. Проще всего было с контроллером &amp;mdash; его площадка подцепилась сразу сама.&lt;/p&gt;
&lt;p&gt;У разъема mini-USB площадка нашлась в библиотеке, но у нее, нехорошей такой, псевдовывод (пластмассовая &amp;laquo;нога&amp;raquo;) для позиционирования на плате оказался подключен к цепи (не помню уже, к какой) и выдавал ошибку при проверке правильности соединений. Пришлось править и пересохранять в специально сделанной для проекта библиотеке.&lt;/p&gt;
&lt;p&gt;Для джамперов посадочные площадки нашлись в одной из стандартных библиотек. Для конденсаторов и резисторов подобрал площадки, исходя из размера элементов, но (как потом оказалось) промахнулся с двадцатипиковыми емкостями кварца &amp;mdash; встали &amp;laquo;внатяг&amp;raquo;, оказались маловаты. Для контактных площадок под предполагаемую подпайку внешних штучек вполне подошли квадратные 1PIN_SMD. Для найденных среди барахла переключателей и мышиных кнопок места пришлось рисовать самостоятельно.&lt;/p&gt;
&lt;p&gt;Дальше сама разводка. Начал &amp;laquo;танцевать&amp;raquo; от контроллера, расставлять элементы более-менее компактно, но так, чтобы светодиоды в ряд, контактные площадки портов в ряд, кнопки в ряд. &lt;/p&gt;
&lt;p&gt;В один слой компактно не получалось, хоть и хотелось. Особенно неприятно, что у контроллера несколько выводов питания. С учетом того, что питание и корпус надо тянуть от разъема USB, да еще и вывести на контактные площадки, линии питания и корпуса в любом случае пересекаются. А двустороннюю плату в домашних условиях на коленке изготавливать куда сложнее, чем придумывать. В общем, сделал вторую сторону &amp;mdash; корпус. Так можно зазоры для участков, которые не надо на корпус подключать (типа ног кнопок и светодиодов) можно сделать достаточно большими, чтобы не бояться промахнуться при совмещении слоев. Переход для соединения сторон предусмотрел перемычечного типа &amp;mdash; тупо проволочкой.&lt;/p&gt;
&lt;p&gt;В конце концов получились переходные отверстия примерно так &amp;mdash; рядом с кварцем, вид со стороны, на которой контроллер, и со стороны, на которой кварц (&amp;laquo;земляной&amp;raquo; полигон):&lt;/p&gt;
&lt;p&gt;&lt;img alt="Переходное отверстие" src="http://romeogolf.github.io/images/usb-polygon/02/cpu-jmp.jpg" title="Переходное отверстие" /&gt;
&lt;img alt="Переходное отверстие" src="http://romeogolf.github.io/images/usb-polygon/02/led-jmp.jpg" title="Переходное отверстие" /&gt;&lt;/p&gt;
&lt;p&gt;В итоге получилась плата 7,5х10 см. Дальше &amp;mdash; лазерно-утюжная технология, естественно. Для разовой работы оптимальный вариант, особенно при желании сильно ужаться по бюджету. И тут, после перевода печати утюгом на плату, оказалось, что разводку придется еще подправить. Во-первых, с проводниками шириной в четверть миллиметра я погорячился, лучше все-таки сделать их полумиллиметровыми, благо, возможность такая есть. То есть, не то, чтобы они где-то непропечатались или непротравились, но как-то хиленько смотрятся, есть опасения насчет их надежности. Во-вторых, ноги мышиных кнопок толстенные, а отверстия в площадках сделаны по образцу других элементов, и при сверлении вручную китайским типа дремелем практически невозможно не порвать ободок меди, который должен остаться вокруг ноги. А какие не порвались, те выглядели настолько хлипко, что было понятно &amp;mdash; прогрева, достаточного для толстой ноги кнопки, они уже не вынесут. &lt;/p&gt;
&lt;p&gt;&lt;a href="http://romeogolf.github.io/images/usb-polygon/02/face-cad.png" title="Плата"&gt;&lt;img alt="Плата в KiCAD" src="http://romeogolf.github.io/images/usb-polygon/02/preview/face-cad-small.png" title="Плата" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Переделал все контактные площадки, предназначенные для сверления &amp;mdash; переходные отверстия между сторонами, светодиоды, переключатели, мышиные кнопки, джамперы &amp;mdash; увеличил по максимуму, до 3 мм где возможно, или, хотя бы, до 2 у джамперов. Утолщил дорожки. Перекомпоновал чуть компактнее.&lt;/p&gt;
&lt;h2 id="_4"&gt;Изготовление&lt;/h2&gt;
&lt;p&gt;Снова дружба утюга с лазером. Распечатал обе стороны платы на листе А4 фотопринтерной бумаги Lomond глянцевой тонкой. На рисунке печать не зеркальная для наглядности, на бумаге печатал-то конечно же в зеркальном виде.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://romeogolf.github.io/images/usb-polygon/02/face-print.png" title="Печать, лицевая сторона"&gt;&lt;img alt="Печать лицевая" src="http://romeogolf.github.io/images/usb-polygon/02/preview/face-print-small.png" title="Печать, лицевая сторона" /&gt;&lt;/a&gt;
&lt;a href="http://romeogolf.github.io/images/usb-polygon/02/back-print.png" title="Печать, задняя сторона "&gt;&lt;img alt="Печать задняя" src="http://romeogolf.github.io/images/usb-polygon/02/preview/back-print-small.png" title="Печать, задняя сторона" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Влезло на лист по два варианта обеих сторон платы, на случай, если плохо переведется и придется стирать рисунок ацетоном и переводить заново. Однако перевелось хорошо с первого раза. Ну, не отлично, но хорошо. Пришлось пару дорожек на самом краю подремонтировать лаком для ногтей при помощи зубочистки. На этом месте дорожка после протравки стала пошире и неровная.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Подкрашенная дорожка" src="http://romeogolf.github.io/images/usb-polygon/02/circuit1.jpg" title="Подкрашенная дорожка" /&gt;
&lt;img alt="Подкрашенная дорожка" src="http://romeogolf.github.io/images/usb-polygon/02/circuit2.jpg" title="Подкрашенная дорожка" /&gt;&lt;/p&gt;
&lt;p&gt;Защитил &amp;laquo;земляную&amp;raquo; сторону платы широким скотчем, правда, пришлось внахлест двумя полосками. Сунул в раствор хлорного железа, который у меня стоит уже довольно давно, больше года, и уже пару раз использовался, но работает до сих пор. Протравилось очень хорошо. Был один маленький недотрав, который я убрал скальпелем. Одна дорожка на самом краю вроде бы не рваная, но какая-то подозрительная, лучше ее укрепить. Но потом. &lt;/p&gt;
&lt;p&gt;Просверлил отверстия, примерил элементы в них, особенно беспокоили толстоногие кнопки. Совместил с отверстиями платы рисунок второй стороны. Рисунок на бумаге немного шире платы, и после совпадения отверстий он был зафиксирован путем загиба полей. Перевел утюгом вторую сторону, &amp;laquo;земляную&amp;raquo; &amp;mdash; практически сплошной полигон с пробелами под элементы (кнопки, светодиоды, джамперы и переключатели). Такие большие пространства тонером защищаются плохо, поэтому я решил помочь тонеру тем же лаком для ногтей, дополнительно подкрасил.&lt;/p&gt;
&lt;p&gt;Стороны совпали достаточно хорошо, однако с учетом трехмиллиметровых площадок переходных отверстий. Миллиметровые переходы уже не получились бы. Впрочем, я специально выбрал такой вариант, чтобы не заморачиваться. Вообще-то тонкое совпадение слоев в домашних условиях реализуемо, но задачи такой не стояло.&lt;/p&gt;
&lt;p&gt;Защитил протравленную сторону опять же скотчем. Допустил ошибку: отверстия надо было защитить дополнительно, капнуть лаком, например. Через отверстия под скотч затек раствор хлорного железа, испортил немножко одну дорожку.&lt;/p&gt;
&lt;p&gt;Отремонтированные дорожки:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Отремонтированная дорожка" src="http://romeogolf.github.io/images/usb-polygon/02/circuit3.jpg" title="Отремонтированная дорожка" /&gt;
&lt;img alt="Отремонтированная дорожка" src="http://romeogolf.github.io/images/usb-polygon/02/circuit4.jpg" title="Отремонтированная дорожка" /&gt;&lt;/p&gt;
&lt;p&gt;Дальше лужение, ремонт двух дорожек, монтаж. Кварц засунул в кусок термоусадочной трубки для изоляции и подклеил к плате суперклеем, а выводы подключил проволочками, чтобы кварц не торчал, как памятник, возвышаясь над кнопками и светодиодами. Ножки джамперов паял, предварительно нацепив на них сами джамперы, для выравнивания. Не стал делать совсем уж хорошо, с пластмассовыми основаниями ножек: они есть, но мало и жалко. Подкрасил отлетевшие при лужении надписи. Еще добавил надписи, не предусмотренные при рисовании платы &amp;mdash; как-то не подумал, что джамперы отключения кнопок тоже не мешало бы подписать.&lt;/p&gt;
&lt;h2 id="_5"&gt;Заключение&lt;/h2&gt;
&lt;p&gt;Получился такой вид:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://romeogolf.github.io/images/usb-polygon/02/cpu.jpg" title="Вид со стороны контроллера"&gt;&lt;img alt="Вид со стороны контроллера" src="http://romeogolf.github.io/images/usb-polygon/02/preview/cpu-small.jpg" title="Вид со стороны контроллера" /&gt;&lt;/a&gt;
&lt;a href="http://romeogolf.github.io/images/usb-polygon/02/led.jpg" title="Вид со стороны навесных элементов"&gt;&lt;img alt="Вид со стороны навесных элементов" src="http://romeogolf.github.io/images/usb-polygon/02/preview/led-small.jpg" title="Вид со стороны навесных элементов" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Итого общая стоимость платы &amp;mdash; около 200 рублей. Если точно, то 198 за контроллер, пара рублей за резисторы 22 Ома. Не уверен, что сюда стоит плюсовать лист бумаги Lomond, который все равно уже был, разъем USB на плату, который был куплен (давно, рублей за 15), но предназначался для другого места, и хлорное железо, которое еще поработает. Все остальное или б/у, или досталось за спасибо.&lt;/p&gt;
&lt;p&gt;Плата была замечена компьютером при первом же подключении, чем меня весьма порадовала. Попросила драйвер &amp;mdash; с этим вопросы к фирме Atmel и ее программе FLIP, но это уже другая история.&lt;/p&gt;</summary><category term="usb-polygon"></category></entry><entry><title>USB-polygon: Создание отладочной платы на микроконтроллере</title><link href="http://romeogolf.github.io/usb-polygon-1.html" rel="alternate"></link><updated>2016-07-25T20:00:00+05:00</updated><author><name>RomeoGolf</name></author><id>tag:romeogolf.github.io,2016-07-25:usb-polygon-1.html</id><summary type="html">&lt;p&gt;Недавно в очередной раз пришла в голову идея сделать свою отладочную плату на микроконтроллере и поиграться с нею. Однажды (в один из предыдущих разов) я даже делал что-то такое, но получилось плохо и было заброшено. И вот, полный решимости довести дело до более-менее приличного результата, я заново взялся за дело. С точки зрения программирования МК можно было бы раздобыть сразу отладочную плату и возиться с ней, однако, во-первых, хотелось попробовать не только программирование, но и радиоинженерство (пусть и на любительском уровне), во-вторых, так реально дешевле, ибо из деталей мне нужен буквально только контроллер, из обвеса разве что мелочь копеечная типа кнопок. &lt;/p&gt;
&lt;p&gt;Стало быть, займусь радиософтолюбительством в учебных целях с выполнением такой последовательности:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;проектирование простейшей цифровой схемы;&lt;/li&gt;
&lt;li&gt;создание проекта печатной платы;&lt;/li&gt;
&lt;li&gt;изготовление печатной платы;&lt;/li&gt;
&lt;li&gt;монтаж;&lt;/li&gt;
&lt;li&gt;программирование &amp;laquo;встроенной системы&amp;raquo;;&lt;/li&gt;
&lt;li&gt;управление некими устройствами (экраны, etc.) с помощью МК, возможно, под управлением с ПК;&lt;/li&gt;
&lt;li&gt;получение информации с неких устройств (энкодеры, etc.) с помощью МК;&lt;/li&gt;
&lt;li&gt;отладка взаимодействия ПК и некоего внешнего устройства на базе МК.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;В целом, основные задачи были следующие:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;освоить новый для меня ассемблер, вспомнить работу с С на МК;&lt;/li&gt;
&lt;li&gt;отладить работу с экранами мобильников, которых завалялось от старых мобил парочка штук, и хотелось бы применить их в самоделках;&lt;/li&gt;
&lt;li&gt;освоить работу с энкодером &amp;mdash; еще не пробовал это дело;&lt;/li&gt;
&lt;li&gt;сделать макет устройства, которым можно управлять с ПК и с которого можно передавать данные на ПК;&lt;/li&gt;
&lt;li&gt;подготовиться к созданию собственных устройств на МК, например, LC-метра.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;В долгосрочной перспективе хотелось бы отладить работу с МК с использованием разных операционных систем, то есть, чтобы разработку можно было вести и в Windows, и в Linux, работать с самодельным устройством в них же плюс Android.&lt;/p&gt;
&lt;p&gt;Набросок технического задания:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;устройство (плата) должно содержать микроконтроллер с характеристиками:&lt;ul&gt;
&lt;li&gt;достаточная распространенность (чтобы иметь легко обнаруживаемую учебную и справочную литературу, примеры кода);&lt;/li&gt;
&lt;li&gt;наличие бесплатных/свободных средств программирования, отладки для разных ОС;&lt;/li&gt;
&lt;li&gt;допустимая цена (до 300 р.);&lt;/li&gt;
&lt;li&gt;корпус, допускающий возможность несложного монтажа в домашних условиях (однозначно не шариковый, желательно выводы с шириной не менее 0,5 мм, в крайнем случае &amp;mdash; 0,25 мм);&lt;/li&gt;
&lt;li&gt;наличие интерфейса USB для совместимости с большинством вычислительных устройств (ПК, телефоны, планшеты, телевизоры, etc.);&lt;/li&gt;
&lt;li&gt;наличие минимум двух байтовых портов для возможности одновременного ввода и вывода информации простейшими способами (кнопки и светодиоды) а также для подключения дополнительных устройств;&lt;/li&gt;
&lt;li&gt;желательно наличие аппаратно реализованных интерфейсов обмена информацией помимо USB, например, SPI для экранов мобильников и карт памяти;&lt;/li&gt;
&lt;li&gt;крайне желательна возможность внутрисхемного программирования по USB, чтобы не заморачиваться с программаторами (во всяком случае, поначалу);&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;устройство должно подключаться по USB, получать питание там же. Собственное питание необязательно, так как в процессе отладки оно все равно постоянно подключено к ПК, а самостоятельной ценности не имеет. Соответственно, потребление должно быть не более 150 мА;&lt;/li&gt;
&lt;li&gt;устройство должно иметь примитивные средства вывода информации: как минимум, байт, отображаемый на светодиодах;&lt;/li&gt;
&lt;li&gt;устройство должно иметь примитивные средства ввода информации: как минимум, три кнопки, не пересекающиеся по портам со светодиодными линиями;&lt;/li&gt;
&lt;li&gt;устройство должно иметь возможность подключения шины данных и питания для дополнительных устройств, например, экранов или энкодера, данных должно быть не менее двух байтов (дешевый китайский ЖК-экран 1602A-1 требует 11 разрядов);&lt;/li&gt;
&lt;li&gt;устройство должно обеспечивать возможность работы с дополнительными устройствами с питанием как 5 В, так и 3,3 В (экран 1602A-1 - 5 В, экраны мобильников - 3,3 В);&lt;/li&gt;
&lt;li&gt;устройство должно быть изготовлено по возможности на имеющейся в наличии элементной базе (из чего попало и палок);&lt;/li&gt;
&lt;li&gt;требования живучести и стойкости к механическим и климатическим воздействиям, надежности, сроку службы, эксплуатации, хранению, удобству технического обслуживания, размеру, массе, корпусу, консервации, упаковке и маркировке не предъявляются.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;После некоторого анализа того, что есть под рукой и того, что можно купить, остановился на AT90USB162. Не самый современный контроллер, но неплохой по соотношению цены и возможностей. USB есть, как и возможность программирования по USB без программатора с помощью утилиты FLIP от ATMEL, причем, под Windows и Linux. Встроенный преобразователь питания из +5 В, получаемых по USB, в +3,3 В. AVR, то есть, обширное сообщество, а значит, все вопросы, которые могут появиться поначалу, уже кто-то задавал, и ответы можно найти. Корпус TQFP32, плата легко разведется под лазерный утюг. Нашел на AliExpress за двести рублей без малого. Три порта ввода-вывода, из них два байтовых, один слегка подрезанный. Есть возможность использования UART, SPI, PS/2. Жалко, что нет АЦП, только аналоговый компаратор, ну да ладно, попробуем обойтись.&lt;/p&gt;
&lt;p&gt;Еще понадобится горсть кнопок, горсть джамперов (ножек для них и самих перемычек), пара переключателей, горсть светодиодов, кварц и шнурок для USB. Кнопки есть мышиные, светодиоды даже не помню, откуда снял, переключатели от сломанных детских игрушек с электроначинкой, шнурок от дохлой USB-мыши, кварц на 8 МГц (это важно) уже был куплен для какого-то несостоявшегося проектика.&lt;/p&gt;
&lt;p&gt;И вот тут бы по-хорошему проанализировать сперва средства разработки и отладки, но я отложу это на попозже. В конце концов, не такая уж дорогая игрушка, чтобы горевать, если что-то пойдет не так. Поэтому начну со схемы, пока развожу ее &amp;mdash; глядишь, приедет из Китая контроллер. Спаяю &amp;mdash; тогда и начну заниматься отладкой. В любительских целях это допустимо, ящитаю.&lt;/p&gt;</summary><category term="usb-polygon"></category></entry><entry><title>Recorder Fingering Quiz free 1.3</title><link href="http://romeogolf.github.io/recorder-fingering-quiz-free-13.html" rel="alternate"></link><updated>2016-05-17T15:00:00+05:00</updated><author><name>RomeoGolf</name></author><id>tag:romeogolf.github.io,2016-05-17:recorder-fingering-quiz-free-13.html</id><summary type="html">&lt;div align="center"&gt;

&lt;div style="float:right"&gt;
&lt;a href="https://play.google.com/store/apps/details?id=com.triangulum.rfquiz_free&amp;utm_source=global_co&amp;utm_medium=prtnr&amp;utm_content=Mar2515&amp;utm_campaign=PartBadge&amp;pcampaignid=MKT-AC-global-none-all-co-pr-py-PartBadges-Oct1515-1"&gt;&lt;img class="badge" alt="Get it on Google Play" src="https://play.google.com/intl/en_us/badges/images/apps/ru-play-badge.png" /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;div style="float:right"&gt; &lt;img alt="QR-code for rfquiz" src="./images/rfquiz_market.png" title="QR-код для RFQuiz в Google Play" style="margin-right:30px;" /&gt; &lt;/div&gt;

&lt;/div&gt;

&lt;p&gt;Обновлено приложение Recorder Fingering Quiz, текущая версия 1.3.&lt;/p&gt;
&lt;p&gt;Основное изменение &amp;mdash; возможность выбора способа отображения знаков альтерации.&lt;/p&gt;
&lt;p&gt;Теперь в настройках (&amp;laquo;Инструмент&amp;raquo; -&amp;gt; &amp;laquo;Знаки альтерации&amp;raquo;) можно выбрать один из вариантов из списка:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Случайные (по умолчанию): используются знаки диезов и бемолей (если они есть) непосредственно перед нотой;&lt;/li&gt;
&lt;li&gt;При ключе: используются знаки при ключе. При этом возможно отображение знаков при ключе, не имеющих отношения к заданной ноте;&lt;/li&gt;
&lt;li&gt;Чередовать случайно: программа использует знаки при ключе и случайные для последующих нот, чередуя их в произвольном порядке.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Теперь тренировка потребует чуть больше внимательности. Следует помнить, что, например, диез при ключе, расположенный на верхней линейке, влияет не только на Фа второй октавы, но и на все остальные Фа (первой и третьей октавы, попадающие в диапазон блокфлейты альт). Опять же, наличие знаков при ключе само по себе не обязательно означает изменение ноты на полтона.&lt;/p&gt;
&lt;p&gt;Сделаны также небольшие изменения в коде, не оказывающие видимого влияния на работу приложения.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://romeogolf.github.io/pages/recorder-fingering-quiz-free.html"&gt;Страница приложения&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://romeogolf.github.io/pages/rfquiz_free_help_1.html"&gt;Справка&lt;/a&gt;&lt;/p&gt;</summary><category term="rfquiz"></category><category term="triangulum"></category></entry><entry><title>Про пессимиста</title><link href="http://romeogolf.github.io/pro-pessimista.html" rel="alternate"></link><updated>2016-05-16T15:00:00+05:00</updated><author><name>RomeoGolf</name></author><id>tag:romeogolf.github.io,2016-05-16:pro-pessimista.html</id><summary type="html">&lt;p&gt;В ночь его рожденья с кленов дочиста&lt;br /&gt;
Облетела поздняя листва.&lt;br /&gt;
&amp;laquo;Боже ж мой, когда ж все это кончится?&amp;raquo; &amp;mdash;&lt;br /&gt;
Были его первые слова.&lt;/p&gt;
&lt;p&gt;Ранним утром, хочется &amp;ndash; не хочется,&lt;br /&gt;
На работу каждый раз спеша,&lt;br /&gt;
&amp;laquo;Боже ж мой, когда ж все это кончится?&amp;raquo; &amp;mdash;&lt;br /&gt;
Сам себя он робко вопрошал.&lt;/p&gt;
&lt;p&gt;И когда его соседка-склочница&lt;br /&gt;
Принималась снова за скандал,&lt;br /&gt;
&amp;laquo;Боже ж мой, когда ж все это кончится?&amp;raquo; &amp;mdash;&lt;br /&gt;
Говорил и дьявольски страдал.&lt;/p&gt;
&lt;p&gt;Слушая по радио пророчества&lt;br /&gt;
Разных политических светил,&lt;br /&gt;
&amp;laquo;Боже ж мой, когда ж все это кончится?&amp;raquo; &amp;mdash;&lt;br /&gt;
Каждый раз он тихо говорил.&lt;/p&gt;
&lt;p&gt;А в последний путь несли &amp;mdash; поморщился,&lt;br /&gt;
Напоследок приоткрыл глаза,&lt;br /&gt;
&amp;laquo;Боже ж мой, когда ж все это кончится?&amp;raquo; &amp;mdash;&lt;br /&gt;
Тихо провожающим сказал.&lt;/p&gt;</summary><category term="стихи"></category></entry><entry><title>Потрясенная флэшка</title><link href="http://romeogolf.github.io/flash_repair.html" rel="alternate"></link><updated>2016-04-18T20:00:00+05:00</updated><author><name>RomeoGolf</name></author><id>tag:romeogolf.github.io,2016-04-18:flash_repair.html</id><summary type="html">&lt;p&gt;Есть у меня флэшка, USB flash drive, на восемь гигов в нестандартном сувенирном корпусе. Я ее таскал с собой повсюду. Фактически, это был мой электронный блокнот с записками, которые могут понадобиться в разных местах, где есть компьютер. В частности, там хранились кое-какие наброски творчества и бортжурнал авто. Некоторые файлы были заметно актуальнее, чем их копия на компьютере, а бортжурнал и вовсе был в единственном экземпляре.&lt;/p&gt;
&lt;p&gt;Эх, неспроста админы шутят, что люди делятся на две категории &amp;mdash; те, кто еще не делают бэкапы, и те, кто уже делают&amp;hellip;&lt;/p&gt;
&lt;p&gt;В общем, недавно в магазине я доставал из кармана сумку, а за нее зацепилась флэшка и, чуть-чуть подлетев, хлопнулась на бетонный пол. Я не придал этому значения (еще порадовался, что заметил и не потерял), сунул ее назад в карман и забыл. Дома немного поработал за компьютером и решил сохранить кое-какие наработки на флэшке. Воткнул в разъем &amp;mdash; а компьютер ее не видит! Ни винда, ни линукс, ни один разъем USB. Что характерно &amp;mdash; лампочка на торце светится! Ровненько, не моргая&amp;hellip; Похоже, испытание на устойчивость при воздействии механических ударов одиночного действия устройство не выдержало.&lt;/p&gt;
&lt;p&gt;Обидно&amp;hellip; Особенно за бортжурнал, хоть и не самый полезный файл, но зря я его вел, что ли?&lt;/p&gt;
&lt;p&gt;Начал разбирать. Корпус нестандартный, клееный (хоть и треснувший по шву от удара), поэтому операция оказалась не очень простой. Кое-где детальки надломились. Впрочем, из-за постоянного таскания при себе то в кармане, то в сумке, то в рюкзаке вид флэшки и так несколько пожульканый, так что если чуть-чуть подклеить при восстановлении &amp;mdash; в глаза бросаться не должно. Было бы что восстанавливать&amp;hellip;&lt;/p&gt;
&lt;p&gt;Разобрал. Традиционный вариант: плата, на одной стороне микросхема флэш-памяти, на другой контроллер с &amp;laquo;обвесом&amp;raquo; из smd-рассыпухи. Взял свою любимую лупу, которая в прошлой жизни была чьим-то то ли объективом, то ли окуляром в латунном корпусе, кратностью больше 10.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Лирическое отступление&lt;/dt&gt;
&lt;dd&gt;Моя твердая уверенность: лупы, кратностью больше 10, просто обязаны быть хотя бы двухлинзовыми. Иначе у них бешеные аберрации по краям, совершенно невозможно смотреть. В этом плане хорошему окуляру трудно найти конкурентов.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Самое подозрительное место &amp;mdash; контакт USB-разъема с платой &amp;mdash; в полном порядке. Ни непропая, ни трещинки. На всякий случай пропаял лишний раз, не помогло.&lt;/p&gt;
&lt;p&gt;Резисторы-конденсаторы выглядят прилично. Непропаев не видно, трещин на плате нет. Резисторы даже подписаны, прозвонил &amp;mdash; номиналы соответствуют, не треснули.&lt;/p&gt;
&lt;p&gt;Ну, микросхемы и спросить-то не о чем. Такой удар их с места не сдвинет, &amp;laquo;волшебный дым&amp;raquo; из них не выпустит, даже если был непропай контакта &amp;mdash; остальные лапы удержат на месте, здесь скорее перепад температур что-то показал, а не удар.&lt;/p&gt;
&lt;p&gt;А вот кварц &amp;laquo;порадовал&amp;raquo;. Мелкий такой цилиндрик с двумя ножками, засунутый в термоусадку. По-любому, это кварц, больше нечем ему быть. Тем более, подписан Y1. Одна из ножек не в контакте. Выпала из капли припоя! Ну, думаю, отлично! Впаиваю на место. А это не так-то просто. Стальные у него ноги, что ли? Не лудятся, в припое не держатся. Выпаял его совсем, зачистил лапки, облудил, пришлось кислоту использовать, впаял обратно. Не работает!&lt;/p&gt;
&lt;p&gt;Вот тут стало грустно. Я же был уверен, что нашел неисправность! Облазил платку с лупой несколько раз. Ну, нету больше видимых проблем! А сгореть от удара флэш не могла. Если бы она из стратосферы падала и о бетон шмякнулась, то, может, и сгорела бы. А может, еще на подлете. А лампочка горит!&lt;/p&gt;
&lt;p&gt;Подумал немного. Что могло отказать от удара? Резистор из-за трещины. Отпадает, я их прозвонил. Конденсатор из-за трещины или отслаивания контакной &amp;laquo;обоймы&amp;raquo;, не знаю, как правильно называется. Но почти все емкости фильтровые по питанию и на работу платы не влияют, кроме, разве что тех, что в цепи кварца, но выглядят все хорошо. Микросхемы? Не-е-е. Остается опять кварц. Этот мог и стряхнуться.&lt;/p&gt;
&lt;p&gt;Нашел возможность воспользоваться осциллографом. Воткнул флэш в гнездо, на выводах кварца уровень. Вольта два. Частоты нет. Надо бы попробовать заменить, а на что? Он, зараза, не подписан. Но, имея опыт вскрытия других флэшек, я помню, что у некоторых стояли кварцевые генераторы, подписанные 12 МГц, хотя разок видел и на 8 МГц. Опять же, USB синхруется частотой 48 МГц, и для контроллера было бы логично выбрать что-то кратное: 12 или 24. Но под рукой ничего подобного нет. Есть несколько с материнских плат на 14,318, 25, 25,5 и какие-то неподписанные. Есть несколько крупных отечественных на 8, 10, 20 мегагерц. Это не считая всяких дробных частот, типа для часов или UART. Начал пробовать &amp;mdash; хуже все равно не будет. Цилиндрические кварцы из материнок подпаял по месту, а для остальных пришлось удлинять лапы проводочками.&lt;/p&gt;
&lt;p&gt;Интересно: некоторые кварцы вели себя в точности, как &amp;laquo;родной&amp;raquo; &amp;mdash; с уровнем вместо частоты, а некоторые давали какую-то частоту в момент подключения в гнездо, а потом частота пропадала. Ну, оно и понятно &amp;mdash; соединение не удалось, можно отключаться. Порылся на работе среди старых макетов, которые свалены в кучу в качестве доноров для новых макетов. И &amp;mdash; ура! &amp;mdash; нашел кварц на 12 МГц. Впаял его. Воткнул флэшку с болтающимся на проводах кварцем в гнездо USB &amp;mdash; лампочка заморгала, флэшка определилась! Это ура!&lt;/p&gt;
&lt;p&gt;Запустил копирование данных с флэшки на компьютер. Из трех с половиной гигов скопировалось почти всё. Почему-то оказался битым один exe-файл, некий инсталлятор. Сильно, видать, тряхнуло!&lt;/p&gt;
&lt;p&gt;Теперь у меня есть флэшка с кварцем, который размером в полфлэшки. Запихать это &amp;laquo;изделие&amp;raquo; обратно в корпус можно даже и не мечтать. Кварцев такого размера такой частоты в радиусе 300 км в продаже нет. Заказывать через интернет обидно: при цене детали в два рубля доставка &amp;mdash; двести. С другой стороны, лучше отдать двести два рубля и получить работающую флэшку, чем бороться с жабой и без флэшки.&lt;/p&gt;
&lt;p&gt;Пока это выглядит так &amp;mdash; флэшка, отпаяный дохлый кварц и припаяный отечественный кварц:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://romeogolf.github.io/images/flash/flash.jpg" title="Флэшка и кварц"&gt;&lt;img alt="Флэшка и кварц" src="http://romeogolf.github.io/images/flash/pre_flash.jpg" title="Флэшка и кварц" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;В конце концов, все-таки заказал на алиэкспрессе пять кварцев за 166 рублей. И остальные четыре, надеюсь, применю куда-нибудь. Найти оказалось несложно, они среди параметров имели в том числе и размеры &amp;mdash; длина 6 мм и диаметр 2 мм, то, что надо. На днях пришел конвертик на почту, впаял &amp;mdash; заработало!&lt;/p&gt;</summary><category term="ремонт"></category><category term="своими руками"></category></entry><entry><title>Засекаем время в bat/cmd</title><link href="http://romeogolf.github.io/time_in_bat.html" rel="alternate"></link><updated>2016-03-29T20:00:00+05:00</updated><author><name>RomeoGolf</name></author><id>tag:romeogolf.github.io,2016-03-29:time_in_bat.html</id><summary type="html">&lt;p&gt;При всех моих стараниях уйти от Windows везде и навсегда не получается. Есть компьютер на работе, компьютеры друзей, собственный нетбук, с которым неохота возиться настолько кардинально. При этом, ряд задач в принципе выполняется из командной строки проще и удобнее, чем &amp;laquo;оконно-мышевым&amp;raquo; способом. Особенно если это задачи из тех, что имеют прямое отношение к Linux, например, работа с утилитами из комплекта &lt;a href="http://gnuwin32.sourceforge.net/"&gt;gnuwin32&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Запуская &lt;a href="http://romeogolf.github.io/tar-and-encoding.html"&gt;однажды уже упомянутую&lt;/a&gt; упаковку/распаковку при помощи windows-реализации tar, я захотел однажды засечь время. Ну, не секундомером же это делать&amp;hellip; Сделал командный файл, в котором вывожу время, запускаю архиватор, снова вывожу время.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;@&lt;/span&gt;time \t
&lt;span class="p"&gt;@&lt;/span&gt;tar -cf foo.tar foo
&lt;span class="p"&gt;@&lt;/span&gt;time \t
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Получается ерунда. Команда &lt;code&gt;time \t&lt;/code&gt; выдает время с точностью до минуты. Ладно, можно использовать переменную среды &lt;code&gt;%time%&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;%time%&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;tar -cf foo.tar foo
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;%time%&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Чуть получше, но все равно очень плохо. Во-первых, если архиватору добавить ключ -v, и он начнет выдавать в консоль имена архивируемых объектов, то время начала стремительно унесется за пределы экрана. Во-вторых, чтобы понять, сколько процесс занял времени, все равно придется считать, а компьютер на что?&lt;/p&gt;
&lt;p&gt;Однако, переменная &lt;code&gt;%time%&lt;/code&gt; хитроформатированная, скорее текст, чем число, и ее в лоб не получится использовать для вычитания времени начала из времени окончания. Тем более, командный интерпретатор cmd.exe работает с целочисленными значениями, а время идет с точностью до сотых секунды (ну, или до десятков миллисекунд, как хотите).&lt;/p&gt;
&lt;p&gt;Ладно, разберем время на составляющие. При помощи конструкции &lt;code&gt;set t1_m=%t1:~3,2%&lt;/code&gt; которая присваивает переменной t1_m два знака из t1, пропустив первые три, получим часы, минуты, секунды и сотые доли секунды: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;t1_h&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;%t1:~0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;%
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;t1_m&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;%t1:~3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;%
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;t1_s&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;%t1:~6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;%
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;t1_ms&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;%t1:~9%&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="n"&gt;/a&lt;/span&gt; s&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; t&lt;span class="m"&gt;1&lt;/span&gt;_h * &lt;span class="m"&gt;60&lt;/span&gt; * &lt;span class="m"&gt;60&lt;/span&gt; * &lt;span class="m"&gt;100&lt;/span&gt; + t&lt;span class="m"&gt;1&lt;/span&gt;_m * &lt;span class="m"&gt;60&lt;/span&gt; * &lt;span class="m"&gt;100&lt;/span&gt; + t&lt;span class="m"&gt;1&lt;/span&gt;_s * &lt;span class="m"&gt;100&lt;/span&gt; + t&lt;span class="m"&gt;1&lt;/span&gt;_ms
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Напоминаю, что ключик &lt;code&gt;/a&lt;/code&gt; позволяет оператору &lt;code&gt;set&lt;/code&gt; не только присваивать значение переменной, но и выполнять некоторые операции (подробнее &amp;mdash; &lt;code&gt;set /?&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;В результате получили в s1 время в сотнях миллисекунд, допустим, из времени начала операции. Можно сделать аналогичным образом s2 из времени окончания. Эти две переменные целочисленные и прекрасно складываются, вычитаются и все такое. Нам надо разность, и, чтобы избежать неожиданностей со знаками, можно сразу определить, что из них больше, и потом вычитать:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;/I&lt;/span&gt; &lt;span class="nv"&gt;%s1%&lt;/span&gt; &lt;span class="o"&gt;geq&lt;/span&gt; &lt;span class="nv"&gt;%s2%&lt;/span&gt; (&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="n"&gt;/a&lt;/span&gt; s&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; s&lt;span class="m"&gt;1&lt;/span&gt; - s&lt;span class="m"&gt;2&lt;/span&gt;) &lt;span class="k"&gt;else&lt;/span&gt; (&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="n"&gt;/a&lt;/span&gt; s&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; s&lt;span class="m"&gt;2&lt;/span&gt; - s&lt;span class="m"&gt;1&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ключик &lt;code&gt;/i&lt;/code&gt; расширяет возможности оператора сравнения, позволяя ему не только выполнять сравнение строк на тождественность (чем он занимался изначально), но и сравнивать числа на больше/меньше/равно (&lt;code&gt;if /?&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;Получили s3 &amp;mdash; разность времени в десятках миллисекунд. Надо разобрать на составляющие, а потом склеить обратно в удобочитаемом виде. Все несложно, используем остаток от деления, чтобы избавиться, например, от часов при извлечении минут, и деление (целочисленное, другого тут нет), чтобы избавиться от секунд, примерно так:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="n"&gt;/a&lt;/span&gt; t&lt;span class="m"&gt;3&lt;/span&gt;_h&lt;span class="o"&gt;=&lt;/span&gt; s&lt;span class="m"&gt;3&lt;/span&gt; / &lt;span class="m"&gt;100&lt;/span&gt; / &lt;span class="m"&gt;60&lt;/span&gt; / &lt;span class="m"&gt;60&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="n"&gt;/a&lt;/span&gt; t&lt;span class="m"&gt;3&lt;/span&gt;_m&lt;span class="o"&gt;=&lt;/span&gt; s&lt;span class="m"&gt;3&lt;/span&gt; %% (&lt;span class="m"&gt;100&lt;/span&gt; * &lt;span class="m"&gt;60&lt;/span&gt; * &lt;span class="m"&gt;60&lt;/span&gt;) / &lt;span class="m"&gt;100&lt;/span&gt; / &lt;span class="m"&gt;60&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="n"&gt;/a&lt;/span&gt; t&lt;span class="m"&gt;3&lt;/span&gt;_s&lt;span class="o"&gt;=&lt;/span&gt; s&lt;span class="m"&gt;3&lt;/span&gt; %% (&lt;span class="m"&gt;100&lt;/span&gt; * &lt;span class="m"&gt;60&lt;/span&gt;) / &lt;span class="m"&gt;100&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="n"&gt;/a&lt;/span&gt; t&lt;span class="m"&gt;3&lt;/span&gt;_ms&lt;span class="o"&gt;=&lt;/span&gt; s&lt;span class="m"&gt;3&lt;/span&gt; %% &lt;span class="m"&gt;100&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Тут надо не забыть забавную тонкость: в командном интерпретаторе символ процента &amp;mdash; подводный камень. Иногда он ставится по обе стороны от переменной, и тогда при выполнении интерпретатор отбрасывает эту пару, а имя переменной заменяет значением. Иногда он стоит перед переменной цикла. Иногда он используется в виде оператора получения остатка от целочисленного деления. Так вот, там, где процент непарный, его надо не забывать удваивать, а то его отбросят и будут безуспешно искать пару.&lt;/p&gt;
&lt;p&gt;Получили часы, минуты, секунды и десятки миллисекунд в отдельных переменных. Можно их использовать, как числа, а можно &amp;mdash; как строки, поэтому их легко склеить в одно значение времени и выдать его в стандартный поток ввода-вывода, &amp;laquo;на консоль&amp;raquo;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;t3&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;%t3_h%&lt;/span&gt;:&lt;span class="nv"&gt;%t3_m%&lt;/span&gt;:&lt;span class="nv"&gt;%t3_s%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;%t3_ms%&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;%t3%&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Все это можно засунуть в отдельный файл, чтобы использовать в разных местах. Тогда время надо будет передавать файлу в виде параметров. Тут есть  два варианта: либо &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;t1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;%~1&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;t2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;%~2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;и передавать параметры в двойных кавычках (а тильда раскроет кавычки), либо&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;t1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;%1%&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;t2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;%3%&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;и передавать без кавычек, потому что в символьном представлении времени , по крайней мере, с русской локалью (в другой не проверял), десятки миллисекунд отделяются от секунд запятой, а запятая вместе с пробелом разделяет и параметры командной строки, так что сотые доли секунды будут уже другим параметром.&lt;/p&gt;
&lt;p&gt;Итого, получился такой командный файл, скажем, timecalc.bat:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;t1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;%~1&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;t2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;%~2&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;rem параметры должны быть в кавычках

&lt;span class="p"&gt;@&lt;/span&gt;rem &lt;span class="k"&gt;echo&lt;/span&gt; t&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;%t1%&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;rem &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;t1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;03&lt;/span&gt;&lt;span class="nl"&gt;:02:20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;45&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;t1_h&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;%t1:~0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;%
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;t1_m&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;%t1:~3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;%
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;t1_s&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;%t1:~6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;%
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;t1_ms&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;%t1:~9%&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;rem &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;%t1%&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;%t1_h%&lt;/span&gt; - &lt;span class="nv"&gt;%t1_m%&lt;/span&gt; - &lt;span class="nv"&gt;%t1_s%&lt;/span&gt; - &lt;span class="nv"&gt;%t1_ms%&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="n"&gt;/a&lt;/span&gt; s&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; t&lt;span class="m"&gt;1&lt;/span&gt;_h * &lt;span class="m"&gt;60&lt;/span&gt; * &lt;span class="m"&gt;60&lt;/span&gt; * &lt;span class="m"&gt;100&lt;/span&gt; + t&lt;span class="m"&gt;1&lt;/span&gt;_m * &lt;span class="m"&gt;60&lt;/span&gt; * &lt;span class="m"&gt;100&lt;/span&gt; + t&lt;span class="m"&gt;1&lt;/span&gt;_s * &lt;span class="m"&gt;100&lt;/span&gt; + t&lt;span class="m"&gt;1&lt;/span&gt;_ms
&lt;span class="p"&gt;@&lt;/span&gt;rem &lt;span class="k"&gt;echo&lt;/span&gt; s&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;%s1%&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;rem &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;t2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;01&lt;/span&gt;&lt;span class="nl"&gt;:01:10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;05&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;rem &lt;span class="k"&gt;echo&lt;/span&gt; t&lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;%t2%&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;t2_h&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;%t2:~0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;%
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;t2_m&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;%t2:~3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;%
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;t2_s&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;%t2:~6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;%
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;t2_ms&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;%t2:~9%&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;rem &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;%t2%&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;%t2_h%&lt;/span&gt; - &lt;span class="nv"&gt;%t2_m%&lt;/span&gt; - &lt;span class="nv"&gt;%t2_s%&lt;/span&gt; - &lt;span class="nv"&gt;%t2_ms%&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="n"&gt;/a&lt;/span&gt; s&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; t&lt;span class="m"&gt;2&lt;/span&gt;_h * &lt;span class="m"&gt;60&lt;/span&gt; * &lt;span class="m"&gt;60&lt;/span&gt; * &lt;span class="m"&gt;100&lt;/span&gt; + t&lt;span class="m"&gt;2&lt;/span&gt;_m * &lt;span class="m"&gt;60&lt;/span&gt; * &lt;span class="m"&gt;100&lt;/span&gt; + t&lt;span class="m"&gt;2&lt;/span&gt;_s * &lt;span class="m"&gt;100&lt;/span&gt; + t&lt;span class="m"&gt;2&lt;/span&gt;_ms
&lt;span class="p"&gt;@&lt;/span&gt;rem &lt;span class="k"&gt;echo&lt;/span&gt; s&lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;%s2%&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;/I&lt;/span&gt; &lt;span class="nv"&gt;%s1%&lt;/span&gt; &lt;span class="o"&gt;geq&lt;/span&gt; &lt;span class="nv"&gt;%s2%&lt;/span&gt; (&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="n"&gt;/a&lt;/span&gt; s&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; s&lt;span class="m"&gt;1&lt;/span&gt; - s&lt;span class="m"&gt;2&lt;/span&gt;) &lt;span class="k"&gt;else&lt;/span&gt; (&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="n"&gt;/a&lt;/span&gt; s&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; s&lt;span class="m"&gt;2&lt;/span&gt; - s&lt;span class="m"&gt;1&lt;/span&gt;)
&lt;span class="p"&gt;@&lt;/span&gt;rem &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="n"&gt;/a&lt;/span&gt; s&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; s&lt;span class="m"&gt;2&lt;/span&gt; - s&lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;rem &lt;span class="k"&gt;echo&lt;/span&gt; s&lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;%s3%&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="n"&gt;/a&lt;/span&gt; t&lt;span class="m"&gt;3&lt;/span&gt;_h&lt;span class="o"&gt;=&lt;/span&gt; s&lt;span class="m"&gt;3&lt;/span&gt; / &lt;span class="m"&gt;100&lt;/span&gt; / &lt;span class="m"&gt;60&lt;/span&gt; / &lt;span class="m"&gt;60&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="n"&gt;/a&lt;/span&gt; t&lt;span class="m"&gt;3&lt;/span&gt;_m&lt;span class="o"&gt;=&lt;/span&gt; s&lt;span class="m"&gt;3&lt;/span&gt; %% (&lt;span class="m"&gt;100&lt;/span&gt; * &lt;span class="m"&gt;60&lt;/span&gt; * &lt;span class="m"&gt;60&lt;/span&gt;) / &lt;span class="m"&gt;100&lt;/span&gt; / &lt;span class="m"&gt;60&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="n"&gt;/a&lt;/span&gt; t&lt;span class="m"&gt;3&lt;/span&gt;_s&lt;span class="o"&gt;=&lt;/span&gt; s&lt;span class="m"&gt;3&lt;/span&gt; %% (&lt;span class="m"&gt;100&lt;/span&gt; * &lt;span class="m"&gt;60&lt;/span&gt;) / &lt;span class="m"&gt;100&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="n"&gt;/a&lt;/span&gt; t&lt;span class="m"&gt;3&lt;/span&gt;_ms&lt;span class="o"&gt;=&lt;/span&gt; s&lt;span class="m"&gt;3&lt;/span&gt; %% &lt;span class="m"&gt;100&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;rem &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;%t3_h%&lt;/span&gt; - &lt;span class="nv"&gt;%t3_m%&lt;/span&gt; - &lt;span class="nv"&gt;%t3_s%&lt;/span&gt; - &lt;span class="nv"&gt;%t3_ms%&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;t3&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;%t3_h%&lt;/span&gt;:&lt;span class="nv"&gt;%t3_m%&lt;/span&gt;:&lt;span class="nv"&gt;%t3_s%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;%t3_ms%&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;%t3%&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Теперь об использовании. Допустим, есть такой батничек, запускающий архивацию с засечкой времени:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;%time%&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;echo&lt;/span&gt; start &lt;span class="nv"&gt;%a%&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;tar -cf &lt;span class="nv"&gt;%1&lt;/span&gt;.tar &lt;span class="nv"&gt;%1&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;%time%&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;echo&lt;/span&gt; stop &lt;span class="nv"&gt;%b%&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;В переменных a и b имеем время начала и окончания операции соответственно. Можно передать их нашему скрипту, непременно валяющемуся тут же рядом, в этой же папке:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;call&lt;/span&gt; .\timecalc.cmd &lt;span class="s2"&gt;&amp;quot;%b%&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;%a%&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;И он выведет в консоль затраченное время третьей строчкой, после &amp;laquo;start &amp;lt;время начала&gt;&amp;raquo; и &amp;laquo;stop &amp;lt;время окончания&gt;&amp;raquo;. Но хотелось бы добавить, допустим, &amp;laquo;упаковано за &amp;raquo; или &amp;laquo;распаковано за &amp;raquo;, так что ввести соответствующие строки в файл &amp;laquo;подпрограммы&amp;raquo; не получится. Передавать этот строковый &amp;laquo;довесок&amp;raquo; в виде еще одного параметра и не особо красиво, и при желании дописать текст после времени (а не перед) опять потребует лезть в вызываемый файл. А как перехватить вывод вызываемого файла для использования в вызывающем? &lt;/p&gt;
&lt;p&gt;Я просто обалдел, когда узнал. Внезапно, при помощи оператора цикла!!! О, сколько нам открытий чудных готовит &lt;code&gt;for /?&lt;/code&gt;&amp;hellip;&lt;/p&gt;
&lt;p&gt;Расширение синтаксиса &lt;code&gt;/F&lt;/code&gt; позволяет выковыривать переменную цикла из разного рода наборов: файлов, символьных строк, команд. Чтобы понять, что используется для цикла, применяются (или не применяются) кавычки. Без кавычек в скобках пишем файл или набор файлов. А применение кавычек зависит от того, установлена или нет опция usebackq: при установленной  в двойных кавычках пишем строку, в простых &amp;mdash; команду. При снятой опции  строку пишем в простых кавычках, а команду &amp;mdash; в обратных (которые обычно на клавише с буквой Ё). При этом, команда вполне может быть одна, и проход цикла тоже один, и в теле цикла получаем нужный нам вывод команды, который засунем в переменную для дальнейшего использования (хотя можно и использовать сразу):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;/F&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;usebackq&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;%%s&lt;/span&gt; in (&lt;span class="sb"&gt;`call .\timecalc.cmd &amp;quot;%b%&amp;quot; &amp;quot;%a%&amp;quot;`&lt;/span&gt;) &lt;span class="k"&gt;do&lt;/span&gt; @&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;delta&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;%%s&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;И, кстати, не забываем, что переменная цикла должна быть односимвольной. Нигде этого не прочитал, вывел экспериментально путем ошибок и проб. Может, читал невнимательно, а может, не знал где&amp;hellip;&lt;/p&gt;
&lt;p&gt;Итого получаем такой командный файл, скажем, tar_time.cmd, который принимает в качестве параметра пакуемую папку, засекает время и пишет его в консоль и в лог-файл:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;%1&lt;/span&gt; &amp;gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;tar_log&lt;/span&gt;.txt

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;%time%&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;echo&lt;/span&gt; start &lt;span class="nv"&gt;%a%&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;echo&lt;/span&gt;    start &lt;span class="nv"&gt;%a%&lt;/span&gt; &amp;gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;tar_log&lt;/span&gt;.txt
&lt;span class="p"&gt;@&lt;/span&gt;tar -cf &lt;span class="nv"&gt;%1&lt;/span&gt;.tar &lt;span class="nv"&gt;%1&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;%time%&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;echo&lt;/span&gt;    stop &lt;span class="nv"&gt;%b%&lt;/span&gt; &amp;gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;tar_log&lt;/span&gt;.txt
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;echo&lt;/span&gt; stop &lt;span class="nv"&gt;%b%&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;/F&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;usebackq&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;%%s&lt;/span&gt; in (&lt;span class="sb"&gt;`call .\timecalc.cmd &amp;quot;%b%&amp;quot; &amp;quot;%a%&amp;quot;`&lt;/span&gt;) &lt;span class="k"&gt;do&lt;/span&gt; @&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;delta&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;%%s&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;echo&lt;/span&gt;    &lt;span class="nv"&gt;%delta%&lt;/span&gt; &amp;gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;tar_log&lt;/span&gt;.txt
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;echo&lt;/span&gt; packed &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;%delta%&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Аналогичным образом написал почти то же для распаковки, поправив пару строчек.&lt;/p&gt;
&lt;p&gt;Конечно, можно кое-что оптимизировать, например, все вычисления с константами сделать на калькуляторе (или в уме), преобразование времени в сотые доли секунды вынести в &amp;laquo;функцию&amp;raquo; и вызывать ее через &lt;code&gt;call&lt;/code&gt;, но так удобочитаемее, а на скорость выполнения влияет мало. Еще можно вместо своры собак (&lt;code&gt;@&lt;/code&gt;) поставить один раз в начале файла &lt;code&gt;@echo off&lt;/code&gt;, дело вкуса. И, конечно, можно повнимательнее относиться к регистру символов и писать либо везде прописными, либо везде строчными. Но, как уж получилось&amp;hellip;&lt;/p&gt;
&lt;p&gt;Возможности команд Windows (тяжелое наследие DOS), конечно, довольно ограничены, но даже с их помощью можно делать интересные и полезные штучки. Вот только иногда фиг догадаешься, описание какой команды для твоей цели нужно смотреть и где именно искать&amp;hellip;&lt;/p&gt;</summary><category term="bat/cmd"></category><category term="windows"></category></entry><entry><title>Tar и «неправильная» кодировка имен файлов</title><link href="http://romeogolf.github.io/tar-and-encoding.html" rel="alternate"></link><updated>2016-03-28T20:00:00+05:00</updated><author><name>RomeoGolf</name></author><id>tag:romeogolf.github.io,2016-03-28:tar-and-encoding.html</id><summary type="html">&lt;p&gt;Возникла задача более-менее регулярного переноса большого объема мелких файлов с одного компьютера на другой. Копирование напрямую хоть по сети, хоть через внешний накопитель занимает неприличное время. Желательно эту подборку как-то упаковать. Можно даже совсем без сжатия.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Лирическое отступление&lt;/dt&gt;
&lt;dd&gt;Подобная задача хорошо знакома тем, кто регулярно выполняет резервное копирование, но малознакома большинству средних пользователей, в том числе и мне. Однако ж бывают случаи и для нас, не-админов. Во-первых, я пользуюсь расширением ScrapBook для браузера Mozilla FireFox и регулярно переношу накопленную полезную информацию из сети на те компьютеры, которыми пользуюсь при отсутствии сети. Это ноутбук, который со мной обычно там, где интернетов нет в принципе, а раньше и комп на работе, где интернету нету по велению свыше, впрочем, теперь туда с флэшками нельзя. Во-вторых, это кэш замечательной программы SAS Планета, для тех же условий, например, на ноутбуке в путешествиях.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Для такой цели (с учетом некритичности сжатия данных) трудно придумать что-нибудь лучше инструмента, специально для этого дела разработанного &amp;mdash; tar. На больших наборах мелких файлов он уверенно обгоняет предпочитаемый мной в виндах 7zip без сжатия. Только что загнал в два архива &amp;mdash; tar и 7z &amp;mdash; папку с кучей мелочи 1,2 Гб: 6:29 против 15:49 (минут:секунд).  Причем в подборке gnuwin32 имеется реализация tar под винду, помимо кучи других вкусностей, которые в Linux есть &amp;laquo;из коробки&amp;raquo;.&lt;/p&gt;
&lt;p&gt;Однако, tar имеет одну неприятную особенность. Ежели, к примеру, запаковать в 7zip кучку файлов с кириллическими именами в винде, они нормально, по-русски, распакуются в Linux. И, что характерно, наоборот. А то, что упаковано в tar, будет распаковано в другой системе с непонятным набором символов вместо имен. По крайней мере, если винда все еще XP.&lt;/p&gt;
&lt;p&gt;Более того, если загнать в tar упомянутую кучку в XP, то она и в XP распакуется с неправильными именами.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Лирическое отступление&lt;/dt&gt;
&lt;dd&gt;Непосредственно для данных ScrapBook и тайлов SAS Планеты это не проблема, там нет кириллицы в именах файлов. Однако при экспорте пачки файлов из ScrapBook они сохраняются в папках, у которых имена совпадают с заголовком страницы, а это может быть и кириллица. Да и вообще, случаи разные бывают&amp;hellip; Если есть проблема, хотелось бы иметь наготове способ решения.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Поиском по сети наткнулся на &lt;a href="http://baltazar-bz.blogspot.ru/2011/02/repair-filename-encoding-in-tar.html"&gt;блог&lt;/a&gt;, автор которого предложил решение, основанное на ответе на &lt;a href="http://superuser.com/"&gt;superuser.com&lt;/a&gt;, а конкретно &lt;a href="http://www.superuser.com/questions/60379/how-can-i-create-a-zip-tgz-in-linux-such-that-windows-has-proper-filenames/190786#190786"&gt;здесь&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Решение требует Python, он у меня есть, третий. Точнее, 3.3, потому что на одном из компьютеров, которыми я пользуюсь, стоит WinXP, а там версия 3.3 &amp;mdash; последнее, что можно установить. На домашней семерке то же самое, чтобы не было путаницы при переносе кода. &lt;/p&gt;
&lt;p&gt;Сперва я попробовал запустить предложенный скрипт не думая, просто скопировал код в py-файл и запустил. Ну, конечно, не получилось. Сперва была ошибка, связанная с тем, что в третьем питоне функция print &amp;mdash; именно функция и требует скобочек, а потом мне в консоли сказали, что не знают такую фигню, как unicode().&lt;/p&gt;
&lt;p&gt;Давненько я не общался с питонами, полез в справку. Что делать с unicode(), я так и не нашел, зато нашел справку по tarfile и обнаружил, что среди аргументов он принимает еще и encoding. И скрипт сразу упростился:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/python3&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tarfile&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;usage: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; &amp;lt;tar archive&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;arhive_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;archive_encoding&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;cp1251&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;#archive_encoding = &amp;#39;utf-8&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;tar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tarfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;arhive_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bufsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;archive_encoding&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;tar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extractall&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;tar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Запускается в винде с именем архива в аргументе: &lt;code&gt;python &amp;lt;имя скрипта&amp;gt;.py &amp;lt;имя архива&amp;gt;.tar&lt;/code&gt;. 
&lt;code&gt;archive_encoding = 'cp1251'&lt;/code&gt; для распаковки (в винде и линуксе) таров, упакованных в винде, &lt;code&gt;archive_encoding = 'utf-8'&lt;/code&gt; для распаковки в винде упакованных в Linux. Распаковывается с русскими именами файлов.
Попробовал в Linux &amp;mdash; тоже работает. Упакованные в Windows тары при открытии, скажем, в mc или распакованные через tar имеют битую кириллическую кодировку, а этим скриптом открываются нормально.&lt;/p&gt;
&lt;p&gt;Кстати, если py-скрипт написан в Windows, то для запуска его в Linux нужно не забыть сменить формат файла на юниксовый, в смысле символов конца строки/возврата каретки. GVIM делает это очень просто: &lt;code&gt;:set fileformat=unix&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Надо сказать, что Archive Manager (кажется, он в Debian Jessi работает архивариусом по умолчанию) открывает tar-архивы с правильной кодировкой, даже запакованные в Windows, а в винде 7zip открывает упакованное под линем тоже нормально. Но tar, даже в питоновом варианте, работает побыстрее, как мне показалось. Честно говоря, тут врямя я не засекал. Кроме того, 7zip в Windows коряво распаковывает tar-архивы с кириллическими именами, запакованными в этой же системе. &lt;/p&gt;
&lt;p&gt;Я понимаю, что под задачу надо подбирать инструмент, требующий минимум извращений и издевательств, но случаи бывают разные. Например, тяжелое наследие прошлого или чужие данные, на подготовку которых уже повлиять нельзя, а использовать надо.&lt;/p&gt;</summary><category term="tar"></category><category term="linux"></category><category term="windows"></category></entry><entry><title>Реанимация мыши</title><link href="http://romeogolf.github.io/reanimouse.html" rel="alternate"></link><updated>2016-03-15T20:00:00+05:00</updated><author><name>RomeoGolf</name></author><id>tag:romeogolf.github.io,2016-03-15:reanimouse.html</id><summary type="html">&lt;p&gt;Когда-то довольно давно подарили мне на день рождения мышь. В смысле, манипулятор &amp;laquo;мышь&amp;raquo;. Марки Defender, модели Zurich, беспроводную. Попробовал я, и мне понравилось. Прибор крупный, под мою ладонь. Довольно эргономичный, хоть поначалу и непривычный. Кнопки тихие. Индикатор дохнущих батареек: сквозь корпус помаргивает красный светодиод. Двух &amp;laquo;пальчиков&amp;raquo; хватает очень надолго &amp;mdash; не засекал, но по ощущениям примерно где-то на год. Причем, батарейки ставятся в параллель, для емкости, и можно поставить одну. Ролик кроме прочего еще и качается вправо-влево, позволяя прокручивать широкие страницы по горизонтали. Возле ролика кнопка переключения разрешения, изменяющая скорость курсора вдвое. Один недостаток могу отметить: &amp;laquo;резиновое&amp;raquo; тонюсенькое покрытие облезло чуть ли не в первую же неделю, и ладно бы целиком, а то только в тех местах, где оно как раз уместно, придавая неряшливый вид. Причем, ободрать его полностью не получилось, местами оно сидит весьма прочно, а &amp;laquo;шкуркой&amp;raquo; скрести не хотелось бы.&lt;/p&gt;
&lt;p&gt;Фото мыши справа, сверху и снизу. Фотки предпросмотра кликабельны, ссылаются на полноразмерные варианты, которые &amp;laquo;весят&amp;raquo; неплохо. Объекты на этих фото, а также на фото дальше по тексту, черные, так что на мониторах с приглушенной ниже 50% яркостью могут быть не видны детали.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://romeogolf.github.io/images/mouse/mouse_right.jpg" title="мышь, вид справа"&gt;&lt;img alt="Мышь, вид справа" src="http://romeogolf.github.io/images/mouse/preview/pre_mouse_right.jpg" title="мышь, вид справа" /&gt;&lt;/a&gt;
&lt;a href="http://romeogolf.github.io/images/mouse/mouse_top.jpg" title="мышь, вид сверху"&gt;&lt;img alt="Мышь, вид сверху" src="http://romeogolf.github.io/images/mouse/preview/pre_mouse_top.jpg" title="мышь, вид сверху" /&gt;&lt;/a&gt;
&lt;a href="http://romeogolf.github.io/images/mouse/mouse_bottom.jpg" title="мышь, вид снизу"&gt;&lt;img alt="Мышь, вид снизу" src="http://romeogolf.github.io/images/mouse/preview/pre_mouse_bottom.jpg" title="мышь, вид снизу" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Короче, мышь сама по себе удобная, а у отсутствия проводов есть два серьезных для меня плюса: во-первых, клавиатура у меня на выдвижной полочке, и можно, не заморачиваясь с проводами, легко переложить мышь с этой полочки на стол и обратно; во-вторых, во время уборки мышь вместе с ковриком можно легко снять со стола, чтобы вытереть пыль, а не передвигать с непротертого места на протертое.&lt;/p&gt;
&lt;p&gt;Увы, у всего есть свой срок. И компьютерные мыши живут ненамного дольше своих живых &amp;laquo;сестер&amp;raquo;. Моя протянула еще вполне прилично &amp;mdash; лет пять. А потом перестал работать ролик. Именно в роли ролика, как кнопка &amp;mdash; работал. Сперва мне показалось, что дело в &amp;laquo;шине&amp;raquo; &amp;mdash; на это колесо натянуто резиновое колечко, и я думал, что оно проскальзывает. Снял колесико, с него снял &amp;laquo;шину&amp;raquo;, отмыл все от смазки, капнул клея, натянул все назад. Не помогло. Пришлось разбираться глубже.&lt;/p&gt;
&lt;p&gt;Ролик этой мыши, как я уже упоминал, многофункциональный: крутится, нажимается, качается вправо-влево. Поэтому он закреплен в забавной такой пластиковой качалке, которая закрепляется буквально в одной точке, имеет три толкателя для кнопок и &amp;laquo;уключины&amp;raquo; для оси ролика. Так вот, ось ролика закреплена в правой (кнопками вперед) &amp;laquo;уключине&amp;raquo; и обрывается слева &amp;laquo;внутри&amp;raquo; ролика, у которого, как у любого приличного колеса, есть &amp;laquo;вылет&amp;raquo;. В левой же &amp;laquo;уключине&amp;raquo; закреплена ось датчика поворота, имеющего с другой от оси стороны шлиц под шестигранник. Вторая же половина оси ролика заточена под этот самый шестигранник и входит в шлиц датчика. То есть, при сборке надо вставить левую полуось ролика в датчик, а потом все это воткнуть в качалку, которая &amp;laquo;уключинами&amp;raquo; прижмет ролик с датчиком друг к другу.&lt;/p&gt;
&lt;p&gt;Мышь со снятой и перевернутой крышкой&lt;/p&gt;
&lt;p&gt;&lt;a href="http://romeogolf.github.io/images/mouse/mouse_topless.jpg" title="мышь со снятой крышкой"&gt;&lt;img alt="Мышь со снятой крышкой" src="http://romeogolf.github.io/images/mouse/preview/pre_mouse_topless.jpg" title="мышь со снятой крышкой" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Мышь без крышки с вынутой качелькой в сборе&lt;/p&gt;
&lt;p&gt;&lt;a href="http://romeogolf.github.io/images/mouse/mouse_wheel.jpg" title="мышь со снятой качелькой"&gt;&lt;img alt="Мышь со снятой качелькой" src="http://romeogolf.github.io/images/mouse/preview/pre_mouse_wheel.jpg" title="мышь со снятой качелькой" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Так вот, левая шестигранная полуось за несколько лет сточилась напрочь, до состояния полукруглой шишечки. Ролик прокручивается вхолостую, без характерных тактильных &amp;laquo;щелчков&amp;raquo;. Жаль.&lt;/p&gt;
&lt;p&gt;Пошел и купил новую, Oculus какую-то. И тут внезапно выяснилось, что выбор нормальной беспроводной мыши &amp;mdash; задача та еще! Потому что фигня это, а не мышь. Оказывается, у мышей бывают такие громкие кнопки, что клацаньем будят годовалого ребенка! Бесит&amp;hellip; Оказывается, у беспроводных мышей бывает спящий режим, из которого надо выводить нажатием на кнопку! Оказывается, нажатие кнопки с целью разбудить мышь сразу же и срабатывает, то есть, правая кнопка вызывает меню, а левая, если курсор был над, скажем, ссылкой, лупит по этой ссылке и вызывает переход. А я-то хотел просто &amp;laquo;разбудить&amp;raquo; эту тварь. Бесит&amp;hellip; Да еще и привычка дурацкая появилась &amp;mdash; подходя к компьютеру после перерыва сперва щелкать кнопкой вхолостую и дергать мышью, проверяя состояние. Привычка работает на всех мышах, включая проводные. Бесит&amp;hellip; Оказывается, этот недоделанный спящий режим ни разу не выполняет основную свою функцию &amp;mdash; не экономит батарейки, которых хватает с трудом на пару-тройку месяцев, и это при том, что я не геймер. Бесит&amp;hellip;&lt;/p&gt;
&lt;p&gt;Полез в интернеты в поисках нормального мыша. Defender Zurich (в котором я уверен) снят с производства. В описаниях на остальные, как и в отзывах на них, в 99% случаев никто не пишет о том, надо ли выводить из спящего режима кнопками. Видимо, потому что это нормально, никого не удивляет и не является особенностью. Продавцы-&amp;laquo;консультанты&amp;raquo; нифига про свой товар не знают, проверить не могут (большинство мышей в блистере). Большинство мышей по отзывам с громкими кнопками. Мыши с приличными характеристиками, на которые можно надеяться, обычно геймерские, с кучей наворотов, которые мне вовсе не нужны, но их придется оплачивать, а хотелось бы уложиться хотя бы в тысячу-полторы. А так отдашь две-три, а окажется фуфло, будет очень обидно.&lt;/p&gt;
&lt;p&gt;А старенькую-то полуразобранную мышь я не выкинул. Можно же с нее кое-какие детальки снять, те же кнопки, корпус, опять же, куда-нибудь приспособить&amp;hellip; Но не успел пока. Достал из загашника, стал размышлять. Обмерил ролик штангелем, попробовал покрутить датчик шестигранной отверткой&amp;hellip; Надо пробовать чинить. Набросал &amp;laquo;чертеж&amp;raquo; (да простят меня инженеры-конструктора) ролика карандашом:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://romeogolf.github.io/images/mouse/wheel_drawing.png" title="Чертеж ролика"&gt;&lt;img alt="Чертеж ролика" src="http://romeogolf.github.io/images/mouse/preview/pre_wheel_drawing.png" title="Чертеж ролика" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Нашел болтик трехмиллиметрового диаметра, такой, чтобы резьба была только до середины, да еще и чуть тоньше нерезьбовой части (хотя это и не принципиально, но чуть удобнее). Зажал в тисочках, взял инструмент, который официально называется &amp;laquo;микрогравер&amp;raquo;, но я буду называть его дремелем. Во-первых, очень похож, и плевать, что натуральный китаец. Во-вторых, не очень-то он &amp;laquo;микро&amp;raquo;. В-третьих, гравировать я им ничего никогда не собираюсь. &lt;/p&gt;
&lt;p&gt;Этим самым дремелем отрезал нерезьбовую часть на два миллиметра, загладил край среза этакой фасочкой. Перевернул, срезал резьбу, оставив ее на четыре миллиметра. Край резьбы сточил на условный шестигранник. Корявенький, но с гранями, достаточными для зацепа граней шлица датчика.&lt;/p&gt;
&lt;p&gt;Взял ролик. Дремелем сточил внутреннюю испорченную левую полуось до &amp;laquo;установочной плоскости колесного диска&amp;raquo;, наколол шилом центр, типа, накернил. Так же накернил с торца правой полуоси. Специально не стал стачивать эту полуось, хотя она уйдет вся в результате сверления, но при первом проходе тонким сверлом полуось помогла выдержать вертикаль (станочка-то нет у меня, всё руками). Высверлил двухмиллиметровым сверлом насквозь, по чуть-чуть с обеих сторон (однако, чуть подплавил пластмассу). Срезал скальпелем остатки просверленной правой полуоси. Обнаружил, что скосил центр немного. Впрочем, это было ожидаемо, потому и брал сперва тонкое сверло. Поправил отверстие &amp;mdash; расширил в нужном направлении до трех миллиметров шарошкой, тем же дремелем.&lt;/p&gt;
&lt;p&gt;Ну и в конце вкрутил железную ось в подготовленный ролик, гладкой частью снаружи, резьбой и шестигранником &amp;mdash; внутри.&lt;/p&gt;
&lt;p&gt;Собрал &amp;mdash; работает!!! Чрезвычайно доволен. И мышь приличная-привычная реанимировалась, и денежку сэкономил (практически окупил дремель &amp;mdash; он был куплен дешевле мыши, меньше тысячи). &lt;/p&gt;
&lt;p&gt;Процесс фотографировать не стал, потому что не был уверен в результате, а в случае неудачи иметь собственноручно задокументированный облом довольно обидно. Короче, чтобы не сглазить. Работы было примерно на полчаса. Без дремеля заняло бы, думаю, полдня, не меньше. И да, в конце пришлось еще к датчику вращения подпаять отлетевшие провода, два из трех. Вот фото результата:&lt;/p&gt;
&lt;p&gt;Качелька, ролик и датчик в сборе, вид слева&lt;/p&gt;
&lt;p&gt;&lt;a href="http://romeogolf.github.io/images/mouse/ready-fitted_left.jpg" title="Качелька, ролик и датчик, вид слева"&gt;&lt;img alt="Качелька, вид слева" src="http://romeogolf.github.io/images/mouse/preview/pre_ready-fitted_left.jpg" title="Качелька, ролик и датчик, вид слева" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Качелька, ролик и датчик в сборе, вид справа&lt;/p&gt;
&lt;p&gt;&lt;a href="http://romeogolf.github.io/images/mouse/ready-fitted_right.jpg" title="Качелька, ролик и датчик, вид справа"&gt;&lt;img alt="Качелька, вид справа" src="http://romeogolf.github.io/images/mouse/preview/pre_ready-fitted_right.jpg" title="Качелька, ролик и датчик, вид справа" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Качелька, датчик и ролик со снятой &amp;laquo;шиной&amp;raquo;. Ролик со стороны внешней полуоси, датчик со стороны своей полуоси&lt;/p&gt;
&lt;p&gt;&lt;a href="http://romeogolf.github.io/images/mouse/swing_sensor_disk_tyre.jpg" title="качелька, датчик и ролик без шины"&gt;&lt;img alt="Качелька, датчик, ролик" src="http://romeogolf.github.io/images/mouse/preview/pre_swing_sensor_disk_tyre.jpg" title="качелька, датчик и ролик без шины" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Качелька, датчик со стороны шестигранного гнезда и ролик со стороны внутренней шестигранной полуоси&lt;/p&gt;
&lt;p&gt;&lt;a href="http://romeogolf.github.io/images/mouse/swing_wheel_sensor_hex.jpg" title="колесико и датчик шестигранником"&gt;&lt;img alt="Качелька, датчик, ролик - 2" src="http://romeogolf.github.io/images/mouse/preview/pre_swing_wheel_sensor_hex.jpg" title="колесико и датчик шестигранником" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Качелька, рядом ролик с датчиком в сборе со стороны датчика&lt;/p&gt;
&lt;p&gt;&lt;a href="http://romeogolf.github.io/images/mouse/swing_wheel-assembled.jpg" title="качелька и ролик в сборе"&gt;&lt;img alt="Качелька, ролик" src="http://romeogolf.github.io/images/mouse/preview/pre_swing_wheel-assembled.jpg" title="качелька и ролик в сборе" /&gt;&lt;/a&gt;&lt;/p&gt;</summary><category term="ремонт"></category><category term="своими руками"></category></entry><entry><title>Linux — одна победа, одна ничья и одно поражение.</title><link href="http://romeogolf.github.io/linux-win_drawn_lose.html" rel="alternate"></link><updated>2016-03-09T20:00:00+05:00</updated><author><name>RomeoGolf</name></author><id>tag:romeogolf.github.io,2016-03-09:linux-win_drawn_lose.html</id><summary type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#_1"&gt;Загадка монтирования дисков&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;Выключение кнопкой питания&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#eclipse"&gt;Обновление Eclipse&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;Продолжая движение к смене статуса Debian на домашней машине в качестве основной системы, я наткнулся на очередные задачи, часть из которых получается решить, часть решается лишь частично, а часть остается непобедимой.&lt;/p&gt;
&lt;h2 id="_1"&gt;Загадка монтирования дисков&lt;/h2&gt;
&lt;p&gt;В частности, при загрузке системы я заметил загадочную хрень в виде серии странных сообщений, типа&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;systemd-fstab-generator&lt;span class="o"&gt;[&lt;/span&gt;175&lt;span class="o"&gt;]&lt;/span&gt;: Failed to create mount unit file
/run/systemd/generator/media-ntfs&lt;span class="se"&gt;\x&lt;/span&gt;2dsdb2.mount, as it already exists. 
Duplicate entry in /etc/fstab?
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Причем, таких строчек от загрузки к загрузке становилось больше.&lt;/p&gt;
&lt;p&gt;Это при том, что у меня диски, заполненные разной информацией еще в винде, подключаются с использованием fstab, где я прописал их вручную. Открываю fstab и вижу, что там действительно появилась куча строк, которые я не писал, причем, почти все встречаются по два-три раза в произвольном порядке. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# /etc/fstab: static file system information.
#
# Use &amp;#39;blkid&amp;#39; to print the universally unique identifier for a
# device; this may be used with UUID= as a more robust way to name devices
# that works even if disks are added and removed. See fstab(5).
#
# &amp;lt;file system&amp;gt; &amp;lt;mount point&amp;gt;   &amp;lt;type&amp;gt;  &amp;lt;options&amp;gt;       &amp;lt;dump&amp;gt;  &amp;lt;pass&amp;gt;
# / was on /dev/sdb3 during installation
UUID=6279-419e-b679 /               ext4    errors=remount-ro 0       1
/dev/sr0        /media/cdrom0   udf,iso9660 user,noauto     0       0
/dev/sda5   /mnt/WORK   ntfs    auto,exec,rw,nouser,async,iocharset=utf8,notail,relatime 0 0
/dev/sda6   /mnt/STORAGE    ntfs    auto,exec,rw,nouser,async,iocharset=utf8,notail,relatime 0 0
/dev/sda7   /mnt/FILES  ntfs    auto,exec,rw,nouser,async,iocharset=utf8,notail,relatime 0 0
/dev/sda8   /mnt/MISC   ntfs    auto,exec,rw,nouser,async,iocharset=utf8,notail,relatime 0 0
/dev/sdb2   /mnt/FILES2 ntfs    auto,exec,rw,nouser,async,iocharset=utf8,notail,relatime 0 0
/dev/sda7 /media/ntfs-sda7 ntfs-3g rw,noauto,dmask=000,fmask=000,user,locale=ru_RU.utf8,allow_other 0 0
/dev/sdb1 /media/ntfs-sdb1 ntfs-3g rw,noauto,dmask=000,fmask=000,user,locale=ru_RU.utf8,allow_other 0 0
/dev/sda5 /media/ntfs-sda5 ntfs-3g rw,noauto,dmask=000,fmask=000,user,locale=ru_RU.utf8,allow_other 0 0
/dev/sdb2 /media/ntfs-sdb2 ntfs-3g rw,noauto,dmask=000,fmask=000,user,locale=ru_RU.utf8,allow_other 0 0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;И вот те строки внизу, которые монтируются в /media/, размножаются просто неприлично.&lt;/p&gt;
&lt;p&gt;Жуть! Стер. Через пару загрузок (комп включен отнюдь не 24/7) вижу ту же картину и в консоли при загрузке, и в файле fstab. Что за дела?&lt;/p&gt;
&lt;p&gt;Полез в интернеты, ибо являюсь вполне себе чайником и не представляю вообще, откуда может такое быть. Формулировал вопрос и на русском, и на английском, и в гугле, и на stackoverflow &amp;mdash; ничего полезного. &lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Лирическое отступление&lt;/dt&gt;
&lt;dd&gt;Сам я, правда, вопрос на форумах не задавал, так как давно понял: если на мой вопрос есть ответ, то во всякого рода интернетах его уже обязательно кто-то задал, и кто-то, соответственно, ответил. А если это не так, то и на вопрос, заданный лично мною, тоже никто не ответит. Это правило подтверждалось несколько раз. Ни на один мой вопрос на форумах не было получено ни одного внятного ответа. А чаще &amp;mdash; даже и невнятного. С учетом того, что перед вопрошанием я сперва искал ответ самостоятельно.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;На форумах, однако, наметил несколько направлений возможного поиска в виде английских буквосочетаний:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;systend-fstab-generator&lt;/li&gt;
&lt;li&gt;hotplug&lt;/li&gt;
&lt;li&gt;automount&lt;/li&gt;
&lt;li&gt;hal&lt;/li&gt;
&lt;li&gt;halevt&lt;/li&gt;
&lt;li&gt;kudzu&lt;/li&gt;
&lt;li&gt;dracut (systemd-drakut)&lt;/li&gt;
&lt;li&gt;udev (systemd-udevd)&lt;/li&gt;
&lt;li&gt;fstab-sync&lt;/li&gt;
&lt;li&gt;submount&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Почитал про упомянутые штуки. Показалось, что udev &amp;mdash; наиболее вероятная кандидатура пакостника. Однако поиск по системным логам через &lt;code&gt;grep 'fstab'&lt;/code&gt; не дал ничего, и я не понял, кто и когда туда пишет.&lt;/p&gt;
&lt;p&gt;Тогда, предполагая, что этот &amp;laquo;кто-то&amp;raquo; пишет, основываясь на своих настройках, которые, в свою очередь, лежат где-то в &lt;code&gt;/etc/&lt;/code&gt;, запустил поиск файла, содержащего &lt;code&gt;'fstab'&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;grep -r &lt;span class="s2"&gt;&amp;quot;fstab&amp;quot;&lt;/span&gt; /etc/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;и самым интересным в результатах поиска был &lt;code&gt;/etc/udev/rules.d/10-automount.rules&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#ACTION==&amp;quot;add&amp;quot; KERNEL==&amp;quot;sd[a-z][0-9]&amp;quot; RUN+=&amp;quot;/bin/mkdir -p /mnt/%k&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;#ACTION==&amp;quot;add&amp;quot; KERNEL==&amp;quot;sd[a-z][0-9]&amp;quot; RUN+=&amp;quot;/bin/mount -o uid=1000 /dev/%k /mnt/%k&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;#ACTION==&amp;quot;remove&amp;quot; KERNEL==&amp;quot;sd[a-z][0-9]&amp;quot; RUN+=&amp;quot;/bin/rmdir /mnt/%k&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;#ACTION==&amp;quot;add&amp;quot; KERNEL==&amp;quot;sd[a-z][0-9]&amp;quot; RUN+=&amp;quot;/bin/mkdir -p /mnt/%E{ID_VENDOR}_%E{ID_MODEL}_%n&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;#ACTION==&amp;quot;add&amp;quot; KERNEL==&amp;quot;sd[a-z][0-9]&amp;quot; RUN+=&amp;quot;/bin/mount -o uid=1000 /dev/%k /mnt/%E{ID_VENDOR}_%E{ID_MODEL}_%n&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;#ACTION==&amp;quot;remove&amp;quot; KERNEL==&amp;quot;sd[a-z][0-9]&amp;quot; RUN+=&amp;quot;/bin/rmdir /mnt/%E{ID_VENDOR}_%E{ID_MODEL}_%n&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;# монтирование съемных накопителей&lt;/span&gt;
&lt;span class="nv"&gt;KERNEL&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sd[a-z]&amp;quot;&lt;/span&gt;, &lt;span class="nv"&gt;GOTO&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;do-disk-rules&amp;quot;&lt;/span&gt;
KERNEL!&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sd[a-z][0-9]&amp;quot;&lt;/span&gt;, &lt;span class="nv"&gt;GOTO&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;end-of-file&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;LABEL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;do-disk-rules&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;ACTION&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;add&amp;quot;&lt;/span&gt;, ENV&lt;span class="o"&gt;{&lt;/span&gt;ID_USB_DRIVER&lt;span class="o"&gt;}=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;usb-storage&amp;quot;&lt;/span&gt;, &lt;span class="nv"&gt;GROUP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;storage&amp;quot;&lt;/span&gt;
IMPORT&lt;span class="o"&gt;{&lt;/span&gt;program&lt;span class="o"&gt;}=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/sbin/blkid -o udev -p %N&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;ACTION&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;remove&amp;quot;&lt;/span&gt;, ENV&lt;span class="o"&gt;{&lt;/span&gt;ID_FS_TYPE&lt;span class="o"&gt;}&lt;/span&gt;!&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;, RUN+&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/bin/sed -i &amp;#39;/\/dev\/%k /d&amp;#39; /etc/fstab&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;ACTION&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;remove&amp;quot;&lt;/span&gt;, ENV&lt;span class="o"&gt;{&lt;/span&gt;ID_FS_TYPE&lt;span class="o"&gt;}&lt;/span&gt;!&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;, RUN+&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/bin/rmdir /media/&lt;/span&gt;&lt;span class="nv"&gt;$env&lt;/span&gt;&lt;span class="s2"&gt;{ID_FS_TYPE}-%k&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;ACTION&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;add&amp;quot;&lt;/span&gt;, ENV&lt;span class="o"&gt;{&lt;/span&gt;ID_FS_TYPE&lt;span class="o"&gt;}&lt;/span&gt;!&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;, RUN+&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/bin/mkdir -p /media/&lt;/span&gt;&lt;span class="nv"&gt;$env&lt;/span&gt;&lt;span class="s2"&gt;{ID_FS_TYPE}-%k&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;# монтирование раздела fat32&lt;/span&gt;
&lt;span class="nv"&gt;ACTION&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;add&amp;quot;&lt;/span&gt;, ENV&lt;span class="o"&gt;{&lt;/span&gt;ID_FS_TYPE&lt;span class="o"&gt;}==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;vfat&amp;quot;&lt;/span&gt;, RUN+&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/bin/sed -i &lt;/span&gt;
&lt;span class="s2"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="s2"&gt;\/dev/%k /media/&lt;/span&gt;&lt;span class="nv"&gt;$env&lt;/span&gt;&lt;span class="s2"&gt;{ID_FS_TYPE}-%k vfat rw,noauto,noatime,dmask=000,user,fmask=000,iocharset=utf8 0 0&amp;#39; /etc/fstab&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;# монтирование раздела ntfs&lt;/span&gt;
&lt;span class="nv"&gt;ACTION&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;add&amp;quot;&lt;/span&gt;, ENV&lt;span class="o"&gt;{&lt;/span&gt;ID_FS_TYPE&lt;span class="o"&gt;}==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ntfs&amp;quot;&lt;/span&gt;, RUN+&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/bin/sed -i &lt;/span&gt;
&lt;span class="s2"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="s2"&gt;\/dev/%k /media/&lt;/span&gt;&lt;span class="nv"&gt;$env&lt;/span&gt;&lt;span class="s2"&gt;{ID_FS_TYPE}-%k ntfs-3g rw,noauto,dmask=000,fmask=000,user,locale=ru_RU.utf8,allow_other 0 0&amp;#39; /etc/fstab&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;# монтирование прочих ФС&lt;/span&gt;
&lt;span class="nv"&gt;ACTION&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;add&amp;quot;&lt;/span&gt;, ENV&lt;span class="o"&gt;{&lt;/span&gt;ID_FS_TYPE&lt;span class="o"&gt;}&lt;/span&gt;!&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;, ENV&lt;span class="o"&gt;{&lt;/span&gt;ID_FS_TYPE&lt;span class="o"&gt;}&lt;/span&gt;!&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ntfs|vfat&amp;quot;&lt;/span&gt;, 
RUN+&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/bin/sed -i &amp;#39;&lt;/span&gt;&lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="s2"&gt;\/dev/%k /media/&lt;/span&gt;&lt;span class="nv"&gt;$env&lt;/span&gt;&lt;span class="s2"&gt;{ID_FS_TYPE}-%k &lt;/span&gt;&lt;span class="nv"&gt;$env&lt;/span&gt;&lt;span class="s2"&gt;{ID_FS_TYPE}  defaults,user 0 0&amp;#39; /etc/fstab&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;LABEL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;end-of-file&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Строчка в правилах монтирования однозначно соответствовала тому, что появляется в fstab. Возможно, авторы пакета, создавая настройки по умолчанию, предполагали, что основным диском будет hda, а sda &amp;mdash; уже всякие флешки и все такое. А у меня два SATA-винчестера, и флешка становится sdc. Ну что же, пакостник найден, надо его слегка укротить. Сперва я сделал первое, что пришло в голову: вписал  после &lt;code&gt;# монтирование съемных накопителей&lt;/code&gt; пару строк:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# монтирование съемных накопителей&lt;/span&gt;
&lt;span class="nv"&gt;KERNEL&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sda[0..9]&amp;quot;&lt;/span&gt;, &lt;span class="nv"&gt;GOTO&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;end-of-file&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;KERNEL&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sdb[0..9]&amp;quot;&lt;/span&gt;, &lt;span class="nv"&gt;GOTO&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;end-of-file&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;KERNEL&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sd[a-z]&amp;quot;&lt;/span&gt;, &lt;span class="nv"&gt;GOTO&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;do-disk-rules&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;# ... и далее по тексту ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;чтобы при обнаружении первых двух SATA-дисков правила монтирования пропускались. Но буквально парой минут позже понял, что это дурь, и сделал проще &amp;mdash; убрал эти строки, а во всех &lt;code&gt;sd[a-z]&lt;/code&gt; заменил &lt;code&gt;a&lt;/code&gt; на &lt;code&gt;c&lt;/code&gt;: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;KERNEL&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sd[c-z]&amp;quot;&lt;/span&gt;, &lt;span class="nv"&gt;GOTO&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;do-disk-rules&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;И в остальных строках так же. Теперь &lt;code&gt;/ets/fstab&lt;/code&gt; после перезагрузок остается неизменным (даже после автомонтирования флешек), и при загрузке упомянутая ересь тоже не встречается. Одну проблемку решил. Засчитываю победу.&lt;/p&gt;
&lt;h2 id="_2"&gt;Выключение кнопкой питания&lt;/h2&gt;
&lt;p&gt;Фишка, давно ставшая привычной в Windows, довольно удобная. Все-таки, одно движение пальца, хоть и надо тянуться к системнику. Дай, думаю, попробую&amp;hellip; А компьютер вырубился, как будто провод выдернули.&lt;/p&gt;
&lt;p&gt;Полез опять в интернеты. Нашел, что за отслеживание событий, связанных с питанием, отвечает acpi. Убедился, что такой пакет у меня установлен. Настройки в &lt;code&gt;/etc/acpi/powerbtn-acpi-support.sh&lt;/code&gt; посмотрел &amp;mdash; нормально все.&lt;/p&gt;
&lt;p&gt;Там указано, что для совместимости со старыми версиями при наличии в определенных местах старых скриптов все игнорируется и &lt;code&gt;exit 0&lt;/code&gt;, так у меня в тех местах нету нифига лишнего&amp;hellip;&lt;/p&gt;
&lt;p&gt;Тут где-то в интернете (не помню точно, в чьем-то блоге) одному товарищу нужна была обратная задача: добиться отсутствия реакции на кнопку, и он в упомянутом sh-файле закрыл предпоследнюю строку:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;/sbin/shutdown -h -P now &lt;span class="s2"&gt;&amp;quot;Power button pressed&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Сделал так же. Перезапустил демон:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo acpid restart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ничего не изменилось. Вернул строчку обратно (раскомментировал) &amp;mdash; заработало! Почти&amp;hellip; &lt;/p&gt;
&lt;p&gt;В общем, после этих телодвижений, имевших в сумме чистый ноль, по нажатию кнопки питания компьютер стал засыпать. Ну, и просыпаться, конечно. Почитал повнимательнее скрипт &amp;mdash; а там упоминаются настройки среды, мол, они тоже учитываются. Слазил в настройки Гнома (Приложения &amp;ndash; Системные &amp;ndash; Дополнительные параметры &amp;ndash; Электропитание), а в них для параметров питания указано &amp;laquo;Hibernate&amp;raquo; по кнопке питания. Изменил на &amp;laquo;Shutdown&amp;raquo;. Теперь компьютер засыпает по кнопке сна на клавиатуре и выключается по кнопке питания на системнике.&lt;/p&gt;
&lt;p&gt;Очень странно. Единственное мое активное действие (помимо закрытия и открытия строчки в скрипте) &amp;mdash; перезапуск демона acpid, но я посмотрел логи &lt;code&gt;grep 'acpi'&lt;/code&gt; и не нашел отличий &amp;laquo;до&amp;raquo; и &amp;laquo;после&amp;raquo;. Он и раньше запускался.&lt;/p&gt;
&lt;p&gt;Загадочно. Вроде, все работает. Вроде, раньше не работало. Вроде, ничего не делал. Засчитываю ничью.&lt;/p&gt;
&lt;h2 id="eclipse"&gt;Обновление Eclipse&lt;/h2&gt;
&lt;p&gt;А вот тут, что называется, косорезик вышел. Поставил Eclipse из репозитория через Synaptic. Встала версия 3.8, и где-то в Help нашел, что это Indigo. И это в наше время, когда космические корабли уже долетели до Марса, и даже до Марса 2, и под виндой у меня стоит 4.5.1. Причем, обновился до нее с Луны довольно просто, указав в нужных местах сервера обновлений и запустив не то установку нового ПО, не то обновление, не то оба по очереди. &lt;/p&gt;
&lt;p&gt;А тут фигушки! Основная часть, которая собственно Eclipse, ставиться наотрез отказалась. Дескать, стоит уже и незачем ставить снова, и неважно, что версия уже новая&amp;hellip; Ну, а все остальные &amp;laquo;запчасти&amp;raquo; зависят от движка и тоже не хотят обновляться. Часа полтора долбился в эту стенку. Потом плюнул, снес Eclipse начисто и скачал с официального сайта tar-архив. Распаковал в домашней папке &amp;mdash; вот и вся установка, все работает. Благо, зависимостей у него особых нет, кроме Java, а с ней я разобрался чуть раньше, снес openjdk и поставил продукт от Oracle. А то под open у меня напрочь отказывались запускаться поделки, которые я наваял еще в винде, те же &amp;laquo;Быки и коровы&amp;raquo;.&lt;/p&gt;
&lt;p&gt;То есть, задача решена, но ни разу не так, как хотелось, а главное &amp;mdash; непонятно, почему не получилось обновить, когда в винде это было несложно. Как-то немного обидно.&lt;/p&gt;</summary><category term="linux"></category></entry><entry><title>«Вы сидели в манто у воды...»</title><link href="http://romeogolf.github.io/manto.html" rel="alternate"></link><updated>2016-03-08T15:00:00+05:00</updated><author><name>RomeoGolf</name></author><id>tag:romeogolf.github.io,2016-03-08:manto.html</id><summary type="html">&lt;p&gt;Вы сидели в манто у воды, любовались прибоем.&lt;br /&gt;
Словно ваш сенбернар, я лежал на траве подле вас.&lt;br /&gt;
Это было давно, там, у берега, нас было двое,&lt;br /&gt;
Тихий свет уходящего дня постепенно угас.&lt;/p&gt;
&lt;p&gt;Забывается все, забываются годы и даты,&lt;br /&gt;
Забываются лица когда-то любимых людей,&lt;br /&gt;
Исчезает из памяти все, что случилось когда-то,&lt;br /&gt;
Но порою всплывает картинка из прожитых дней.&lt;/p&gt;
&lt;p&gt;Вы в манто у воды, я &amp;mdash; у ног, свет морского заката,&lt;br /&gt;
И вокруг &amp;mdash; только шелест прибоя и шорох травы.&lt;br /&gt;
Это было давно, тем не менее, было когда-то,&lt;br /&gt;
Но уже никогда-никогда не вернется, увы…&lt;/p&gt;</summary><category term="стихи"></category></entry><entry><title>Возвращение в Линукс</title><link href="http://romeogolf.github.io/back-to-linux.html" rel="alternate"></link><updated>2016-02-16T20:00:00+05:00</updated><author><name>RomeoGolf</name></author><id>tag:romeogolf.github.io,2016-02-16:back-to-linux.html</id><summary type="html">&lt;p&gt;Я не люблю продукцию компании Microsoft. В особенности, ту ее часть, которая имеет отношение к операционным системам. Не люблю не просто так, за название, а обоснованно, по пунктам. Поэтому уже давно пытаюсь сделать основной операционкой хотя бы дома нечто иное. Ну, то есть, Linux, потому что больше-то и нечего.&lt;/p&gt;
&lt;p&gt;Однако, все время что-нибудь складывается не в ту сторону. Ранние давние попытки были сильно ограничены отсутствием нормального интернета (сначала dial-up, потом GPRS, с оплатой по трафику и без вариантов). Не хватало информации, было грустно с репозиториями (дорого), поэтому ставилось то, что удавалось раздобыть на двух &amp;ndash; шести DVD-дисках, чтобы был сразу более-менее приличный комплект программ в наборе. Попробовал в ту пору RedHat (еще до того, как он стал федориным корем), Alt, Linux XP (еще и такое было), ASP и Mandrake. Такой зоопарк в основном потому, что для обновления проще было поставить заново то новое, что удалось раздобыть, чем обновить то, что есть.&lt;/p&gt;
&lt;p&gt;Времени отнимало массу, а полностью отказаться от Windows дома не получалось все равно, потому что приходилось часть работы делать дома, а на работе &amp;mdash; Windows, а соответствующий софт в Wine не запускался. Да и документы Word в OpenOffice открывались так себе, а сохранялись в вордовский формат еще хуже, особенно с учетом того, что приходилось работать с чужими творениями, а там и таблицы в таблицах, и подстрочные символы через формулу, и 500 стилей&amp;hellip; Или переделывать все по-человечески дня три, или открыть в Word и за две минуты сделать все, что от меня требуется. &lt;/p&gt;
&lt;p&gt;Таким образом, на компьютере две системы, но вторая (при всей нелюбви к первой) не способна заменить первую полностью, а времени и сил на настройку и обслуживание требует больше. Поэтому запускается все реже и реже&amp;hellip;&lt;/p&gt;
&lt;p&gt;Потом Linux стал поинтереснее, а работы на дом поменьше. Опять же, появился безлимит по выделенной линии. Второй системой побывали более свежий Alt, Mandriva и (просто посмотреть, что за ерунда такая) Ubuntu. С учетом того, что в Windows у меня используется в основном софт, портированный из Linux, Mandriva загружалась все чаще &amp;mdash; не было особой разницы, в чем работать. Для интернета продукты от Mozilla, обработка фото &amp;mdash; RawTherapee и GIMP, кодинг &amp;mdash; Lazarus, Java (в Eclipce), Python. Простые тексты &amp;mdash; GVim, посложнее &amp;mdash; OOo. С музыкой и кино проблем стало меньше. Практически перестал дома использовать специфические Windows-программы, нужные по работе. Однако, осталась необходимость иногда дома поработать с документами (Word, естественно), а самое неприятное &amp;mdash; фильм-сканер Acer ScanWit 2720, который со свободным софтом завести у меня не получилось никак, а ставить платный не хотелось потому, что не было ни малейшей уверенности, что деньги не будут на ветер. Никто не мог дать гарантии, заработает ли. Максимум, что у меня получилось, &amp;mdash; сканер определился в системе и отреагировал на программную кнопку извлечения лотка. И даже однажды начал Preview, но не смог закончить.&lt;/p&gt;
&lt;p&gt;Да, Linux к этому времени стал дружелюбнее и способен заменить винду в существенной части случаев. Но остались трудности в настройке &amp;laquo;под себя&amp;raquo;, неполная совместимость софта, сканер не работает&amp;hellip; Кроме того, был примерно годовой период подготовки и сдачи канд. минимума по английскому, сопровождавшийся чтением приличного объема на английском помимо текстов для подготовки к экзамену. А это - ABBYY Lingvo, честно купленный и используемый на нетбуке с WinXP, поскольку извините, но это лучший словарь в электронном виде. В ту пору они (ABBYY) не собирались даже смотреть в сторону Linux, а то, что было в Linux, было существенно хуже. В общем, опять заглохло. Второй системой остался на тот момент Debian.&lt;/p&gt;
&lt;p&gt;И вот в эти выходные и ближайшие к ним пару дней в связи с больничным появилось &amp;laquo;лишнее&amp;raquo; время. Плюс к этому стало еще меньше нужного мне софта, который не имеет аналогов в Linux и не запускается в Wine, пленки существенной частью отсканированы, основной объем переводов-чтения остался позади, а Microsoft с очередной ОС номер десять (которая, что логично, сразу после номера восемь), похоже, совсем края потерял.&lt;/p&gt;
&lt;p&gt;Итак, запустил я Debian. Обновил его до восьмерки jessie. И обнаружил, что слетели все примочки для Gnome, которые я ставил когда-то для красоты, удобства и привычности &amp;mdash; типа аналога панели задач. Опять же, iceweesel, который типа Mozilla firefox, только для Debian, стал показывать очень много букв &amp;laquo;ш&amp;raquo; в самых неожиданных местах, короче, нехорошо у него стало с русификацией. Что удивляет после ухода на UTF8, все-таки, уже довольно давно кончился зоопарк кодировок.&lt;/p&gt;
&lt;p&gt;Добавил новый репозиторий в список для apt-get, обновил софт. Русский в iceweesel наладился. Добавил заодно в него несколько дополнений.&lt;/p&gt;
&lt;p&gt;Поставил pip3, с его помощью &amp;mdash; pelican, markdown. Попробовал в Debian сгенерировать сайт на пеликане, получилось один в один как под виндой, даже проще. Проще &amp;mdash; потому что Python установлен по-человечески, а не как у меня в Windows, и pelican &amp;mdash; это команда безо всяких указаний пути к ней, поэтому &lt;code&gt;pelican content&lt;/code&gt; работает в корне проекта сайта без вопросов. И, кстати, сегодняшний сайт собирается в винде около 6 секунд, а в линуксе &amp;mdash; около одной.&lt;/p&gt;
&lt;p&gt;Поставил еще Git и cups. Начал заводить принтер, Brother HL2040, и появились первые чудеса. Не печатает, зараза! То есть, настройка через web-интерфейс cups прошла быстро и просто, принтер нашелся практически сам, определился, как готовый, принял все настройки, но пробное задание сперва отправлено, потом завершено, и даже принтер пожужжал, но ничего не напечатал, а задание в списке заданий &amp;laquo;отменено пользователем&amp;raquo;. Начал плясать с правами пользователей на принтер и с правами принтера на пользователей. Запускать печать от имени кого попало и из разных приложений, и из командной строки. Результат один. Страдал дня два.&lt;/p&gt;
&lt;p&gt;А потом пришла в голову простая мысль. Хотя принтер и определился, и опознался, и даже какие-то драйвера вроде бы установились, с названием, очень похожим на принтер, но, все-таки, может быть, совершенно случайно, вдруг&amp;hellip; Короче, нашел и скачал PPD-файл для своего принтера и указал в настройках. И заработало! И более того, даже качество печати получше, чем этот же документ, запущенный из-под винды.&lt;/p&gt;
&lt;p&gt;А пока возился с принтером, обнаружил еще одну неприятность. Очень неприятную неприятность. Стало зависать. Опытный линуксоид бросит в меня банановой коркой и скажет, что Debian зависнуть не может. Ну хорошо, пусть не может. Но мышь не шевелится, на клавиатуру не реагирует. Что зависло? Как скажет любой непродвинутый пользователь, зависло &amp;laquo;всё&amp;raquo;.&lt;/p&gt;
&lt;p&gt;Причем, изредка зависало так, что все же можно было переключиться в tty1. Иногда была реакция только на SysRq, правда, заметная реакция &amp;mdash; только на перезагрузку. А иногда можно было перезагрузиться только аппаратным ресетом.&lt;/p&gt;
&lt;p&gt;Погулял по форумам. Обнаружил, что я в этой засаде не одинок, но не видел однозначного решения проблемы. Но одно из самых утоптанных направлений &amp;mdash; видеокарта. Но у меня же интегрированная! Intel i5, и в нем видяха встроенная, для моих целей достаточно, я не геймер, решил при покупке компьютера не переплачивать. Залез в биос, а там написано, что включена PCI-express-видеокарта. Странно&amp;hellip; Переключил на встроенную, перезагрузил &amp;mdash; черный экран. Не понял&amp;hellip; Полез посмотреть (заодно и пропылесосил) &amp;mdash; о-па! А у меня, оказывается, видеокарта! GF240, и вот тут-то я вспомнил, откуда она взялась, ага, была такая оказия нахаляву.&lt;/p&gt;
&lt;p&gt;И началась эпопея установки драйверов. Сперва был скачан файл run с официального сайта. Он не запустился, потому что обнаружил запущенные иксы. Хорошо, переключился в терминал, остановил иксы. Тогда run не запустился, потому что не нашел GCC. Странно, вроде было такое&amp;hellip; Попробовал скачать &amp;mdash; не качается, обнаружены битые пакеты в зависимостях. В каких зависимостях - так и не понял. Запустил (после перезагрузки, в иксах) Synaptic, попробовал исправить ошибки в пакетах &amp;mdash; к пакетам нет вопросов. Попробовал поставить GCC &amp;mdash; отмечается не зеленым квадратиком, а красным, говорит, что в зависимостях gcc-4.9, и это, мол, проблема, битые пакеты. Попробовал теперь исправить ошибки в пакетах &amp;mdash; не исправляются.&lt;/p&gt;
&lt;p&gt;Нашел в списке системных программ еще какие-то обновления, оказалось, у меня там висят два обновления &amp;mdash; binutils и какие-то утилиты для работы с базами данных Berkley. Обновления почему-то заблокированные, и через это самое приложение не ставятся ни в какую. Установил их через apt-get install, они установились за милую душу. После чего элементарно встал и gcc, вопросы с зависимостями кончились. Похоже, у Synaptic пути к репозиториям отличаются от путей для apt-get, хотя я пытался как-то настраивать&amp;hellip; &lt;/p&gt;
&lt;p&gt;Ладно, продолжаем ставить драйвер видеокарты. Опять в терминал, опять останавливаю иксы, запускаю &amp;mdash; теперь ему не нравится gcc, слишком новый. Но можно продолжить без проверки версии. Опять же, этот run сам отключил те видеодрайвера, которые стояли по умолчанию. В результате изображение на экране в иксах стало совсем поганым.&lt;/p&gt;
&lt;p&gt;Однако, понадобился kernel-sources. Пакета с таким названием apt-get не знает. Какой фигни я наустанавливал в поисках того, что надо видеодровам&amp;hellip; Но того, что нужно &amp;mdash; не нашел. Зато на форумах нашел, что можно поставить &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# aptitude install nvidia-glx nvidia-kernel-`uname -r` nvidia-kernel-dkms nvidia-settings nvidia-xconfig&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;где я вместо aptitude сделал apt-get. И все как-то само поставилось и заработало.&lt;/p&gt;
&lt;p&gt;Адаптировал vimrc из виндовской версии VIM для линуксовой &amp;mdash; кодировку комментариев и формат конца строки. Можно пробовать обживаться дальше. Посмотрим, на сколько хватит в этот раз.&lt;/p&gt;</summary><category term="linux"></category></entry><entry><title>Pelican и модуль Python-Markdown</title><link href="http://romeogolf.github.io/pelican-i-modul-python-markdown.html" rel="alternate"></link><updated>2016-01-30T20:00:00+05:00</updated><author><name>RomeoGolf</name></author><id>tag:romeogolf.github.io,2016-01-30:pelican-i-modul-python-markdown.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Содержание&lt;/strong&gt;&lt;/p&gt;
&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#markdown"&gt;Собственный Markdown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_1"&gt;Особенности&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_2"&gt;Отличия&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_3"&gt;Расширения&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_4"&gt;Официально поддерживаемые расширения&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#extra"&gt;Extra&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#markdown-html"&gt;Markdown внутри блоков HTML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#markdown-html_1"&gt;Вложенный Markdown внутри блоков HTML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#abbreviations"&gt;Abbreviations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#attribute-lists"&gt;Attribute Lists&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#_5"&gt;Блочные элементы&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#_6"&gt;Строчные элементы&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#definition-lists"&gt;Definition Lists&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fenced-code-blocks"&gt;Fenced Code Blocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#footnotes"&gt;Footnotes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#tables"&gt;Tables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#smart-strong"&gt;Smart Strong&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#extra_1"&gt;Extra &amp;mdash; заключение&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#admonition"&gt;Admonition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#codehilite"&gt;CodeHilite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#headerid"&gt;HeaderId&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#meta-data"&gt;Meta-Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#new-line-to-break-extension"&gt;New-Line-to-Break Extension&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#sane-lists"&gt;Sane Lists&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#smartypants"&gt;SmartyPants&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#table-of-contents"&gt;Table of Contents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#wikilinks"&gt;WikiLinks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#_7"&gt;Заключение&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="markdown"&gt;Собственный Markdown&lt;/h2&gt;
&lt;p&gt;Как сказано в &lt;a href="http://daringfireball.net/projects/markdown/"&gt;официальной документации&lt;/a&gt;, &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Markdown &amp;mdash; это две вещи: (1) синтаксис форматирования простого текста, и (2) программный инструмент, написанный на Perl, который преобразует форматирование простого текста в &lt;abbr title="Hyper Text Markup Language"&gt;HTML&lt;/abbr&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Однако, существует уже масса реализаций, не только на Perl. Для пеликана нас интересует, разумеется, модуль для Python. Информацию о нем можно получить из &lt;a href="https://pythonhosted.org/Markdown/index.html"&gt;официальной документации&lt;/a&gt;, на сегодняшний день свежая версия &amp;mdash; 2.6.5.&lt;/p&gt;
&lt;p&gt;Дальнейший текст существенной частью является вольным частичным переводом упомянутой документации, примеры взяты непосредственно из нее же. Кое-что при переводе было пропущено, так как имеет весьма слабое касательство к Пеликану, зато добавлены некоторые примечания от себя, а также некоторые примеры даны не только в виде результирующего &lt;abbr title="Hyper Text Markup Language"&gt;HTML&lt;/abbr&gt;-кода, но и в виде того, что, собственно, будет видно в итоге.&lt;/p&gt;
&lt;h2 id="_1"&gt;Особенности&lt;/h2&gt;
&lt;p&gt;В дополнение к базовому синтаксису, Python-Markdown поддерживает следующие особенности:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Интернациональный ввод&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Python-Markdown позволяет вводить информацию на любых языках, поддерживаемый Unicode, включая двунаправленный текст. Тестовый комплекс включает документы, написанные на русском и арабском.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Расширения&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Представлены различные расширения (включая extra) для изменения и/или расширения базового синтаксиса. Кроме того, доступен открытый Extension API для написания ваших собственных расширений.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Выходные форматы&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Python-Markdown может выводить документы в HTML4, XHTML и HTML5.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Интерфейс командной строки&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Кроме библиотеки Python, для вашего удобства доступен сценарий командной строки. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_2"&gt;Отличия&lt;/h2&gt;
&lt;p&gt;Несмотря на то, что Python-Markdown пытается полностью реализовать markdown, как описано в правилах синтаксиса, правила можно интерпретировать неоднозначно, и разные реализации порой отличаются своим поведением. Известные и намеренные отличия Python-Markdown:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Выделение в середине слова&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Python-Markdown по умолчанию игнорирует выделение в середине слова. Другими словами, &lt;code&gt;some_long_filename.txt&lt;/code&gt; не станет &lt;code&gt;some&amp;lt;em&amp;gt;long&amp;lt;/em&amp;gt;filename.txt&lt;/code&gt;. Это может быть при желании отключено.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Отступы/размер табуляции&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Синтаксические правила ясно утверждают, что &amp;laquo;если пункт списка состоит из нескольких параграфов, каждый последующий параграф &lt;strong&gt;должен&lt;/strong&gt; иметь отступ или 4 пробела, или один таб&amp;raquo; (выделение добавлено). Однако, многие реализации не навязывают это правило и позволяют менее 4 пробелов отступа. Реализация Python-Markdown рассматривает несоблюдение этого правила, как ошибку.&lt;/p&gt;
&lt;p&gt;В случае, если некто предпочитает другое поведение, длину табуляции можно установить такого размера, какого пожелаете. Однако, учтите, что это повлияет на все аспекты синтаксиса (включая корневой уровень блоков кода).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Последовательные списки&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Хотя синтаксические правила недостаточно ясны на этот счет, многие реализации (включая оригинальную) не заканчивают один список и начинают второй при изменении маркера списка (звездочки, плюсы, дефисы и цифры). Для совместимости Python-Markdown поддерживает такое поведение и не планирует менять его в обозримом будущем.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Про установку модуля, наверное, неинтересно читать. Писать уж точно не интересно, она ничем не отличается от любой другой и уже не раз описана. А вот про применение с учетом особенностей и отличий рассказать стоит.&lt;/p&gt;
&lt;p&gt;Про использование модуля в программах на языке Python переводить документацию тоже не вполне уместно. Pelican достаточно умная птица, чтобы избавить пользователя от копания в тонкостях программирования, позволяя ограничиться настройкой поведения. Грубо говоря, модуль предоставляет пару-тройку функций, например, &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;markdown&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Этой функции надо обязательно передать текст для обработки и можно добавить дополнительные параметры, типа используемых расширений вместе с их конфигурацией. Эту функцию Pelican сам где-то и вызывает, не наше дело. А вот настроить ее поведение &amp;mdash; наше дело. Для этого надо иметь представление о расширениях.&lt;/p&gt;
&lt;h2 id="_3"&gt;Расширения&lt;/h2&gt;
&lt;p&gt;Python-Markdown предлагает гибкий механизм расширений, который делает возможным изменение и/или расширение поведения парсера без необходимости редактирования его файлов исходного кода.&lt;/p&gt;
&lt;h3 id="_4"&gt;Официально поддерживаемые расширения&lt;/h3&gt;
&lt;p&gt;Перечисленные ниже расширения включены (как минимум) в большинство последних релизов и официально поддерживаются Python-Markdown. Если у вас типичная установка Python-Markdown, эти расширения уже доступны для применения с использованием их имени из второй колонки&lt;/p&gt;
&lt;div class="colortable"&gt;&lt;/div&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Расширение&lt;/th&gt;
&lt;th&gt;Имя&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Extra&lt;/td&gt;
&lt;td&gt;markdown.extensions.extra&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;gt; Abbreviations&lt;/td&gt;
&lt;td&gt;markdown.extensions.abbr&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;gt; Attribute Lists&lt;/td&gt;
&lt;td&gt;markdown.extensions.attr_list&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;gt; Definition Lists&lt;/td&gt;
&lt;td&gt;markdown.extensions.def_list&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;gt; Fenced Code Blocks&lt;/td&gt;
&lt;td&gt;markdown.extensions.fenced_code&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;gt; Footnotes&lt;/td&gt;
&lt;td&gt;markdown.extensions.footnotes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;gt; Tables&lt;/td&gt;
&lt;td&gt;markdown.extensions.tables&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;gt; Smart Strong&lt;/td&gt;
&lt;td&gt;markdown.extensions.smart_strong&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Admonition&lt;/td&gt;
&lt;td&gt;markdown.extensions.admonition&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CodeHilite&lt;/td&gt;
&lt;td&gt;markdown.extensions.codehilite&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HeaderId&lt;/td&gt;
&lt;td&gt;markdown.extensions.headerid&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Meta-Data&lt;/td&gt;
&lt;td&gt;markdown.extensions.meta&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;New Line to Break&lt;/td&gt;
&lt;td&gt;markdown.extensions.nl2br&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sane Lists&lt;/td&gt;
&lt;td&gt;markdown.extensions.sane_lists&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SmartyPants&lt;/td&gt;
&lt;td&gt;markdown.extensions.smarty&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Table of Contents&lt;/td&gt;
&lt;td&gt;markdown.extensions.toc&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WikiLinks&lt;/td&gt;
&lt;td&gt;markdown.extensions.wikilinks&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Существуют также расширения, которые разрабатывают и публикуют различные организации и одиночные разработчики. Для вашего удобства их &lt;a href="https://github.com/waylan/Python-Markdown/wiki/Third-Party-Extensions"&gt;список&lt;/a&gt; поддерживается на wiki. Команда Python-Markdown  не предлагает официальной поддержки таких расширений, в случае чего следует обращаться к их разработчикам.&lt;/p&gt;
&lt;h3 id="extra"&gt;Extra&lt;/h3&gt;
&lt;p&gt;Подборка различных расширений, которые (главным образом) имитируют одноименное расширение для PHP Markdown. Поддерживаемые расширения:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Abbreviations&lt;/li&gt;
&lt;li&gt;Attribute Lists&lt;/li&gt;
&lt;li&gt;Definition Lists&lt;/li&gt;
&lt;li&gt;Fenced Code Blocks&lt;/li&gt;
&lt;li&gt;Footnotes&lt;/li&gt;
&lt;li&gt;Tables&lt;/li&gt;
&lt;li&gt;Smart Strong&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="markdown-html"&gt;Markdown внутри блоков &lt;abbr title="Hyper Text Markup Language"&gt;HTML&lt;/abbr&gt;&lt;/h4&gt;
&lt;p&gt;В отличие от других особенностей Extra, эта особенность встроена в ядро markdown и включается, когда задействуют markdown.extensions.extra.&lt;/p&gt;
&lt;p&gt;Содержимое любых блочных элементов &lt;abbr title="Hyper Text Markup Language"&gt;HTML&lt;/abbr&gt;-кода может быть отформатировано при помощи Markdown простым добавлением атрибута markdown в открывающем теге. Этот атрибут будет удален из результирующего текста, но все остальные атрибуты будут сохранены.&lt;/p&gt;
&lt;p&gt;Если значение атрибута markdown установлено в &amp;laquo;1&amp;raquo; (что рекомендуется) или другое значение за исключением &amp;laquo;span&amp;raquo; или &amp;laquo;block&amp;raquo;, будет выполняться поведение по умолчанию: элементы &lt;code&gt;p, h[1-6], li, dd, dt, td, th, legend&lt;/code&gt; и &lt;code&gt;address&lt;/code&gt; пропускают анализ блока, в то время как остальные &amp;mdash; нет. Если поведение по умолчанию перекрыто значением &lt;code&gt;span&lt;/code&gt;, анализ блока будет пропущен независимо от тега. Если поведение по умолчанию перекрыто значением &lt;code&gt;block&lt;/code&gt;, анализ блока будет выполняться независимо от тега. Простой пример:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;This is &lt;span class="k"&gt;*&lt;/span&gt;&lt;span class="ge"&gt;true&lt;/span&gt;&lt;span class="k"&gt;*&lt;/span&gt; markdown text.

&lt;span class="cp"&gt;&amp;lt;div markdown=&amp;quot;1&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;This is *true* markdown text.&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;будет преобразован в такое:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This is &lt;span class="nt"&gt;&amp;lt;em&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/em&amp;gt;&lt;/span&gt; markdown text.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This is &lt;span class="nt"&gt;&amp;lt;em&amp;gt;&lt;/span&gt;true&lt;span class="nt"&gt;&amp;lt;/em&amp;gt;&lt;/span&gt; markdown text.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id="markdown-html_1"&gt;Вложенный Markdown внутри блоков &lt;abbr title="Hyper Text Markup Language"&gt;HTML&lt;/abbr&gt;&lt;/h4&gt;
&lt;p&gt;Вложенные элементы более чувствительны и должны использоваться с осторожностью. Чтобы избежать неожиданных результатов:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Вкладывайте элементы только внутри блочных элементов.&lt;/li&gt;
&lt;li&gt;После закрывающих тегов внутренних элементов ставьте пустую строку.&lt;/li&gt;
&lt;li&gt;Не делайте более одного уровня вложенности.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Сложный пример:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;div markdown=&amp;quot;1&amp;quot; name=&amp;quot;Example&amp;quot;&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;The text of the `Example` element.&lt;/span&gt;

&lt;span class="cp"&gt;&amp;lt;div markdown=&amp;quot;1&amp;quot; name=&amp;quot;DefaultBlockMode&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;This text gets wrapped in `p` tags.&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

The tail of the &lt;span class="k"&gt;`&lt;/span&gt;&lt;span class="sb"&gt;DefaultBlockMode&lt;/span&gt;&lt;span class="k"&gt;`&lt;/span&gt; subelement.

&lt;span class="cp"&gt;&amp;lt;p markdown=&amp;quot;1&amp;quot; name=&amp;quot;DefaultSpanMode&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;This text *is not* wrapped in additional `p` tags.&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

The tail of the &lt;span class="k"&gt;`&lt;/span&gt;&lt;span class="sb"&gt;DefaultSpanMode&lt;/span&gt;&lt;span class="k"&gt;`&lt;/span&gt; subelement.

&lt;span class="cp"&gt;&amp;lt;div markdown=&amp;quot;span&amp;quot; name=&amp;quot;SpanModeOverride&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;This `div` block is not wrapped in paragraph tags.&lt;/span&gt;
&lt;span class="cp"&gt;Note: Subelements are not required to have tail text.&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;&amp;lt;p markdown=&amp;quot;block&amp;quot; name=&amp;quot;BlockModeOverride&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;This `p` block *is* foolishly wrapped in further paragraph tags.&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

The tail of the &lt;span class="k"&gt;`&lt;/span&gt;&lt;span class="sb"&gt;BlockModeOverride&lt;/span&gt;&lt;span class="k"&gt;`&lt;/span&gt; subelement.

&lt;span class="cp"&gt;&amp;lt;div name=&amp;quot;RawHtml&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;Raw HTML blocks may also be nested.&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&amp;lt;/div&amp;gt;

This text is after the markdown in HTML.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;превратится в &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Example&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;The text of the &lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;Example&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt; element.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;DefaultBlockMode&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This text gets wrapped in &lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;p&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt; tags.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;The tail of the &lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;DefaultBlockMode&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt; subelement.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;DefaultSpanMode&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
This text &lt;span class="nt"&gt;&amp;lt;em&amp;gt;&lt;/span&gt;is not&lt;span class="nt"&gt;&amp;lt;/em&amp;gt;&lt;/span&gt; wrapped in additional &lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;p&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt; tags.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;The tail of the &lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;DefaultSpanMode&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt; subelement.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;SpanModeOverride&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
This &lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;div&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt; block is not wrapped in paragraph tags.
Note: Subelements are not required to have tail text.&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;BlockModeOverride&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This &lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;p&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt; block &lt;span class="nt"&gt;&amp;lt;em&amp;gt;&lt;/span&gt;is&lt;span class="nt"&gt;&amp;lt;/em&amp;gt;&lt;/span&gt; foolishly wrapped in further paragraph tags.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;The tail of the &lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;BlockModeOverride&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt; subelement.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;RawHtml&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
Raw HTML blocks may also be nested.
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This text is after the markdown in HTML.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4 id="abbreviations"&gt;Abbreviations&lt;/h4&gt;
&lt;p&gt;Добавляет возможность указания аббревиатур. А именно: любая добавленная аббревиатура будет заключена в тег &lt;code&gt;&amp;lt;abbr&amp;gt;&lt;/code&gt;. Расширение включено в стандартную библиотеку Markdown.&lt;/p&gt;
&lt;div class="equi_height"&gt;
&lt;div markdown="1"&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;The HTML specification 
is maintained by the W3C.

*[HTML]: Hyper Text Markup Language
*[W3C]:  World Wide Web Consortium
&lt;/pre&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;The &lt;abbr title="Hyper Text Markup Language"&gt;HTML&lt;/abbr&gt; specification 
is maintained by the &lt;abbr title="World Wide Web Consortium"&gt;W3C&lt;/abbr&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Благодаря этому примеру во всем тексте статьи буквосочетание &lt;abbr title="Hyper Text Markup Language"&gt;HTML&lt;/abbr&gt; будет иметь вид аббревиатуры. Так что не удивляйтесь, чего это вдруг автор решил пояснить эти буквы &amp;mdash; это не я, это пример из официальной документации шалит, но это жертва, на которую я намерен пойти.&lt;/p&gt;
&lt;p&gt;Расширение не требует каких-либо специальных опций настройки.&lt;/p&gt;
&lt;h4 id="attribute-lists"&gt;Attribute Lists&lt;/h4&gt;
&lt;p&gt;Добавляет синтаксис для задания атрибутов различных &lt;abbr title="Hyper Text Markup Language"&gt;HTML&lt;/abbr&gt;-элементов на выходе обработки Markdown. Расширение включено в стандартную библиотеку Markdown.&lt;/p&gt;
&lt;p&gt;Примерный список атрибутов выглядит примерно так:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;{: #someid .someclass somekey=&amp;#39;some value&amp;#39; }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Слово, начинающееся с решетки &lt;code&gt;#&lt;/code&gt;, будет установлено в качестве id элемента. &lt;/p&gt;
&lt;p&gt;Слово, начинающееся с точки &lt;code&gt;.&lt;/code&gt;, будет добавлено в список классов, определенных для элемента.&lt;/p&gt;
&lt;p&gt;Пара &amp;laquo;ключ/значение&amp;raquo; (&lt;code&gt;somekey='some value'&lt;/code&gt;) будет установлена для элемента.&lt;/p&gt;
&lt;p&gt;Имейте в виду, что, хотя слово с точкой добавляет класс, использование пары ключ/значение будет всегда перекрывать ранее определенный атрибут. Рассмотрите следующее:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;{: #id1 .class1 id=id2 class=&amp;quot;class2 class3&amp;quot; .class4 }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Этот пример приведет в результате к установке таких атрибутов:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;id=&amp;quot;id2&amp;quot; class=&amp;quot;class2 class3 class4&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5 id="_5"&gt;Блочные элементы&lt;/h5&gt;
&lt;p&gt;Чтобы определить атрибуты для блочного элемента, список атрибутов необходимо разместить на последней строке данного блока.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;This is a paragraph.
{: #an&lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="ge"&gt;id .a&lt;/span&gt;&lt;span class="k"&gt;_&lt;/span&gt;class }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;приведет к следующему результату:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;an_id&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;a_class&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;This is a paragraph.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Единственное исключение &amp;mdash; заголовки. Для них допускается располагать список в той же строке.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gh"&gt;A setext style header {: #setext}&lt;/span&gt;
&lt;span class="k"&gt;=================================&lt;/span&gt;

&lt;span class="k"&gt;### &lt;/span&gt;&lt;span class="gh"&gt;A hash style header ### {: #hash }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;приведет к следующему:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;setext&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;A setext style header&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h3&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hash&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;A hash style header&lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5 id="_6"&gt;Строчные элементы&lt;/h5&gt;
&lt;p&gt;Чтобы определить атрибуты для строчных элементов, список атрибутов должен быть расположен непосредственно после такого элемента без пробельных символов&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;[link](http://example.com){: class=&amp;quot;foo bar&amp;quot; title=&amp;quot;Some title!&amp;quot; }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;приведет к следующему:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://example.com&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;foo bar&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Some title!&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;link&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Расширение не требует особых опций настройки.&lt;/p&gt;
&lt;h4 id="definition-lists"&gt;Definition Lists&lt;/h4&gt;
&lt;p&gt;Расширение добавляет возможность создавать список определений в документе Markdown. Включено в стандартную библиотеку Markdown.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Apple
:   Pomaceous fruit of plants of the genus Malus in 
    the family Rosaceae.

Orange
:   The fruit of an evergreen tree of the genus Citrus.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;будет обработано так:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;dl&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;dt&amp;gt;&lt;/span&gt;Apple&lt;span class="nt"&gt;&amp;lt;/dt&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;dd&amp;gt;&lt;/span&gt;Pomaceous fruit of plants of the genus Malus in 
the family Rosaceae.&lt;span class="nt"&gt;&amp;lt;/dd&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;dt&amp;gt;&lt;/span&gt;Orange&lt;span class="nt"&gt;&amp;lt;/dt&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;dd&amp;gt;&lt;/span&gt;The fruit of an evergreen tree of the genus Citrus.&lt;span class="nt"&gt;&amp;lt;/dd&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dl&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Расширение не требует особых опций настройки.&lt;/p&gt;
&lt;h4 id="fenced-code-blocks"&gt;Fenced Code Blocks&lt;/h4&gt;
&lt;p&gt;Расширение добавляет дополнительный способ указания блоков кода, который преодолевает некоторые ограничения для блоков кода, заданных отступами.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;This is a paragraph introducing:

~~~~~~~~~~~~~~~~~~~~
a one-line code block
~~~~~~~~~~~~~~~~~~~~
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Заборчатый блок кода может иметь пустую строку в качестве первой или последней строки кода, а также может следовать немедленно после пункта списка, не становясь частью списка.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;strong&gt;Внимание:&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;Заборчатые блоки кода поддерживаются только на уровне корня документа. Таким образом, их нельзя вложить в списки или цитаты&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Можно определить язык в блоке кода для использования при подсветке синтаксиса (или еще зачем-нибудь). Язык будет добавлен атрибутом класса выходному элементу &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt;. То есть, вам следует определить язык, какой вам надо, в CSS-классе &lt;code&gt;.language&lt;/code&gt;. Для совместимости с синтаксисом markdown, язык можно &lt;em&gt;опционально&lt;/em&gt; заключить в фигурные скобки:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;~~~~{.python}
&lt;span class="k"&gt;# &lt;/span&gt;&lt;span class="gh"&gt;python code&lt;/span&gt;
~~~~

~~~~.html
&amp;lt;p&amp;gt;HTML Document&amp;lt;/p&amp;gt;
~~~~
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;и из этого получится&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;pre&amp;gt;&amp;lt;code&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;python&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;# python code
&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;pre&amp;gt;&amp;lt;code&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;html&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ni"&gt;&amp;amp;lt;&lt;/span&gt;p&lt;span class="ni"&gt;&amp;amp;gt;&lt;/span&gt;HTML Document&lt;span class="ni"&gt;&amp;amp;lt;&lt;/span&gt;/p&lt;span class="ni"&gt;&amp;amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Кроме того, поддерживается синтаксис в стиле GitHub с использованием обратных апострофов:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;```&lt;/span&gt;&lt;span class="nn"&gt;python&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;# more python code&lt;/span&gt;
&lt;span class="k"&gt;```&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Если вам бы хотелось подсветить заборчатые блоки кода с помощью расширения CodeHilite, просто подключите это расширение (помните, что его зависимостью является модуль Pygments), и синтаксис языка в блоке кода будет подсвечиваться соответствующим образом.&lt;/p&gt;
&lt;p&gt;Подобно синтаксису с двоеточиями расширения CodeHilite, заборчатые блоки кода могут выделять определенные строки. Строки можно указать в стиле PHP Extra&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;~~~~{.python hl_lines=&amp;quot;1 3&amp;quot;}
&lt;span class="k"&gt;# &lt;/span&gt;&lt;span class="gh"&gt;This line is emphasized&lt;/span&gt;
&lt;span class="k"&gt;# &lt;/span&gt;&lt;span class="gh"&gt;This line isn&amp;#39;t&lt;/span&gt;
&lt;span class="k"&gt;# &lt;/span&gt;&lt;span class="gh"&gt;This line is emphasized&lt;/span&gt;
~~~~
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;или в стиле GitHub&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;```python hl_lines=&amp;quot;1 3&amp;quot;
# This line is emphasized
# This line isn&amp;#39;t
# This line is emphasized
```
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Расширение не требует особых опций настройки.&lt;/p&gt;
&lt;h4 id="footnotes"&gt;Footnotes&lt;/h4&gt;
&lt;p&gt;Добавляет синтаксис для указания сносок в документах Markdown. Расширение включено в стандартную библиотеку Markdown.&lt;/p&gt;
&lt;p&gt;Синтаксис сносок Python-Markdown в основном следует правилам, принятым в сообществе Markdown в целом и почти в точности соответствует реализации PHP Markdown Extra. Отличия касаются только некоторых тонкостей на выходе.&lt;/p&gt;
&lt;p&gt;Пример:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Footnotes[^1] have a label[^@#$%] and the footnote&amp;#39;s content.

[^1]: This is a footnote content.
[^@#$%]: A footnote on the label: &amp;quot;@#$%&amp;quot;.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Метка сноски должна начинаться со знака вставки &lt;code&gt;^&lt;/code&gt; и может содержать любой строчный текст (включая пробелы) между квадратными скобками. Только первый символ знака вставки имеет специальное значение.&lt;/p&gt;
&lt;p&gt;Контент сноски должен начинаться с метки, за которой идет двоеточие и минимум один пробел. Метка, используемая для определения контента, должна в точности соответствовать метке, используемой в теле (включая регистр символов и пробелы). Контент может содержать несколько строк, абзацев, блоков кода и большинство других элементов синтаксиса Markdown. Дополнительные строки должны иметь отступ на один уровень (четыре пробела или один таб).&lt;/p&gt;
&lt;p&gt;При работе с несколькими блоками может быть полезно начинать контент с отдельной строки для метки, указывающей на контент. Благодаря такому способу у всего блока получаются единообразные отступы, и любые ошибки автору будет существенно проще заметить.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;[^1]: 
    The first paragraph of the definition.

    Paragraph two of the definition.

&lt;span class="k"&gt;    &amp;gt; &lt;/span&gt;A blockquote with
&lt;span class="k"&gt;    &amp;gt; &lt;/span&gt;multiple lines.

        a code block

    A final paragraph.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Для расширения доступны следующие опции настройки:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;PLACE_MARKER&lt;/code&gt;&lt;/strong&gt;: текстовая строка, используемая для отметки позиции, где будет отображаться сноска. По умолчанию &lt;code&gt;///Footnotes Go Here///&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Если текст маркера места не найден в документе, сноска будет размещена в конце результирующего &lt;abbr title="Hyper Text Markup Language"&gt;HTML&lt;/abbr&gt;-документа.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;UNIQUE_IDS&lt;/code&gt;&lt;/strong&gt;: Следует ли избегать коллизий через многократный вызов &lt;code&gt;reset()&lt;/code&gt; По умолчанию &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;BACKLINK_TEXT&lt;/code&gt;&lt;/strong&gt;: Текстовая строка, которая будет ссылкой от сноски обратно к позиции в документе. По умолчанию &lt;code&gt;&amp;amp;#8617&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="tables"&gt;Tables&lt;/h4&gt;
&lt;p&gt;Добавляет возможность использования синтаксиса, установленного в PHP Markdown Extra.&lt;/p&gt;
&lt;p&gt;То есть, следующий текст (взятый из документации к упомянутой выше PHP Markdown Extra)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;First Header  | Second Header
------------- | -------------
Content Cell  | Content Cell
Content Cell  | Content Cell
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;будет отображен в виде &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;table&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;thead&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;First Header&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;th&amp;gt;&lt;/span&gt;Second Header&lt;span class="nt"&gt;&amp;lt;/th&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/thead&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;tbody&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;Content Cell&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;Content Cell&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;tr&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;Content Cell&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;td&amp;gt;&lt;/span&gt;Content Cell&lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/tbody&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Расширение не требует особых опций настройки.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Примечание&lt;/dt&gt;
&lt;dd&gt;Для таблиц, созданных таким образом, хотелось бы иметь возможность задать стили оформления, желательно еще и разные в разных случаях. Это особенно важно потому, что блоки кода с включенной нумерацией страниц тоже используют таблицы: одна колонка для номеров, вторая &amp;mdash; для блока кода. Фильдиперстово стилизованные таблицы без указания класса могут попортить пример кода с нумерованными строками. Таким образом, хотелось бы разделить стили таблиц при помощи классов. Однако, использование расширения Attribute Lists с таблицами работает не так, как хотелось бы.  &lt;/dd&gt;
&lt;dt&gt;&amp;nbsp;&lt;/dt&gt;
&lt;dd&gt;Хотя таблица выглядит, как блочный элемент, она ведет себя не как блок, да еще и у нее есть подэлементы &amp;mdash; строки и столбцы. Поэтому &lt;code&gt;{: .styled_table }&lt;/code&gt;, написанное сразу после таблицы, будет применено не к &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;, а к &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; &amp;mdash; пустому и специально для этой цели созданному. Мое решение (первое, что пришлов голову): втыкаю сразу перед таблицей строку &lt;code&gt;&amp;lt;div markdown="span" class="styled_table"&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;, а в CSS-файле использую конструкции типа &lt;code&gt;.styled_table + table {..}&lt;/code&gt;, &lt;code&gt;.styled_table + table td {..}&lt;/code&gt;. Можно, конечно, воспользоваться и псевдоклассом &lt;code&gt;:not&lt;/code&gt;, но мой способ позволяет сделать разное оформление таблиц при необходимости.&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4 id="smart-strong"&gt;Smart Strong&lt;/h4&gt;
&lt;p&gt;Расширение добавляет более &amp;laquo;умную&amp;raquo; обработку двойных знаков подчеркивания внутри слова. Делает для двойных подчеркиваний то же, что smart_emphasis для одинарных. Расширение включено в стандартную библиотеку Markdown.&lt;/p&gt;
&lt;p&gt;Пример использования в консоли Python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;markdown&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Text with double__underscore__words.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; \
                      &lt;span class="n"&gt;extensions&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;markdown.extensions.smart_strong&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;&amp;lt;p&amp;gt;Text with double__underscore__words.&amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;__Strong__ still works.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; \
                      &lt;span class="n"&gt;extensions&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;markdown.extensions.smart_strong&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Strong&amp;lt;/strong&amp;gt; still works.&amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;__this__works__too__.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; \
                      &lt;span class="n"&gt;extensions&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;markdown.extensions.smart_strong&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;this__works__too&amp;lt;/strong&amp;gt;.&amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Расширение не требует особых опций настройки.&lt;/p&gt;
&lt;h4 id="extra_1"&gt;Extra &amp;mdash; заключение&lt;/h4&gt;
&lt;p&gt;Итак, расширение Extra &amp;mdash; это, по сути, комплект из семи расширений. Их можно подключить оптом, указав &lt;code&gt;markdown.extensions.extra&lt;/code&gt; в строке подключения, а можно и поштучно, указывая только имена действительно необходимых. Указать отдельные расширения в настройках может быть полезно еще и для того, чтобы передать им опции настройки, отличающиеся от опций по умолчанию.&lt;/p&gt;
&lt;p&gt;Однако, почему же в Pelican вся эта подборка работает сразу? Да еще и вместе с подсветкой синтаксиса, которая обеспечивается расширением CodeHilite, которое в Extra не входит? (Правда, для нормальной подсветки нужен еще и соответствующий CSS-файл, и если его нет, то код визуально подсвечен не будет, но ключевые слова в коде будут правильно обрамлены тегами &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; с разными классами для возможности применения разных стилей.)&lt;/p&gt;
&lt;p&gt;А все дело в файле конфигурации Pelican &amp;mdash; pelicanconf.py, в котором предусмотрена опция-переменная MD_EXTENSIONS: список расширений Markdown, которые будет использовать генератор сайта.&lt;/p&gt;
&lt;p&gt;И хотя в файле конфигурации, который создается в результате pelican-quickstart.py, эта опция не указана вообще, у нее есть значение по умолчанию, которое и применяется в таких случаях:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;MD_EXTENSIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;codehilite(css_class=highlight)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;extra&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Как видно, расширение Extra включено изначально, а CodeHilite включено еще и с настройками. При желании их можно отключить, указав явным образом MD_EXTENSIONS с пустыми квадратными скобками. А можно добавить еще какие-нибудь расширения, но тогда надо обязательно указать и те, что включены по умолчанию, потому что опция MD_EXTENSIONS их перекрывает и заменяет.&lt;/p&gt;
&lt;p&gt;Кроме того надо заметить, что при указании имени расширения в опции оставлена только последняя составляющая. Предполагаю, это сделано потому, что в коде Pelican уже указан &lt;code&gt;import markdown.extentions&lt;/code&gt;. Впрочем, для блоггера причины этой удобной особенности неважны, можно просто писать имя самого расширения без префиксов.&lt;/p&gt;
&lt;h3 id="admonition"&gt;Admonition&lt;/h3&gt;
&lt;p&gt;Расширение добавляет в Markdown-документ замечания в стиле rST. Включено в стандартную библиотеку Markdown.&lt;/p&gt;
&lt;p&gt;Замечание создается с использованием следующего синтаксиса:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;!!! type &amp;quot;optional explicit title within double quotes&amp;quot;
    Any number of other indented markdown elements.

    This is the second paragraph.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;type&lt;/code&gt; будет использоваться в имени класса CSS и в качестве заголовка по умолчанию. Это должно быть одно слово. Так, например:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;!!! note
    You should note that the title will be automatically capitalized.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;будет переделано так:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;admonition note&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;admonition-title&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Note&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;You should note that the title will be automatically capitalized.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Опционально вы можете добавить заголовок. Например:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;!!! danger &amp;quot;Don&amp;#39;t try this at home&amp;quot;
    ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;сделает&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;admonition danger&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;admonition-title&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Don&amp;#39;t try this at home&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Если вы хотите совсем избавиться от заголовка, используйте пустую строку между кавычек: из&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;!!! important &amp;quot;&amp;quot;
    This is a admonition box without a title.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;получится&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;admonition important&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This is a admonition box without a title.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;rST предполагает использование следующих типов: attention, caution, danger, error, hint, important, note, tip, warning. Однако, вы вольны использовать всё, что хотите.&lt;/p&gt;
&lt;p&gt;В состав расширения не входит никаких CSS-файлов. Придется делать их самостоятельно, можете посмотреть тему &lt;a href="http://sphinx.pocoo.org/"&gt;Sphinx&lt;/a&gt;, если вам нужно вдохновение.&lt;/p&gt;
&lt;h3 id="codehilite"&gt;CodeHilite&lt;/h3&gt;
&lt;p&gt;Расширение добавляет подсветку синтаксиса к стандартным блокам кода Python-Markdown с использованием Pygments. Расширение включено в стандартную библиотеку Markdown. &lt;/p&gt;
&lt;p&gt;Для его использования необходимо также скачать и установить модуль Pygments. Впрочем, при установке Pelican это произошло само собой: pip поставил модуль, так как он входит в список зависимостей. Но в документации на Markdown об этом, конечно, не сказано, ведь его можно использовать не только в Pelican.&lt;/p&gt;
&lt;p&gt;Вам надо определить подходящие классы CSS и создать подходящие правила для них &amp;mdash; подобрать (сделать самостоятельно, раздобыть или поручить эту работу модулю Pygments) CSS-файл и подключить его в заголовке ваших &lt;abbr title="Hyper Text Markup Language"&gt;HTML&lt;/abbr&gt;-шаблонов. На эту тему есть замечательная &lt;a href="http://pygments.org/docs"&gt;документация&lt;/a&gt;, где описаны детали. Если вы не указали язык, Pygments попытается догадаться самостоятельно. Если у него это не получится, блок кода останется без подсветки.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;strong&gt;Имейте в виду:&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;CSS и/или JavaScript не включены в виде части данного расширения, но должны быть обеспечены пользователем. Проект Pygments предоставляет стили CSS по умолчанию, и они могут оказаться полезными поначалу.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Расширение CodeHilite следует тем же правилам синтаксиса, что и обычные блоки кода Markdown, с одним исключением. Подсвечивателю нужно знать, какой язык используется для блока кода. Есть три способа рассказать подсвечивателю, какой язык содержит блок, и каждый имеет отличающийся результат.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;strong&gt;Имейте в виду:&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;Формат идентификатора языка действует на нумерацию строк только в том случае, если &lt;code&gt;linenums&lt;/code&gt; установлено в &lt;code&gt;None&lt;/code&gt; (по умолчанию). Если его значение &lt;code&gt;True&lt;/code&gt; или &lt;code&gt;False&lt;/code&gt;, то формат идентификатора не влияет на показ номера строки &amp;mdash; он служит только для определения языка в блоке кода&lt;/dd&gt;
&lt;/dl&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Знак начала сценария &lt;code&gt;#!&lt;/code&gt; (с путем)&lt;/p&gt;
&lt;p&gt;Если в первой строке блок кода содержит знак начала сценария, язык извлекается из этой строки и номера строк ставятся.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="equi_height"&gt;
&lt;div markdown="1"&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;    #!/usr/bin/python
    # Code goes here ...
&lt;/pre&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;div&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="c"&gt;# Code goes here ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Знак начала сценария &lt;code&gt;#!&lt;/code&gt; (без пути)&lt;/p&gt;
&lt;p&gt;Если в первая строка блока кода содержит знак начала сценария, однако не содержит путь (одиночный / или даже пробел), эта строка будет удалена из кода перед обработкой. Номера строк ставятся.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="equi_height"&gt;
&lt;div markdown="1"&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;#!python
&lt;span class="k"&gt;# &lt;/span&gt;&lt;span class="gh"&gt;Code goes here ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;div&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Code goes here ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Двоеточия&lt;/p&gt;
&lt;p&gt;Если первая строка начинается с трех или более двоеточий, текст, следующий за двоеточиями, идентифицирует язык. Первая строка удаляется из блока кода перед обработкой, номера строк не ставятся.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="equi_height"&gt;
&lt;div markdown="1"&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;    :::python
    # Code goes here ...
&lt;/pre&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Code goes here ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;При помощи синтаксиса с двоеточиями можно выделить определенные строки. При использовании CSS-стилей Pygments у выделяемых линий фон желтый. Это полезно для привлечения внимания читателя к отдельным линиям.&lt;/p&gt;
&lt;div class="equi_height"&gt;
&lt;div markdown="1"&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;    :::python hl_lines=&amp;quot;1 3&amp;quot;
    # This line is emphasized
    # This line isn&amp;#39;t
    # This line is emphasized
&lt;/pre&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="hll"&gt;&lt;span class="c"&gt;# This line is emphasized&lt;/span&gt;
&lt;/span&gt;&lt;span class="c"&gt;# This line isn&amp;#39;t&lt;/span&gt;
&lt;span class="hll"&gt;&lt;span class="c"&gt;# This line is emphasized&lt;/span&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;

&lt;dl&gt;
&lt;dt&gt;&lt;strong&gt;Имейте в виду:&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;code&gt;hl_lines&lt;/code&gt; называется опция Pygments &amp;ldquo;highlighted lines&amp;rdquo;&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;CodeHilite имеет полную обратную совместимость в том плане, что если встретившийся блок кода внезапно окажется без определения языка, такой блок просто будет обернут тегами &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; и выдан так.&lt;/p&gt;
&lt;div class="equi_height"&gt;
&lt;div markdown="1"&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;    # Code goes here ...
&lt;/pre&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# Code goes here ...
&lt;/pre&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;а код страницы в этом месте будет выглядеть так:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;codehilite&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;&lt;/span&gt;# Code goes here ...
&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;dl&gt;
&lt;dt&gt;&lt;strong&gt;Имейте в виду:&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;Если язык не будет определен, движок подсветки Pygments попытается догадаться сам (если только &lt;code&gt;quess_lang&lt;/code&gt; не установлен в &lt;code&gt;False&lt;/code&gt;). А если у него не получится, тогда будет такое поведение, как описано выше.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Для расширения доступны следующие опции настройки:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;linenums&lt;/code&gt;&lt;/strong&gt;: Использовать нумерацию строк. Возможные значения: &lt;code&gt;True&lt;/code&gt; (да), &lt;code&gt;False&lt;/code&gt; (нет) и &lt;code&gt;None (авто)&lt;/code&gt;. Значение по умолчанию &amp;mdash; &lt;code&gt;None&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Использование &lt;code&gt;True&lt;/code&gt; включает нумерацию строк для всех блоков кода, даже если язык в них обозначен с использованием двоеточий (:::).&lt;/p&gt;
&lt;p&gt;Использование &lt;code&gt;False&lt;/code&gt; отключает нумерацию строк, даже при использовании знака начала сценария (#!) для указания языка.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;guess_lang&lt;/code&gt;&lt;/strong&gt;: Автоматическое определение языка. По умолчанию &lt;code&gt;True&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Использование &lt;code&gt;False&lt;/code&gt; предотвращает попытки Pygments угадать язык, таким образом, будут подсвечиваться только блоки с явным указанием языка.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;css_class&lt;/code&gt;&lt;/strong&gt;: Устанавливает имя класса CSS для оборачивающего тега &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;. По умолчанию &lt;code&gt;codehilite&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;pygments_style&lt;/code&gt;&lt;/strong&gt;: Стиль форматирования Pygments &lt;abbr title="Hyper Text Markup Language"&gt;HTML&lt;/abbr&gt; (ColorSheme). По умолчанию &lt;code&gt;default&lt;/code&gt;.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;strong&gt;Имейте в виду:&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;Эта опция полезна только в том случае, если &lt;code&gt;noclasses&lt;/code&gt; установлена в &lt;code&gt;True&lt;/code&gt;, иначе пользователь должен обеспечить наличие CSS-стилей.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;noclasses&lt;/code&gt;&lt;/strong&gt;: Использовать встроенные стили вместо классов CSS. По умолчанию &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;use_pygments&lt;/code&gt;&lt;/strong&gt;: По умолчанию &lt;code&gt;True&lt;/code&gt;. Установите в &lt;code&gt;False&lt;/code&gt;, чтобы отключить использование Pygments. Если для блока кода определен язык, он будет присвоен в качестве класса для тега &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt;, как предлагается спецификацией HTML5 (альтернативный вывод не будет учитываться) и может быть использован в библиотеке JavaScript в браузере для подсветки блока кода.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="headerid"&gt;HeaderId&lt;/h3&gt;
&lt;p&gt;Расширение автоматически генерирует атрибут &lt;code&gt;id&lt;/code&gt; для элементов заголовков (h1 &amp;ndash; h6) в результирующем &lt;abbr title="Hyper Text Markup Language"&gt;HTML&lt;/abbr&gt;-документе.&lt;/p&gt;
&lt;p&gt;Расширение включено в стандартную библиотеку Markdown.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;strong&gt;Внимание!&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;Это расширение рассматривается, как не рекомендуемое. Вместо него следует использовать расширение Table of Contents, которое предлагает большинство возможностей этого расширения, а также дополнительные.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;По умолчанию все заголовки автоматически получат атрибут &lt;code&gt;id&lt;/code&gt;, сгенерированный на основе текста заголовка (ниже описано, как это отключить). Посмотрите пример, в котором все три заголовка должны бы иметь одинаковый &lt;code&gt;id&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;#Header
#Header
#Header
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;выдаст в результате&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;header&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Header&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;header_1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Header&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;header_2&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Header&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Для расширения доступны следующие опции настройки:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;level&lt;/code&gt;&lt;/strong&gt;: Базовый уровень для заголовков.&lt;/p&gt;
&lt;p&gt;По умолчанию &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;level&lt;/code&gt; позволяет вам автоматически подстроить уровни заголовков для их соответствия вашим &lt;abbr title="Hyper Text Markup Language"&gt;HTML&lt;/abbr&gt;-шаблонам. Например, допустим, markdown-текст на странице не должен содержать заголовков уровня выше третьего (&lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt;). Ниже показано, как этого добиться:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s"&gt;... #Some Header&lt;/span&gt;
&lt;span class="s"&gt;... ## Next Level&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;markdown.extensions.headerid&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HeaderIdExtension&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;extensions&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;HeaderIdExtension&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;h3&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;some_header&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Some&lt;/span&gt; &lt;span class="n"&gt;Header&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;h4&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;next_level&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Next&lt;/span&gt; &lt;span class="n"&gt;Level&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;h4&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;forceid&lt;/code&gt;&lt;/strong&gt;: Вынуждает все заголовки получить &lt;code&gt;id&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;По умолчанию &lt;code&gt;True&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;forceid&lt;/code&gt; включает или выключает автоматическую генерацию &lt;code&gt;id&lt;/code&gt; для заголовков, которые не имеют таковых, указанных явным образом (с использованием расширения Attribute Lists).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; text = &amp;#39;&amp;#39;&amp;#39;
... # Some Header
... # Header with ID # { #foo }&amp;#39;&amp;#39;&amp;#39;
&amp;gt;&amp;gt;&amp;gt; html = markdown.markdown(text,
                  extensions=[&amp;#39;markdown.extensions.attr_list&amp;#39;,
                              HeaderIdExtension(forceid=False)])
&amp;gt;&amp;gt;&amp;gt; print html
&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Some Header&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Header with ID&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;separator&lt;/code&gt;&lt;/strong&gt;: Разделитель слов. Символ, которым будут заменены пробелы в id.&lt;/p&gt;
&lt;p&gt;По умолчанию &lt;code&gt;-&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;slugify&lt;/code&gt;&lt;/strong&gt;: Callable (вызываемый объект) для генерации якорей (anchors).&lt;/p&gt;
&lt;p&gt;По умолчанию &lt;code&gt;markdown.extensions.headerid.slugify&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Если вы желаете использовать иной алгоритм для определения id, можете сделать свой Callable, который принимает два аргумента:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;value&lt;/code&gt;: строка для преобразования в slug&lt;/li&gt;
&lt;li&gt;&lt;code&gt;separator&lt;/code&gt;: разделитель слов&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;slug &amp;mdash; труднопереводимое слово. Однозначного аналога на русском не нашел. Суть примерно в том, что из некоей строки иногда требуется сделать последовательность символов, в которой можно узнать исходную строку, но при этом нужно исключить любые символы, вызывающие трудности в обработке, начиная со служебных (типа пробелов и слэшей) и заканчивая символами сложных алфавитов, той же кириллицы. Например для строки &amp;laquo;Привет, мир!&amp;raquo; получится slag &amp;laquo;privet_mir&amp;raquo;, или &amp;laquo;hello_world_&amp;raquo;. Это может быть полезно при генерации имен, которые должны удовлетворять определенным требованиям к составу символов, например, имен файлов, и чаще всего используется при формировании частей человекопонятных интернет-адресов.&lt;/p&gt;
&lt;p&gt;Расширение HeaderId поддерживает расширение Meta-Data. Пожалуйста, посмотрите документацию для этого расширения. Поддерживаемые ключевые слова meta-data:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;header_level&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;header_forceid&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;При использовании meta-data перекроет настройки, установленные интерфейсом &lt;code&gt;extension_configs&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;header_level&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;header_forceid&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Off&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;Header&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;приведет в результате к такому выводу:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;A Header&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="meta-data"&gt;Meta-Data&lt;/h3&gt;
&lt;p&gt;Расширение добавляет синтаксис для определения метаданных документа. Написано под влиянием MultiMarkdown и следует правилам его синтаксиса. В настоящее время это расширение не использует метаданных каким-либо образом, а просто предоставляет свойство &lt;code&gt;Meta&lt;/code&gt; экземпляра класса Markdown для использования другими расширениями или напрямую в коде на Python.&lt;/p&gt;
&lt;p&gt;Расширение включено в стандартную библиотеку Markdown.&lt;/p&gt;
&lt;p&gt;Метаданные состоят из набора ключевых слов и значений, указанных в начале документа Markdown примерно так:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Title:   My Document
Summary: A brief description of my document.
Authors: Waylan Limberg
         John Doe
Date:    October 2, 2007
blank-value: 
base_url: http://example.com

This is the first paragraph of the document.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ключевые слова регистрозависимы и могут состоять из букв, цифр, символов подчеркивания и точек и должны завершаться двоеточием. Значения состоят из чего угодно, следующего за двоеточием на этой же строке, и даже может быть пустым.&lt;/p&gt;
&lt;p&gt;Если строка имеет отступ на 4 или больше пробелов, она рассматривается как дополнительная строка значения предыдущего ключевого слова. У ключевого слова может быть столько строк, сколько хотите.&lt;/p&gt;
&lt;p&gt;Первая пустая строка заканчивает все метаданные документа. Таким образом, первая строка документа не должна быть пустой.&lt;/p&gt;
&lt;p&gt;С другой стороны, вы можете использовать разделители в YAML-стиле чтобы отметить начало и конец метаданных. В этом случае, первая строка документа должна быть &lt;code&gt;--&lt;/code&gt;. Метаданные заканчиваются на первой пустой строке или первой строке, содержащей конечный разделитель (&lt;code&gt;---&lt;/code&gt; или &lt;code&gt;...&lt;/code&gt;), смотря что встретиться раньше. Хотя YAML-разделители и поддерживаются, метаданные не анализируются, как YAML.&lt;/p&gt;
&lt;p&gt;Все метаданные удаляются из документа перед дальнейшей обработкой программой Markdown.&lt;/p&gt;
&lt;p&gt;Метаданные доступны в виде Python-типа данных Dict в свойстве &lt;code&gt;Meta&lt;/code&gt; экземпляра класса Markdown. Пример использования с документом, приведенным выше:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; md = markdown.Markdown(extensions = [&amp;#39;markdown.extensions.meta&amp;#39;])
&amp;gt;&amp;gt;&amp;gt; html = md.convert(text)
&amp;gt;&amp;gt;&amp;gt; # Meta-data has been stripped from output
&amp;gt;&amp;gt;&amp;gt; print html
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This is the first paragraph of the document.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&amp;gt;&amp;gt;&amp;gt; # View meta-data
&amp;gt;&amp;gt;&amp;gt; print md.Meta
{
&amp;#39;title&amp;#39; : [&amp;#39;My Document&amp;#39;],
&amp;#39;summary&amp;#39; : [&amp;#39;A brief description of my document.&amp;#39;],
&amp;#39;authors&amp;#39; : [&amp;#39;Waylan Limberg&amp;#39;, &amp;#39;John Doe&amp;#39;],
&amp;#39;date&amp;#39; : [&amp;#39;October 2, 2007&amp;#39;],
&amp;#39;blank-value&amp;#39; : [&amp;#39;&amp;#39;],
&amp;#39;base_url&amp;#39; : [&amp;#39;http://example.com&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Обратите внимание, что ключевые слова все в нижнем регистре, а значения состоят из списка строк, в котором каждая строка &amp;mdash; отдельная строка значения этого ключа в исходном документе. Таким образом, можно сохранить разрывы строк, если хотите. Либо элементы списка можно объединить, где это уместно. Никаких предположений относительно данных не делается, они просто передаются свойству &lt;code&gt;Meta&lt;/code&gt; в том виде, в каком обнаружены.&lt;/p&gt;
&lt;p&gt;Пожалуй, метаданные можно передать в систему шаблонов, либо использовать в различных расширениях Markdown. Эти возможности оставлены фантазии разработчика.&lt;/p&gt;
&lt;p&gt;Следующие расширения в настоящее время могут работать с расширением Meta-Data. Также перечислены поддерживаемые ключевые слова:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HeaderId&lt;ul&gt;
&lt;li&gt;header_level&lt;/li&gt;
&lt;li&gt;header_forceid&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;WikiLinks&lt;ul&gt;
&lt;li&gt;wiki_base_url&lt;/li&gt;
&lt;li&gt;wikw_end_url&lt;/li&gt;
&lt;li&gt;wiki_html_class&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="new-line-to-break-extension"&gt;New-Line-to-Break Extension&lt;/h3&gt;
&lt;p&gt;Расширение будет обрабатывать новые строки с использованием тега переноса строки, подобно тому, как это сделано в реализациях Markdown на StackOverflow и GitHub. Пример:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;markdown&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;laquo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="n"&gt;Line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="n"&gt;Line&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;laquo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;extensions&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;markdown.extensions.nl2br&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Line&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;br&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;Line&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Расширение не требует особых опций настройки.&lt;/p&gt;
&lt;h3 id="sane-lists"&gt;Sane Lists&lt;/h3&gt;
&lt;p&gt;Расширение изменяет поведение синтаксиса списков Markdown так, чтобы они вызывали меньше удивления, или, скажем так, были более предсказуемыми.&lt;/p&gt;
&lt;p&gt;Расширение включено в стандартную библиотеку Markdown.&lt;/p&gt;
&lt;p&gt;Sane Lists не разрешает использование смешанных типов списков. Иными словами, нумерованный список не будет продолжаться, если встретится пункт маркированного списка и наоборот. Например:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;1. Ordered item 1
2. Ordered item 2

* Unordered item 1
* Unordered item 2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;приведет к такому результату:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;ol&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Ordered item 1&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Ordered item 2&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ol&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Unordered item 1&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Unordered item 2&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;в то время как поведение Markdown по умолчанию сгенерировало бы маркированный список.&lt;/p&gt;
&lt;p&gt;Странно. В документации написано &lt;code&gt;Whereas the default Markdown behavior would be to generate an unordered list.&lt;/code&gt;, а получается вовсе даже нумерованный:&lt;/p&gt;
&lt;div class="equi_height"&gt;
&lt;div markdown="1"&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;1. &lt;/span&gt;Ordered item 1
&lt;span class="k"&gt;2. &lt;/span&gt;Ordered item 2

&lt;span class="k"&gt;* &lt;/span&gt;Unordered item 1
&lt;span class="k"&gt;* &lt;/span&gt;Unordered item 2
&lt;/pre&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;div&gt;
&lt;ol&gt;
&lt;li&gt;Ordered item 1&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ordered item 2&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unordered item 1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Unordered item 2&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Имейте в виду, что в отличие от поведения Markdown по умолчанию, если между пунктами строки нет пустой строки, другой тип списка игнорируется полностью. Это соответствует поведению абзацев. Например:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;A Paragraph.
* Not a list item.

1. Ordered list item.
* Not a separate list item.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;При подключенном расширении получится такой результат:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;A Paragraph.
* Not a list item.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;ol&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Ordered list item.
  * Not a separate list item.&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ol&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Во всех остальных случаях Sane Lists должно вести себя так же, как нормальные списки Markdown.&lt;/p&gt;
&lt;p&gt;Расширение не требует особых опций настройки.&lt;/p&gt;
&lt;h3 id="smartypants"&gt;SmartyPants&lt;/h3&gt;
&lt;p&gt;Расширение преобразует ASCII-символы тире, кавычек и многоточия в соответствующие &lt;abbr title="Hyper Text Markup Language"&gt;HTML&lt;/abbr&gt;-объекты&lt;/p&gt;
&lt;div class="colortable"&gt;&lt;/div&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ASCII-символ&lt;/th&gt;
&lt;th&gt;Замена&lt;/th&gt;
&lt;th&gt;&lt;abbr title="Hyper Text Markup Language"&gt;HTML&lt;/abbr&gt;-объект&lt;/th&gt;
&lt;th&gt;Заменяющие ключи&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;'&lt;/td&gt;
&lt;td&gt;&amp;lsquo; &amp;rsquo;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;amp;lsquo; &amp;amp;rsquo;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;'left-single-quote', 'right-single-quote'&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;"&lt;/td&gt;
&lt;td&gt;&amp;ldquo; &amp;rdquo;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;amp;ldquo; &amp;amp;rdquo;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;'left-double-quote', 'right-double-quote'&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;&amp;zwnj;&amp;lt; &gt;&amp;gt;&lt;/td&gt;
&lt;td&gt;&amp;laquo; &amp;raquo;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;amp;laquo; &amp;amp;raquo;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;'left-angle-quote', 'right-angle-quote'&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;td&gt;&amp;hellip;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;amp;hellip;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;'ellipsis'&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;--&lt;/td&gt;
&lt;td&gt;&amp;ndash;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;amp;ndash;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;'ndash'&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;---&lt;/td&gt;
&lt;td&gt;&amp;mdash;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;amp;mdash;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;'mdash'&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Используя опцию настройки &lt;code&gt;substitutions&lt;/code&gt;, вы можете перекрыть замены по умолчанию. Просто передайте отображение (mapping) словарика ключей для заменяющих строк.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Примечание&lt;/dt&gt;
&lt;dd&gt;прямые кавычки &amp;mdash; одиночная и парная &amp;mdash; закрываются от этого расширения обратным слэшем. Закрывающие угловые скобки &amp;mdash; тоже, причем, хоть обе, хоть только первая. Точки многоточия можно экранировать хоть каждую. А вот открывающие угловые скобки от преобразования в текст обратным слэшем не закрываются. Похоже, чтобы не заключать их в блок кода, их можно разделить символом нулевой длины &lt;code&gt;&amp;amp;zwnj;&lt;/code&gt;.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Например, можно использовать следующую конфигурацию, чтобы получить правильные кавычки по-немецки:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;extension_configs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;markdown.extensions.smarty&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;substitutions&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;left-single-quote&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;amp;sbquo;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c"&gt;# sb is not a typo!&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;right-single-quote&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;amp;lsquo;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;left-double-quote&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;amp;bdquo;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;right-double-quote&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;amp;ldquo;&amp;#39;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;dl&gt;
&lt;dt&gt;&lt;strong&gt;Имейте в виду:&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;Это расширение повторно реализует Python-библиотеку SmartyPants, включая ее в анализатор Markdown. Хотя оно не предоставляет никаких дополнительных особенностей, оно предлагает несколько преимуществ. В особенности, оно не будет пытаться работать в подсвечиваемых блоках кода (при использовании CodeHilite) подобно аналогичным библиотекам третьих сторон.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Для расширения доступны следующие опции настройки:&lt;/p&gt;
&lt;div class="colortable"&gt;&lt;/div&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Option&lt;/th&gt;
&lt;th&gt;Default value&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;smart_dashes&lt;/td&gt;
&lt;td&gt;True&lt;/td&gt;
&lt;td&gt;преобразовывать тире&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;smart_quotes&lt;/td&gt;
&lt;td&gt;True&lt;/td&gt;
&lt;td&gt;преобразовывать прямые кавычки&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;smart_angled_quotes&lt;/td&gt;
&lt;td&gt;False&lt;/td&gt;
&lt;td&gt;преобразовывать угловые кавычки&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;smart_ellipses&lt;/td&gt;
&lt;td&gt;True&lt;/td&gt;
&lt;td&gt;преобразовывать многоточия&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;substitutions&lt;/td&gt;
&lt;td&gt;{}&lt;/td&gt;
&lt;td&gt;перезаписывает замены по умолчанию&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Расширение SmartyPants основано не изначальной реализации SmartyPants Джона Грубера. Для получения информации о деталях почитайте &lt;a href="http://daringfireball.net/projects/smartypants/"&gt;документацию&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="table-of-contents"&gt;Table of Contents&lt;/h3&gt;
&lt;p&gt;Расширение создает содержание документа Markdown и добавляет его в результирующий &lt;abbr title="Hyper Text Markup Language"&gt;HTML&lt;/abbr&gt;-документ.&lt;/p&gt;
&lt;p&gt;Расширение включено в стандартную библиотеку Markdown.&lt;/p&gt;
&lt;p&gt;По умолчанию все заголовки автоматически получают уникальный атрибут &lt;code&gt;id&lt;/code&gt;, генерируемый на основе текста заголовка. Обратите внимание, в следующем примере все заголовки должны бы иметь одинаковый &lt;code&gt;id&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;#Header
#Header
#Header
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Получится так:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;header&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Header&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;header_1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Header&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;header_2&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Header&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Поместите маркер  в документе в том месте, где вам бы хотелось видеть содержание. Тогда вложенный список всех заголовков документа заменит этот маркер. Маркер по умолчанию &lt;code&gt;[TOC]&lt;/code&gt;, так что следующий документ&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[TOC]&lt;/span&gt;

&lt;span class="c1"&gt;# Header 1&lt;/span&gt;

&lt;span class="c1"&gt;## Header 2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;будет преобразован в такое:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;toc&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#header-1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Header 1&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#header-2&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Header 2&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;header-1&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Header 1&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;header-2&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Header 2&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Независимо от того, где в документе обнаружен &lt;code&gt;маркер&lt;/code&gt; (или отключен), содержание доступно в свойстве &lt;code&gt;toc&lt;/code&gt; класса Markdown. Это позволяет вставлять содержание в любое место шаблона страницы. Например:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; md = markdown.Markdown(extensions=[&amp;#39;markdown.extensions.toc&amp;#39;])
&amp;gt;&amp;gt;&amp;gt; html = md.convert(text)
&amp;gt;&amp;gt;&amp;gt; page = render_some_template(context={&amp;#39;body&amp;#39;: html, &amp;#39;toc&amp;#39;: md.toc})
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Для расширения доступны следующие опции настройки:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;marker&lt;/code&gt;&lt;/strong&gt;: Текст, который будет заменен на содержание. По умолчанию &lt;code&gt;[TOC]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Установите в пустую строку, чтобы отключить поиск маркера, что может сэкономить немного времени, особенно в больших документах.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;title&lt;/code&gt;&lt;/strong&gt;: Атрибут &lt;code&gt;title&lt;/code&gt;, который будет добавлен блоку &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; содержания. По умолчанию &lt;code&gt;None&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;anchorlink&lt;/code&gt;&lt;/strong&gt;: Установите в &lt;code&gt;True&lt;/code&gt;, чтобы все заголовки получили ссылку сами на себя. По умолчанию &lt;code&gt;False&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;permalink&lt;/code&gt;&lt;/strong&gt;: Установите в &lt;code&gt;True&lt;/code&gt; или строку, чтобы сгенерировать постоянную ссылку в конце каждого заголовка. Полезно для страниц в стиле Sphinx.&lt;/p&gt;
&lt;p&gt;Если установлено в &lt;code&gt;True&lt;/code&gt;, в качестве текста ссылки будет использован символ абзаца (¶ or &lt;code&gt;&amp;amp;para;&lt;/code&gt;). Если установить строку, она будет использоваться в качестве текста ссылки.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;baselevel&lt;/code&gt;&lt;/strong&gt;: Базовый уровень для заголовков. По умолчанию &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Настройка &lt;code&gt;baselevel&lt;/code&gt; позволяет автоматически подогнать уровни заголовков к иерархии шаблонов &lt;abbr title="Hyper Text Markup Language"&gt;HTML&lt;/abbr&gt;. Например, предположим, что страница текста Markdown не должна содержать заголовков уровня выше 3 (&lt;code&gt;&amp;lt;h&amp;gt;&lt;/code&gt;). Следующий пример показывает, как это сделать:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s"&gt;... #Some Header&lt;/span&gt;
&lt;span class="s"&gt;... ## Next Level&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;markdown.extensions.toc&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TocExtension&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;extensions&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TocExtension&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;baselevel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;h3&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;some_header&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Some&lt;/span&gt; &lt;span class="n"&gt;Header&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;h3&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;h4&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;next_level&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Next&lt;/span&gt; &lt;span class="n"&gt;Level&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;h4&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;slugify&lt;/code&gt;&lt;/strong&gt;: Вызываемый объект для генерации якорей (anchors)&lt;/p&gt;
&lt;p&gt;По умолчанию &lt;code&gt;markdown.extensions.headerid.slugify&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Если вы желаете использовать иной алгоритм для определения id, можете сделать свой Callable, который принимает два аргумента:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;value&lt;/code&gt;: строка для преобразования в slug&lt;/li&gt;
&lt;li&gt;&lt;code&gt;separator&lt;/code&gt;: разделитель слов&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;separator&lt;/code&gt;&lt;/strong&gt;: Разделитель слов. Символ, который заменяет пробелы в &lt;code&gt;id&lt;/code&gt;. По умолчанию &lt;code&gt;-&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;dl&gt;
&lt;dt&gt;Примечание&lt;/dt&gt;
&lt;dd&gt;Если перед маркером &lt;code&gt;[TOC]&lt;/code&gt; вставить заголовок содержания, оформив его в виде заголовка, например, &lt;code&gt;## Содержание&lt;/code&gt;, то этот заголовок будет тоже вставлен в содержание, придавая ему вполне дурацкий вид. Поэтому обозначить TOC надо как-то иначе, либо тупо выделением &lt;code&gt;**Оглавление**&lt;/code&gt;, либо обозначив абзацу с псевдозаголовком собственный класс (при помощи Attribute Lists), для которого можно нарисовать красивое (или такое же, как у остальных заголовков) оформление в CSS-файле.&lt;/dd&gt;
&lt;/dl&gt;
&lt;h3 id="wikilinks"&gt;WikiLinks&lt;/h3&gt;
&lt;p&gt;Расширение добавляет поддержку WikiLinks.  А именно, любое слово [[в скобках]] будет преобразовано в ссылку.&lt;/p&gt;
&lt;p&gt;Расширение включено в стандартную библиотеку Markdown.&lt;/p&gt;
&lt;p&gt;Слово [[в скобках]] &amp;mdash; это любая комбинация букв в верхнем и нижнем регистре, цифр, дефисов, подчеркиваний и пробелов, окруженных двойными квадратными скобками. То есть,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;[[Bracketed]]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;будет преобразовано в&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/Bracketed/&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;wikilink&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Bracketed&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Имейте в виду, что WikiLinks автоматически присваивает &lt;code&gt;class="wikilink"&lt;/code&gt;, что упрощает применение стиля WikiLinks, отличающегося от других ссылок на странице, если  это желательно. Смотрите ниже, как изменить этот класс.&lt;/p&gt;
&lt;p&gt;Кроме того, если используются пробелы, они будут преобразованы в символ подчеркивания в ссылке, но оставлены как есть в тексте ссылки. Наверное, этот пример проиллюстрирует лучше:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;Wiki&lt;/span&gt; &lt;span class="n"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;станет&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/Wiki_Link/&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;wikilink&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Wiki Link&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Поведением по умолчанию является указание каждой ссылки на корневой каталог документа в текущем домене и закрывать слэшем. Дополнительно, каждой ссылке присваивается &lt;abbr title="Hyper Text Markup Language"&gt;HTML&lt;/abbr&gt;-класс &lt;code&gt;wikilink&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Для расширения доступны следующие опции настройки:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;base_url&lt;/code&gt;&lt;/strong&gt;: Строка для добавления в начале URL. По умолчанию &lt;code&gt;/&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;end_url&lt;/code&gt;&lt;/strong&gt;: Строка для добавления в конце URL. По умолчанию &lt;code&gt;/&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;html_class&lt;/code&gt;&lt;/strong&gt;: CSS-класс. Оставьте пустым, чтобы не использовать никакой. По умолчанию &lt;code&gt;wikilink&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;build_url&lt;/code&gt;&lt;/strong&gt;: Вызываемый объект, который формирует URL из его частей.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Например, давайте предположим, что ссылки должны всегда указывать на подкаталог &lt;code&gt;/wiki/&lt;/code&gt; и заканчиваться на &lt;code&gt;.html&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;markdown.extensions.wikilinks&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;WikiLinkExtension&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;extensions&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;WikiLinkExtension&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base_url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/wiki/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end_url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Вышеприведенное в результате сделает такие ссылки из [[WikiLink]]:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/wiki/WikiLink.html&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;wikilink&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;WikiLink&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Если вы хотите нечто большее, чем просто изменить начало и/или конец URL, вы можете также сделать вызываемый объект, который должен принимать три аргумента (&lt;code&gt;label&lt;/code&gt;, &lt;code&gt;base&lt;/code&gt; и &lt;code&gt;end&lt;/code&gt;). Этот объект должен возвращать URL целиком.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; def my_url_builder(label, base, end):
...    # do stuff
...    return url
...
&amp;gt;&amp;gt;&amp;gt; html = markdown.markdown(text,
...     extensions=[WikiLinkExtension(build_url=my_url_builder)],
... )
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Также предоставляется опция для изменения или удаления атрибута class.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; html = markdown.markdown(text,
...     extensions=[WikiLinkExtension(html_class=&amp;#39;myclass&amp;#39;)]
... )
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;приведет к присвоению Wiki-ссылкам класса &lt;code&gt;myclass&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/WikiLink/&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;myclass&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;WikiLink&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Данное расширение также поддерживает расширение Meta-Data. Пожалуйста, посмотрите его документацию насчет особенностей применения. Поддерживаются такие ключевые слова метаданных:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;wiki_base_url&lt;/li&gt;
&lt;li&gt;wiki_end_url&lt;/li&gt;
&lt;li&gt;wiki_html_class&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Если используются метаданные, они будут перекрывать установки, предоставляемые интерфейсом &lt;code&gt;extension_configs&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Документ&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;wiki_base_url&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="n"&gt;wiki_end_url&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;html&lt;/span&gt;
&lt;span class="n"&gt;wiki_html_class&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;

&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;WikiLink&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="n"&gt;paragraph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;будет переделан в такой результат (обратите внимание на пустой &lt;code&gt;wiki_html_class&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;A &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://example.com/WikiLink.html&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;WikiLink&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; in the first paragraph.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="_7"&gt;Заключение&lt;/h2&gt;
&lt;p&gt;Итак, теперь примерно понятно, что за зверь &amp;mdash; Markdown, как с ним дружить, как его использовать и настраивать, а также выйти за рамки стандартных возможностей при помощи расширений.&lt;/p&gt;
&lt;p&gt;Что касается расширений:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Extra должно быть подключено обязательно. Не зря оно включено по умолчанию, оно обеспечивает в том числе базовую функциональность.&lt;/li&gt;
&lt;li&gt;CodeHilite однозначно необходимо, если есть желание поделиться на своих страницах примерами кода. Правда, подсветка синтаксиса &amp;mdash; выбор темы, настройка отображения и все такое &amp;mdash; тема отдельного разговора.&lt;/li&gt;
&lt;li&gt;Table of Contents чрезвычайно полезно, если страница получилась довольно длинной и содержит порядочное количество глав под заголовками. Причем, содержание можно вынести даже в сайдбар или футер, если воспользоваться свойством md.toc объекта Markdown и вставить его в шаблон в нужном месте, используя синтаксис jinja2, но это тоже тема отдельного разговора.&lt;/li&gt;
&lt;li&gt;SmartyPants очень удобно, если есть желание привести знаки препинания к виду, принятому в отечественной типографике &amp;mdash; длинные тире, кавычки-&amp;laquo;елочки&amp;raquo;. Без этого расширения придется либо сразу вбивать в тексте &lt;abbr title="Hyper Text Markup Language"&gt;HTML&lt;/abbr&gt;-спецсимволы, либо делать соответствующие замены в своем редакторе после написания статьи.&lt;/li&gt;
&lt;li&gt;Остальные расширения из числа стандартных, на мой взгляд, весьма условно полезны. А Meta-Data вообще полезна скорее программисту, чем пользователю, и может пригодиться разве что при разработке своих расширений.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Стало быть, в файле настройки Pelican &lt;code&gt;pelicanconf.py&lt;/code&gt; следует добавить строку&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;MD_EXTENSIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;codehilite(css_class=highlight)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;extra&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;toc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;smarty(smart_angled_quotes=True)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(может быть, еще туда же admonition, sane_lists и nl2br при желании), и, применяя полученные из документации знания, наслаждаться результатом.&lt;/p&gt;
&lt;p&gt;И еще один момент, связанный с отличиями CMS от статического сайта, собранного генератором: если для CMS можно писать контент где угодно, потом откуда угодно забросить его в базу сайта, внешний вид страниц не будет зависеть от местоположения автора. Если же написать статью и запустить сборку сайта дома, на компьютере, а потом продолжить заниматься этим, скажем, в отпуске, пользуясь ноутбуком и гостиничным вайфаем, надо сначала убедиться, что конфигурация Pelican на домашнем компьютере и ноутбуке совпадают. То есть, версии Python одинаковые, модули установлены одинаковые и одинаковых версий, темы сайта одинаковые, файлы настройки pelicanconf.py и publishconf.py совпадают. И, конечно же, все остальные материалы сайта присутствуют на обеих вычислительных машинах в полном объеме. Это не проблема, сегодня нетрудно синхронизировать информацию на разных устройствах по сети, а наполнять сайт без сети все равно не получится. Однако, об этом тоже надо не забывать.&lt;/p&gt;</summary><category term="pelican"></category><category term="markdown"></category></entry><entry><title>Pelican и использование Markdown</title><link href="http://romeogolf.github.io/pelican-i-ispolzovanie-markdown.html" rel="alternate"></link><updated>2016-01-27T20:00:00+05:00</updated><author><name>RomeoGolf</name></author><id>tag:romeogolf.github.io,2016-01-27:pelican-i-ispolzovanie-markdown.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Содержание&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#1"&gt;Зачем Markdown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2"&gt;Простые примеры&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#2_1"&gt;Заголовки&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2_2"&gt;Горизонтальные линии&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2_3"&gt;Таблицы&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2_4"&gt;Абзацы и внутристрочные элементы&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2_5"&gt;Блочная разметка: цитаты и блоки кода&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2_6"&gt;Списки&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2_7"&gt;Ссылки, картинки и их комбинация&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#3"&gt;Некоторые особенности и тонкости&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="1"&gt;Зачем Markdown&lt;/h2&gt;
&lt;p&gt;Строго говоря, написанное под этим заголовком существенной частью относится и к reStructuredText, но беглый взгляд на два текста, написанных в этих форматах, лично меня склонил именно к .md, хотя и пришлось ставить дополнительный модуль для Python.&lt;/p&gt;
&lt;p&gt;Markdown &amp;mdash; упрощенный (или облегченный) язык разметки. В отличие от, скажем, HTML, который тоже язык разметки, но не упрощенный и не облегченный, Markdown сам по себе практически не используется, а служит промежуточным &amp;laquo;буфером&amp;raquo; для последующего преобразования в другой язык, который будет отображаться, в нашем случае &amp;mdash; в HTML, но можно и в Rich Text, XML или еще куда-нибудь.&lt;/p&gt;
&lt;p&gt;Markdown хорош тем, что с его использованием писать статью существенно быстрее и проще, нежели непосредственно на HTML. В ряде случаев необходимые HTML-теги будут вставлены в сгенерированный текст в соответствии с контекстом (и ничего специально писать не надо), например, абзацы или списки. В других случаях некие пометки добавить все же надо &amp;mdash; например, два пробела в конце строки вместо тега &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt; или &lt;code&gt;##&lt;/code&gt; перед заголовком вместо обрамления ее тегами &lt;code&gt;&amp;lt;h2&amp;gt; .. &amp;lt;/h2&amp;gt;&lt;/code&gt;, однако эти символы добавляются проще и быстрее тегов. Их использование нисколько не ухудшает человекочитаемость, ведь строчка из звездочек больше похожа на линию отчеркивания, чем знакосочетание &lt;code&gt;&amp;lt;hr&amp;gt;&lt;/code&gt; Кроме того, можно довольно быстро переделать форматированием в Markdown готовый текст, написанный без разметки.&lt;/p&gt;
&lt;p&gt;Вольный перевод кусочка из официальной документации:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Markdown &amp;mdash; не замена HTML. Его синтаксис охватывает только очень малое подмножество HTML-тегов. Идея состоит не в том, чтобы упростить ввод тегов. По моему мнению, HTML-теги и так уже просты для вставки. Идея Markdown в том, чтобы упростить чтение, запись и редактирование прозы. HTML &amp;mdash; это формат для &lt;em&gt;публикации&lt;/em&gt;, а Markdown &amp;mdash; формат для &lt;em&gt;написания&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;На заметку тем, кто знает HTML, как родной, и предпочитает писать сразу на нем (благо, Pelican это позволяет): еще одно преимущество Markdown, весьма заметное при желании поделиться в тексте примером кода с красиво (ну, или хоть как-нибудь) подсвеченным синтаксисом &amp;mdash; pygments (который это умеет) работает в связке именно с &amp;laquo;буфером&amp;raquo;, Markdown или reStructuredText. На HTML будет недостаточно окружить код тегами &lt;code&gt;&amp;lt;code&amp;gt; .. &amp;lt;/code&amp;gt;&lt;/code&gt;, придется каждый элемент кода, который надо выделить особым образом, окружать соответствующими тегами, типа &lt;code&gt;&amp;lt;span class="n"&amp;gt;href&amp;lt;/span&amp;gt;&lt;/code&gt;, а потом писать в CSS-файле способ отображения класса &amp;laquo;n&amp;raquo;. А pygments может сделать все это самостоятельно.&lt;/p&gt;
&lt;h2 id="2"&gt;Простые примеры&lt;/h2&gt;
&lt;p&gt;Как я уже упоминал в другой статье, описания и примеров этого дела в интернете немало. Но добавлю все же и здесь, в формате &amp;laquo;код &amp;mdash; вид&amp;raquo;. Основные синтаксические штучки, доступные в пеликане &amp;laquo;из коробки&amp;raquo;, что надо написать, и как это будет выглядеть:&lt;/p&gt;
&lt;h3 id="2_1"&gt;Заголовки&lt;/h3&gt;
&lt;p&gt;Статья начинается с заголовка, так что и здесь начнем с них же &amp;mdash; заголовки (количество символов &lt;code&gt;#&lt;/code&gt; соответствует числу в теге &lt;code&gt;&amp;lt;h &amp;gt;&lt;/code&gt;):&lt;/p&gt;
&lt;div class="equi_height"&gt;
&lt;div markdown="1"&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;# &lt;/span&gt;&lt;span class="gh"&gt;Заголовок 1&lt;/span&gt;
&lt;span class="k"&gt;## &lt;/span&gt;&lt;span class="gh"&gt;Заголовок 2 с id {#id_header2}&lt;/span&gt;
&lt;span class="k"&gt;###### &lt;/span&gt;&lt;span class="gh"&gt;Заголовок 6&lt;/span&gt;
####### Заголовок 7

&lt;span class="gh"&gt;заголовок&lt;/span&gt;
&lt;span class="k"&gt;=========&lt;/span&gt;

&lt;span class="gh"&gt;заголовок&lt;/span&gt;
&lt;span class="k"&gt;---------&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;div&gt;
&lt;h1 id="1_1"&gt;Заголовок 1&lt;/h1&gt;
&lt;h2 id="id_header2"&gt;Заголовок 2 с id&lt;/h2&gt;
&lt;h6 id="6"&gt;Заголовок 6&lt;/h6&gt;
&lt;h6 id="7"&gt;# Заголовок 7&lt;/h6&gt;
&lt;h1 id="_1"&gt;заголовок&lt;/h1&gt;
&lt;h2 id="_2"&gt;заголовок&lt;/h2&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Забавно, что если поставить больше 6 знаков &lt;code&gt;#&lt;/code&gt;, то 6 из них воспримутся в качестве уровня заголовка, а остальные войдут в текст заголовка. Остальные будут отображаться в соответствии с таблицами стилей, как задано для &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; &amp;ndash; &lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt;. А еще заголовок можно отчеркнуть минусами или знаком равенства, получится второй и первый уровни соответственно, при этом, надо такой заголовок отделить с обеих сторон пустыми строками, как абзац.&lt;/p&gt;
&lt;h3 id="2_2"&gt;Горизонтальные линии&lt;/h3&gt;
&lt;p&gt;Линии отчеркивания можно нарисовать звездочками, минусами или символом подчеркивания, слитно или через пробелы. Только надо следить, чтобы у них тоже сверху и снизу были пустые строки, а то при обработке их могут принять за часть заголовка или маркированного списка. А вот линия из знаков равенства ничего особенного не делает и рисуется, как есть:
&lt;div markdown="1" class="equi_height"&gt;
&lt;div markdown="1"&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;**&lt;/span&gt;&lt;span class="gs"&gt;*&lt;/span&gt;&lt;span class="k"&gt;**&lt;/span&gt;*

&lt;span class="k"&gt;* * * *&lt;/span&gt;

&lt;span class="k"&gt;-------&lt;/span&gt;

&lt;span class="k"&gt;- - - -&lt;/span&gt;

&lt;span class="k"&gt;_______&lt;/span&gt;

&lt;span class="k"&gt;_ _ _ _&lt;/span&gt;


=====================
&lt;/pre&gt;&lt;/div&gt;


&lt;/div&gt;

&lt;div&gt;
&lt;hr /&gt;
&lt;hr /&gt;
&lt;hr /&gt;
&lt;hr /&gt;
&lt;hr /&gt;
&lt;hr /&gt;
&lt;p&gt;=====================&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id="2_3"&gt;Таблицы&lt;/h3&gt;
&lt;p&gt;Таблицы можно разметить псевдографикой. Границы по умолчанию не прорисовываются, заголовки по умолчанию центрируются (поведение корректируется при помощи CSS), а выравнивание строк в столбце можно отрегулировать двоеточием в разделительной линии ниже заголовка, как в примере:
&lt;div markdown="1" class="equi_height"&gt;
&lt;div markdown="1"&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;| 1 | 2 (правый) | 3 (центр) |
|---|-----------:|:---------:|
| ячейка 1.1 | ячейка 2.1 | ячейка 3.1 
| 1.2 | 2.2 | 3.2 так
| 1.3 | 2.3 с буквами | 3.3 и сяк
&lt;/pre&gt;&lt;/div&gt;


&lt;/div&gt;

&lt;div&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th align="right"&gt;2 (правый)&lt;/th&gt;
&lt;th align="center"&gt;3 (центр)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ячейка 1.1&lt;/td&gt;
&lt;td align="right"&gt;ячейка 2.1&lt;/td&gt;
&lt;td align="center"&gt;ячейка 3.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1.2&lt;/td&gt;
&lt;td align="right"&gt;2.2&lt;/td&gt;
&lt;td align="center"&gt;3.2 так&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1.3&lt;/td&gt;
&lt;td align="right"&gt;2.3 с буквами&lt;/td&gt;
&lt;td align="center"&gt;3.3 и сяк&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id="2_4"&gt;Абзацы и внутристрочные элементы&lt;/h3&gt;
&lt;div class="equi_height"&gt;
&lt;div markdown="1"&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;&amp;lt;!--&lt;/span&gt;&lt;span class="c-MultiLine"&gt; Можно использовать комментарии&lt;/span&gt;
&lt;span class="c-MultiLine"&gt;в стиле HTML, чтобы не показывать &lt;/span&gt;
&lt;span class="c-MultiLine"&gt;часть текста в обработанной странице &lt;/span&gt;&lt;span class="k"&gt;--&amp;gt;&lt;/span&gt;

Пример Footnote[^1] в тексте. Будет
вынесена вниз страницы.
&lt;span class="k"&gt;&amp;lt;!--&lt;/span&gt;&lt;span class="c-MultiLine"&gt; Такие штуки надо размещать сразу же: &lt;/span&gt;&lt;span class="k"&gt;--&amp;gt;&lt;/span&gt;
[^1]: Footnote по-русски &lt;span class="ss"&gt;&amp;amp;mdash;&lt;/span&gt; сноска

Словарь
: книга, содержащая перечень слов
с пояснениями и толкованиями

пример аббревиатуры: ИМХО
&lt;span class="k"&gt;&amp;lt;!--&lt;/span&gt;&lt;span class="c-MultiLine"&gt; Такие штуки тоже надо размещать сразу же: &lt;/span&gt;&lt;span class="k"&gt;--&amp;gt;&lt;/span&gt;
*[ИМХО]: Имею Мнение &lt;span class="ss"&gt;&amp;amp;mdash;&lt;/span&gt; Хрен Оспоришь

Абзац создается разделением
пустыми строками, 
даже если строки абзаца
имеют простые переносы.

Однако, по два пробела  
на концах строк делают  
перенос строки без абзаца:  
&lt;span class="k"&gt;**&lt;/span&gt;&lt;span class="gs"&gt;выделение&lt;/span&gt;&lt;span class="k"&gt;**&lt;/span&gt; тегом &lt;span class="k"&gt;__&lt;/span&gt;&lt;span class="gs"&gt;strong&lt;/span&gt;&lt;span class="k"&gt;__&lt;/span&gt;  
&lt;span class="k"&gt;*&lt;/span&gt;&lt;span class="ge"&gt;выделение&lt;/span&gt;&lt;span class="k"&gt;*&lt;/span&gt; тегом &lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="ge"&gt;emphasize&lt;/span&gt;&lt;span class="k"&gt;_&lt;/span&gt;  
&lt;span class="k"&gt;**&lt;/span&gt;&lt;span class="gs"&gt;*можно&lt;/span&gt;&lt;span class="k"&gt;**&lt;/span&gt;* оба &lt;span class="k"&gt;__&lt;/span&gt;&lt;span class="gs"&gt;*сразу*&lt;/span&gt;&lt;span class="k"&gt;__&lt;/span&gt;  
внутристрочный &lt;span class="k"&gt;`&lt;/span&gt;&lt;span class="sb"&gt;&amp;lt;h1&amp;gt;блок кода&amp;lt;/h1&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;`&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;div style="max-width:350px"&gt;
&lt;!-- Можно использовать комментарии
в стиле HTML, чтобы не показывать 
часть текста в обработанной странице --&gt;

&lt;p&gt;Пример Footnote&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1" rel="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; в тексте. Будет
вынесена вниз страницы.
&lt;!-- Такие штуки надо размещать сразу же: --&gt;&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Словарь&lt;/dt&gt;
&lt;dd&gt;книга, содержащая перечень слов
с пояснениями и толкованиями&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;пример аббревиатуры: &lt;abbr title="Имею Мнение &amp;amp;mdash; Хрен Оспоришь"&gt;ИМХО&lt;/abbr&gt;
&lt;!-- Такие штуки тоже надо размещать сразу же: --&gt;&lt;/p&gt;
&lt;p&gt;Абзац создается разделением
пустыми строками, 
даже если строки абзаца
имеют простые переносы.&lt;/p&gt;
&lt;p&gt;Однако, по два пробела&lt;br /&gt;
на концах строк делают&lt;br /&gt;
перенос строки без абзаца:&lt;br /&gt;
&lt;strong&gt;выделение&lt;/strong&gt; тегом &lt;strong&gt;strong&lt;/strong&gt;&lt;br /&gt;
&lt;em&gt;выделение&lt;/em&gt; тегом &lt;em&gt;emphasize&lt;/em&gt;&lt;br /&gt;
&lt;strong&gt;&lt;em&gt;можно&lt;/em&gt;&lt;/strong&gt; оба &lt;strong&gt;&lt;em&gt;сразу&lt;/em&gt;&lt;/strong&gt;&lt;br /&gt;
внутристрочный &lt;code&gt;&amp;lt;h1&amp;gt;блок кода&amp;lt;/h1&amp;gt;&lt;/code&gt;  &lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Некоторые символы могут иметь особое значение. Вот пример их использования:
&lt;div markdown="1" class="equi_height"&gt;
&lt;div markdown="1"&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Использование HTML-тегов:
&lt;span class="c1"&gt;&amp;lt;span style=&amp;quot;text-shadow: black&lt;/span&gt;
&lt;span class="c1"&gt;1px 1px 2px, red 0 0 1em;&lt;/span&gt;
&lt;span class="c1"&gt;text-transform: uppercase;&amp;quot;&amp;gt;пример&amp;lt;/span&amp;gt;&lt;/span&gt;

использование спецсимволов  
(пример): &lt;span class="ss"&gt;&amp;amp;copy;&lt;/span&gt; &lt;span class="ss"&gt;&amp;amp;raquo;&amp;amp;mdash;&amp;amp;laquo;&lt;/span&gt;

использование служебных символов:  
&amp;lt; &amp;gt; * [ ] { } ( ) &lt;span class="se"&gt;\ &lt;/span&gt;_ # + - . !

использование служебных символов  
в сложных случаях: 
&amp;lt;a&lt;span class="se"&gt;\&amp;gt;&lt;/span&gt; &lt;span class="se"&gt;\[&lt;/span&gt;a&lt;span class="se"&gt;\]\(&lt;/span&gt;a&lt;span class="se"&gt;\)&lt;/span&gt; &lt;span class="se"&gt;\`&lt;/span&gt;a&lt;span class="se"&gt;\`&lt;/span&gt; &lt;span class="se"&gt;\_&lt;/span&gt;a&lt;span class="se"&gt;\_&lt;/span&gt; #a

&lt;span class="se"&gt;\#&lt;/span&gt;#a
&lt;/pre&gt;&lt;/div&gt;


&lt;/div&gt;

&lt;div&gt;
&lt;p&gt;Использование HTML-тегов:
&lt;span style="text-shadow: black
1px 1px 2px, red 0 0 1em;
text-transform: uppercase;"&gt;пример&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;использование спецсимволов&lt;br /&gt;
(пример): &amp;copy; &amp;raquo;&amp;mdash;&amp;laquo;&lt;/p&gt;
&lt;p&gt;использование служебных символов:&lt;br /&gt;
&amp;lt; &amp;gt; * [ ] { } ( ) \ _ # + - . !&lt;/p&gt;
&lt;p&gt;использование служебных символов&lt;br /&gt;
в сложных случаях: 
&amp;lt;a&gt; [a](a) `a` _a_ #a &lt;/p&gt;
&lt;p&gt;##a&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;В общих случаях генератор веб-страниц достаточно умен, чтобы понять, используется угловая скобка для обозначения HTML-тега или сама по себе, в других целях. То же касается и прочих символов, которые могут быть служебными как для HTML, так и для самого Markdown. Также он догадывается, что если &lt;code&gt;#&lt;/code&gt; не в начале строки &amp;mdash; то это не заголовок, если скобки [] и () не вплотную друг к другу &amp;mdash; то это не ссылка. В тех же случаях, когда использование таких символов очень уж похоже на служебное, следует подсказать генератору оставить символ в покое при помощи традиционного обратного слэша. Причем, для угловых скобок достаточно закрыть закрывающую (простите за тавтологию, но так уж есть).&lt;/p&gt;
&lt;h3 id="2_5"&gt;Блочная разметка: цитаты и блоки кода&lt;/h3&gt;
&lt;p&gt;Под блоками кода подразумеваются блоки предварительно отформатированного текста, которые будут отображаться так, как их напечатали, а не по правилам HTML или Markdown. При этом, в них можно включить подсветку синтаксиса, если это действительно программный код. Подсветку необходимо предварительно настроить, добавив файл CSS для кода, а также подключить способом, предусмотренным в используемой теме: либо в файле конфигурации, либо напрямую в шаблоне. Цитаты упаковываются в теги &lt;code&gt;&amp;lt;blockquote&amp;gt;&lt;/code&gt;, и их отображение можно настроить в стилевом файле.&lt;/p&gt;
&lt;div class="equi_height"&gt;
&lt;div markdown="1"&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;&amp;gt; &lt;/span&gt;Цитата умного человека &lt;span class="ss"&gt;&amp;amp;mdash;&lt;/span&gt; 
почти афоризм.

или так (то же самое):

&lt;span class="k"&gt;&amp;gt; &lt;/span&gt;Цитата умного человека &lt;span class="ss"&gt;&amp;amp;mdash;&lt;/span&gt; 
&lt;span class="k"&gt;&amp;gt; &lt;/span&gt;почти афоризм.

    Отступ в 4 пробела или 1 таб:
    будет окружено тегом &amp;lt;pre&amp;gt;,
    а если включена подсветка -
    то и подсвечено. Можно печатать
    всё: [a](http://a) &amp;lt;html&amp;gt; &lt;span class="k"&gt;`&lt;/span&gt;&lt;span class="sb"&gt;ы&lt;/span&gt;&lt;span class="k"&gt;`&lt;/span&gt;
    Сделано для блоков кода.

&lt;span class="k"&gt;```&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;:::c&lt;/span&gt;
&lt;span class="cp"&gt;void sample_func(int j) {&lt;/span&gt;
&lt;span class="cp"&gt;    printf(j);&lt;/span&gt;
&lt;span class="cp"&gt;}&lt;/span&gt;

&lt;span class="cp"&gt;for (int i = 0; i &amp;lt; 9; i++) {&lt;/span&gt;
&lt;span class="cp"&gt;    sample_func(i);&lt;/span&gt;
&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;/* &lt;/span&gt;
&lt;span class="cp"&gt; * по сути, то же самое, плюс&lt;/span&gt;
&lt;span class="cp"&gt; * указание языка для подсветки.&lt;/span&gt;
&lt;span class="cp"&gt; * вместо ``` можно &lt;/span&gt;
&lt;span class="cp"&gt; * использовать ~~~&lt;/span&gt;
&lt;span class="cp"&gt; */&lt;/span&gt;
&lt;span class="k"&gt;```&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;div style="max-width:350px"&gt;
&lt;blockquote&gt;
&lt;p&gt;Цитата умного 
человека &amp;mdash; 
почти афоризм.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;или так (то же самое):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Цитата умного 
человека &amp;mdash; 
почти афоризм.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Отступ в 4 пробела или 1 таб:
будет окружено тегом &amp;lt;pre&amp;gt;,
а если включена подсветка -
то и подсвечено. Можно печатать
всё: [a](http://a) &amp;lt;html&amp;gt; `ы`
Сделано для блоков кода.
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;sample_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;sample_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cm"&gt;/* &lt;/span&gt;
&lt;span class="cm"&gt; * по сути, то же самое, плюс&lt;/span&gt;
&lt;span class="cm"&gt; * указание языка для подсветки.&lt;/span&gt;
&lt;span class="cm"&gt; * вместо ``` можно &lt;/span&gt;
&lt;span class="cm"&gt; * использовать ~~~&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Цитаты могут быть вложенными, если угловые скобочки удвоить. Кроме того, в цитаты можно вкладывать другие форматированные штучки, типа внутристрочного кода или списков.&lt;/p&gt;
&lt;h3 id="2_6"&gt;Списки&lt;/h3&gt;
&lt;div class="equi_height"&gt;
&lt;div markdown="1"&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;Маркированный:

&lt;span class="k"&gt;* &lt;/span&gt;пункт
&lt;span class="k"&gt;* &lt;/span&gt;еще пункт

Нумерованный:

&lt;span class="k"&gt;1. &lt;/span&gt;первый
&lt;span class="k"&gt;2. &lt;/span&gt;второй

Смешанный:

&lt;span class="k"&gt;1. &lt;/span&gt;пунктик с подпунктиками
&lt;span class="k"&gt;    * &lt;/span&gt;4 пробела дают
&lt;span class="k"&gt;    + &lt;/span&gt;вложенность, а маркеры
&lt;span class="k"&gt;    - &lt;/span&gt;могут быть разными
&lt;span class="k"&gt;3. &lt;/span&gt;Цифры тоже неважны,
&lt;span class="k"&gt;98. &lt;/span&gt;лишь бы цифры.

    Можно сделать абзац
    внутри списка

&lt;span class="k"&gt;    * &lt;/span&gt;и даже внутри подпункта

        тоже можно сделать абзац.

&lt;span class="k"&gt;    * &lt;/span&gt;Еще одна вложенность.

&lt;span class="k"&gt;7. &lt;/span&gt;Надо только не забывать 
отступы и пустые строки.
&lt;/pre&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Маркированный:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;пункт&lt;/li&gt;
&lt;li&gt;еще пункт&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Нумерованный:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;первый&lt;/li&gt;
&lt;li&gt;второй&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Смешанный:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;пунктик с подпунктиками&lt;ul&gt;
&lt;li&gt;4 пробела дают&lt;/li&gt;
&lt;li&gt;вложенность, а маркеры&lt;/li&gt;
&lt;li&gt;могут быть разными&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Цифры тоже неважны,&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;лишь бы цифры.&lt;/p&gt;
&lt;p&gt;Можно сделать абзац
внутри списка&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;и даже внутри подпункта&lt;/p&gt;
&lt;p&gt;тоже можно сделать абзац.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Еще одна вложенность.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Надо только не забывать 
отступы и пустые строки.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id="2_7"&gt;Ссылки, картинки и их комбинация&lt;/h3&gt;
&lt;div class="equi_height"&gt;
&lt;div markdown="1"&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;Простая автоматическая ссылка:  
&amp;lt;http://romeogolf.github.io&amp;gt;  

Чуть посложнее:
[Мой сайт](http://romeogolf.github.io &amp;quot;Ссылка&amp;quot;)

Ссылочная (сносочная? референсная?)  
ссылка: [Снова мой сайт][my_site]
или так: [Site][]

А где-нибудь ниже по тексту надо  
определить ссылку по указанному  
идентификатору.

Ссылка на [заголовок](#id_header2),  
который мы пометили идентификатором выше

Ссылка на собственную страницу,  
еще в исходном тексте:  
абсолютная (от корня content)  
[Рыба]({filename}/pages/test_page.md)  
или относительно этой страницы  
[Рыба]({filename}../../pages/test_page.md)

Статьи с тегом [pelican]({tag}pelican)  
или в категории [Блог]({category}Блог)

Картинка напрямую:
![флаги](./images/rg.png &amp;quot;romeo golf&amp;quot;)  
или через исходное размещение:
![флаги]
({filename}/images/rg.png &amp;quot;romeo golf&amp;quot;)

Картинка через сноску:
![флаги romeo и golf][flags]

Картинка и ссылка вместе:
[![флаги][flags]][my_site]
или так:
[![флаги](./images/rg.png)](http://romeogolf.github.io/)

[my_site]: http://romeogolf.github.io/
[Site]: http://romeogolf.github.io/  &amp;quot;Ссылка&amp;quot;
[flags]: ./images/rg.png (romeo golf)
&lt;/pre&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;Простая автоматическая ссылка:&lt;br /&gt;
&lt;a href="http://romeogolf.github.io"&gt;http://romeogolf.github.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Чуть посложнее:
&lt;a href="http://romeogolf.github.io" title="Ссылка"&gt;Мой сайт&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ссылочная (сносочная? референсная?)&lt;br /&gt;
ссылка: &lt;a href="http://romeogolf.github/io/"&gt;Снова мой сайт&lt;/a&gt;
или так: &lt;a href="http://romeogolf.github/io/" title="Ссылка"&gt;Site&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;А где-нибудь ниже по тексту надо&lt;br /&gt;
определить ссылку по указанному&lt;br /&gt;
идентификатору.&lt;/p&gt;
&lt;p&gt;Ссылка на &lt;a href="#id_header2"&gt;заголовок&lt;/a&gt;,&lt;br /&gt;
который мы пометили идентификатором выше&lt;/p&gt;
&lt;p&gt;Ссылка на собственную страницу,&lt;br /&gt;
еще в исходном тексте:&lt;br /&gt;
абсолютная (от корня content)&lt;br /&gt;
&lt;a href="http://romeogolf.github.io/pages/testovaia-stranitsa.html"&gt;Рыба&lt;/a&gt;&lt;br /&gt;
или относительно этой страницы&lt;br /&gt;
&lt;a href="http://romeogolf.github.io/pages/testovaia-stranitsa.html"&gt;Рыба&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Статьи с тегом &lt;a href="http://romeogolf.github.io/tag/pelican.html"&gt;pelican&lt;/a&gt;&lt;br /&gt;
или в категории &lt;a href="http://romeogolf.github.io/category/blog.html"&gt;Блог&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Картинка напрямую:
&lt;img alt="флаги" src="./images/rg.png" title="romeo golf" /&gt;&lt;br /&gt;
или через исходное размещение:
&lt;img alt="флаги" src="http://romeogolf.github.io/images/rg.png" title="romeo golf" /&gt;&lt;/p&gt;
&lt;p&gt;Картинка через сноску:
&lt;img alt="флаги romeo и golf" src="./images/rg.png" title="romeo golf" /&gt;&lt;/p&gt;
&lt;p&gt;Картинка и ссылка вместе:
&lt;a href="http://romeogolf.github/io/"&gt;&lt;img alt="флаги" src="./images/rg.png" title="romeo golf" /&gt;&lt;/a&gt;
или так:
&lt;a href="http://romeogolf.github.io/"&gt;&lt;img alt="флаги" src="./images/rg.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Как видно из примера, картинка отличается от ссылки восклицательным знаком перед первой скобкой. В первых квадратных скобках идет текст ссылки или альтернативный текст для картинки (который отображается, если картинку по какой-то причине не видно), в круглых скобках &amp;mdash; путь к объекту, а также необязательный текст в кавычках, который будет атрибутом title (во всплывающей подсказке при наведении мыши на ссылку или картинку).&lt;/p&gt;
&lt;p&gt;Удобно пользоваться сносочноым типом ссылки, когда вместо адреса в круглых скобках пишется идентификатор в квадратных, а ниже дается расшифровка &amp;mdash; тоже путь к объекту и необязательный title в кавычках (одинарных или двойных) или скобках. Ссылка через сноску хороша тем, что можно использовать одну и ту же ссылку или картинку в нескольких местах по тексту. Кроме того, удобно держать все ссылки рядом, на случай, если придется их перестраивать.&lt;/p&gt;
&lt;p&gt;При сносочном типе ссылки можно вторую пару квадратных скобок оставить пустой или вообще не ставить, тогда текст ссылки сам будет сноской, которую надо использовать ниже при указании адреса.&lt;/p&gt;
&lt;p&gt;На собственные файлы (страницы или картинки) можно ссылаться как напрямую, зная, где они окажутся в структуре сайта после генерации, так и на исходник. Второй вариант предпочтительнее, так как, во-первых, не нужно задумываться о структуре сайта при его наполнении контентом, а во-вторых, структура может поменяться, скажем, в результате автоматизированной архивации старых статей с перемещением их в соответствующие папки.&lt;/p&gt;
&lt;p&gt;Аналогично файлам в исходниках, можно ссылаться на категории или теги, с соответствующим префиксом в фигурных скобках.&lt;/p&gt;
&lt;h2 id="3"&gt;Некоторые особенности и тонкости&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Необходимо быть достаточно внимательным с пустыми строками, отступами и пробелами в концах строк, так как они здесь играют роль тегов, а наличие и количество пробелов видно плохо.&lt;/li&gt;
&lt;li&gt;Если четыре пробела (или один таб) идут перед первой строкой абзаца &amp;mdash; абзац считается блоком кода.&lt;/li&gt;
&lt;li&gt;Если четыре пробела идут перед первой строкой абзаца, следующего сразу после пункта списка &amp;mdash; абзац считается дополнительным абзацем первого уровня текущего пункта списка. Если при этом над пустой строкой был второй уровень вложенности &amp;mdash; абзац все равно будет сдвинут до первого уровня, а если надо, чтобы он принадлежал второму уровню, то надо ставить восемь пробелов.&lt;/li&gt;
&lt;li&gt;Если в списке вставить явным образом блок кода (через &lt;code&gt;~~~&lt;/code&gt;), то последующие абзацы с четырьмя пробелами в начале будут считаться тоже блоками кода.&lt;/li&gt;
&lt;li&gt;Если явно указанный блок кода будет еще и с отступом, то он будет воспринят некорректно, будет пропущено указание языка для подсветки &lt;code&gt;:::язык&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Чтобы запихать блок кода в список, надо &amp;laquo;утопить&amp;raquo; его отступами дважды &amp;mdash; восемь пробелов для первого уровня, при этом оформить абзацным методом, без &lt;code&gt;~~~&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Чтобы использовать HTML-код в Markdown по прямому назначению, он не должен быть &amp;laquo;утоплен&amp;raquo; на четыре пробела, иначе будет восприниматься, как блок кода, то есть, не для использования, а для отображения.&lt;/li&gt;
&lt;li&gt;Блочные HTML-теги, например, &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, должны быть отделены выше и ниже пустой строкой.&lt;/li&gt;
&lt;li&gt;В HTML-коде внутри блочных тегов не работает разметка Markdown, ее конструкции будут выводиться без обработки, как есть. Вопрос, в принципе, решаемый, но об этом в другой раз.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="equi_height"&gt;
&lt;div markdown="1"&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&amp;lt;div style=&amp;quot;float:right&amp;quot;&amp;gt; 
  ![флаги romeo и golf]({filename}/images/rg.png)
&amp;lt;/div&amp;gt;
&lt;span class="cp"&gt;&amp;lt;div style=&amp;quot;display:inline-block; margin:10px&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;Попытка вставить картинку  &lt;/span&gt;
&lt;span class="cp"&gt;в плавающий блок &amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;div style="max-width:250px;"&gt;
&lt;div style="float:right"&gt; 
  ![флаги romeo и golf]({filename}/images/rg.png)
&lt;/div&gt;
&lt;div style="display:inline-block; margin:10px"&gt;
Попытка вставить картинку  
в плавающий блок &lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Существуют разные реализации Markdown. Описания некоторых особенностей синтаксиса могут не соответствовать действительности для питонового модуля. Например, поддерживаемая на GitHub возможность делать зачеркнутый текст &lt;code&gt;~~striked~~&lt;/code&gt; здесь не работает. Автоматические ссылки без явного указания при помощи угловых скобок тоже не поддерживаются, ссылкообразное знакосочетание в тексте само преобразовано в ссылку не будет.&lt;/li&gt;
&lt;li&gt;Существуют расширения Markdown, которые позволяют обойти некоторые ограничения и добавить функциональные возможности. Одни расширения фактически являются общими для разных реализаций Markdown (потому что написаны для разных языков &amp;mdash; Perl, Python, Ruby, Java, &amp;hellip; Там, вообще-то, приличный список.) Другие присутствуют только в некоторых реализациях. Расширения могут быть встроенными в реализацию, а могут быть установлены отдельно. Их можно включать и отключать. Расширения, которые можно использовать в реализации для Python, могут оказаться удобными и полезными при создании сайта (если хотите &amp;mdash; блога) на Pelican. Но это тема для отдельного разговора.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Footnote по-русски &amp;mdash; сноска&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" rev="footnote" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary><category term="pelican"></category><category term="markdown"></category></entry><entry><title>Pelican и новая тема</title><link href="http://romeogolf.github.io/pelican-i-novaia-tema.html" rel="alternate"></link><updated>2016-01-19T20:00:00+05:00</updated><author><name>RomeoGolf</name></author><id>tag:romeogolf.github.io,2016-01-19:pelican-i-novaia-tema.html</id><summary type="html">&lt;h2 id="_1"&gt;Начнем с нуля&lt;/h2&gt;
&lt;p&gt;Тема notmyidea сама по себе выглядит неплохо и вполне допускает правку под свои нужды. Но поступим экстремальнее &amp;mdash; сделаем всё с самого начала. В корне проекта сайта, в нашем случае &amp;mdash; &lt;code&gt;D:\site\&lt;/code&gt;, создаем папку themes, там делаем папку nanotheme, а в ней &amp;mdash; папки static и templates. Почему nano? Во-первых, это модно, во-вторых, в этой теме будет предельный минимум, только для примера, чтобы хоть как-то работало.&lt;/p&gt;
&lt;p&gt;В папке templates создадим base.html, текстовый файл в UTF-8. Непременный, обязательный базовый шаблон, который будет определять общую разметку для всех страниц, подчиняющихся нашей теме. Ну, и набросаем общий внешний вид:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;будет заголовок&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;header&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;main-header&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      будет хедер
    &lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;nav&amp;gt;&lt;/span&gt;
      Будет главное меню
    &lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      Будет контент
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt; 
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;footer&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      будет футер
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt; 
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Если этот файл посмотреть в браузере, то можно увидеть тупо четыре строчки:&lt;br /&gt;
будет хедер&lt;br /&gt;
Будет главное меню&lt;br /&gt;
Будет контент&lt;br /&gt;
будет футер  &lt;/p&gt;
&lt;p&gt;А если запустить генерацию страниц сайта, то в результате мы вообще не увидим изменений. Оно и понятно &amp;mdash; тема-то в настройках все еще подключена старая. Давайте переподключим. Найдем в pelicanconf.py строчку&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;notmyidea&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;и заменим ее на &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;themes/nanotheme&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Как вариант, можно не заменять, а поставить в начале исходной строки знак комментария #, а новую просто поставить чуть ниже (если хотите &amp;mdash; чуть выше).&lt;/p&gt;
&lt;p&gt;И вот теперь после генерации сайта мы увидим изменения. А именно: мы увидим эти же четыре строчки, что и в base.html, на любой сгенерированной странице сайта. Это не то, что нам бы хотелось, но именно то, что мы заказывали. Значит, надо научиться заказывать то, что мы хотим. &lt;/p&gt;
&lt;h2 id="_2"&gt;От простой разметки &amp;mdash; к шаблону&lt;/h2&gt;
&lt;p&gt;Для того, чтобы сделать из примитивной веб-странички примитивный шаблон для Pelican, надо использовать &lt;a href="http://jinja.pocoo.org/docs/"&gt;jinja2&lt;/a&gt; &amp;mdash; движок сайтовых шаблонов для Python. Вставляя конструкции дзиндзя в текст разметки, мы даем генератору сайта понять, в каком месте шаблона мы хотим видеть некоторую информацию, и где ее взять. Строго говоря, эти конструкции будут работать в любом языке разметки, но, раз уж делаем сайт, нас интересует конкретно HTML.&lt;/p&gt;
&lt;p&gt;Самыми употребимыми (глядя на код шаблонов нескольких скачанных тем) будут блоки и переменные. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;title&lt;/span&gt; &lt;span class="cp"&gt;%}{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;a_title&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Первая конструкция позволяет в дочернем шаблоне создать именованный блок (с именем title), и содержимое этого блока будет подставлено на место, определенное в родительском шаблоне. Вторая конструкция вместо переменной языка Python вставит ее значение. А значение, в свою очередь, может быть, например, задано в файле конфигурации pelicanconf.py или определяться при помощи метаданных статьи или страницы.&lt;/p&gt;
&lt;p&gt;Вообще-то, блоки являются подмножеством операторов, а переменные &amp;mdash; подмножеством выражений:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;{% &amp;hellip; %} &amp;mdash; для операторов&lt;/li&gt;
&lt;li&gt;{{ &amp;hellip; }} &amp;mdash; для выражений (печать вывода шаблона)&lt;/li&gt;
&lt;li&gt;{# &amp;hellip; #} &amp;mdash; для комментариев, которые не включаются в вывод шаблона&lt;/li&gt;
&lt;li&gt;#  &amp;hellip; ## &amp;mdash; для линейных выражений (в отличие от блочных, на одну строку)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;но подробный разбор синтаксиса jinja2 займет слишком много места и времени, чтобы заниматься им прямо здесь и прямо сейчас.&lt;/p&gt;
&lt;p&gt;Давайте попробуем воткнуть парочку блоков и переменных. Что касается переменных &amp;mdash; как минимум, мы имеем в настройках AUTHOR и SITENAME. Типовые названия некоторых блоков можно подсмотреть в других темах. Итак, правим базовый шаблон:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;title&lt;/span&gt; &lt;span class="cp"&gt;%}{{&lt;/span&gt;&lt;span class="nv"&gt;SITENAME&lt;/span&gt;&lt;span class="cp"&gt;}}{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;head&lt;/span&gt; &lt;span class="cp"&gt;%}{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;header&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;main-header&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;SITEURL&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt; &lt;span class="s"&gt;id=&amp;quot;home-link&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;SITENAME&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;nav&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;main-nav&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;cat&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;null&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;categories&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;category&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;active&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;SITEURL&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;/&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;cat.url&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;cat&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;

        &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;DISPLAY_PAGES_ON_MENU&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
          &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;current_page&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;PAGES&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;current_page&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;page&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;active&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;SITEURL&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;/&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;current_page.url&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;current_page.title&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
          &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
        &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;main_section&lt;/span&gt; &lt;span class="cp"&gt;%}{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt; 
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;footer&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="ni"&gt;&amp;amp;copy;&lt;/span&gt; &lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;AUTHOR&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt; 
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;В результате base.html будет выглядеть уже так:&lt;/p&gt;
&lt;pre style="overflow:auto;"&gt;
{% block head %}{% endblock %}
{{ SITENAME }}

    {% for cat, null in categories %}
    {{ cat }}
    {% endfor %} {% if DISPLAY_PAGES_ON_MENU %} {% for current_page in PAGES %}
    {{ current_page.title }}
    {% endfor %} {% endif %} 

{% block main_section %}{% endblock %}
© {{AUTHOR}} 
&lt;/pre&gt;

&lt;p&gt;а откомпилированные страницы сайта, соответственно, так:&lt;/p&gt;
&lt;pre&gt;
Site

    Разное
    Рыба
    О сайте

© Me 
&lt;/pre&gt;

&lt;p&gt;причем, ссылки &amp;laquo;меню&amp;raquo; кликабельны, что можно увидеть по изменению адреса в адресной строке браузера. Но все страницы выглядят совершенно одинаково. &lt;/p&gt;
&lt;p&gt;В этом шаблоне мы:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;в теге &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; указали заголовок сайта, отображаемый в панели и вкладке браузера &amp;mdash; взяли его из переменной SITENAME, указанной в  pelicanconf.py;&lt;/li&gt;
&lt;li&gt;в теге &lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt; сделали заголовок сайта из этой же переменной;&lt;/li&gt;
&lt;li&gt;в теге &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt; изобразили меню сайта:&lt;ul&gt;
&lt;li&gt;сперва при помощи оператроа &lt;code&gt;for&lt;/code&gt; перечислили все категории, которые Python наковырял из метаданных наших статей, причем, обернули названия категорий в тег &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;, чтобы получились ссылки;&lt;/li&gt;
&lt;li&gt;затем при помощи оператора &lt;code&gt;if&lt;/code&gt; проверили переменную, заданную в файле конфигурации, которая разрешает указание в меню не только статей, но и страниц;&lt;/li&gt;
&lt;li&gt;убедившись, что страницы тоже можно перечислить в меню, опять же при помощи &lt;code&gt;for&lt;/code&gt; сделали список страниц, которых у нас пока одна &amp;mdash; &amp;laquo;О сайте&amp;raquo;;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;в html-блоке &lt;code&gt;content&lt;/code&gt; добавили jinja-блок &lt;code&gt;main_section&lt;/code&gt; &amp;mdash; для наследников;&lt;/li&gt;
&lt;li&gt;в футере нарисовали значок копирайта с указанием автора, а автора взяли опять же из файла конфигурации, переменная AUTHOR.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_3"&gt;Добавляем шаблоны&lt;/h2&gt;
&lt;p&gt;Но у нас нет шаблона для главной страницы сайта, которая index, а также для страницы со списком категорий, тегов и, собственно, самих статей, поэтому все страницы одинаковые &amp;mdash; к ним применяется единственный шаблон. Сделаем index.html. В нем первым делом укажем, что он расширяет базовый. Потом в &lt;code&gt;main_section&lt;/code&gt; перечислим имеющиеся статьи, запихав их в соответствующие html-теги, не забыв указать краткое содержание (article.summary). Должно получиться примерно так:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;base.html&amp;#39;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;main_section&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;main-section blog-section&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;blog-posts&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;article&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;articles_page.object_list&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h3&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;date&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;article.locale_date&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;article&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;SITEURL&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;/&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;article.url&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;article.title&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;article.summary&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Шаблон для статей будет называться article.html, тоже расширяет базовый. В заголовке мы его попросим показать не имя сайта, а название статьи. В главной секции укажем дату статьи (сформированную в соответствии с локалью), заголовок статьи и сам текст (article.content). После текста статьи перечислим теги, если они есть, то есть, сперва проверим наличие, а потом нарисуем список, в котором каждый тег сделан ссылкой на список статей с таким тегом:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;base.html&amp;#39;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;title&lt;/span&gt; &lt;span class="cp"&gt;%}{{&lt;/span&gt;&lt;span class="nv"&gt;article.title&lt;/span&gt;&lt;span class="cp"&gt;}}{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;

&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;main_section&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;main-section blog-section&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;blog-posts&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h3&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;date&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;article.locale_date&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;article&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;article.title&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;article.content&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;br/&amp;gt;&lt;/span&gt;   
      &lt;span class="nt"&gt;&amp;lt;footer&amp;gt;&lt;/span&gt;
        &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;article.tags&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;Теги:&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;taglist&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tags&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;tag&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;article.tags&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;SITEURL&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;/&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;tag.url&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tag&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;tag&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
              &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Для страниц, точнее, для пока единственной нашей страницы, нужен шаблон page.html, похожий на шаблон статей, только проще, без тегов:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;base.html&amp;quot;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;title&lt;/span&gt; &lt;span class="cp"&gt;%}{{&lt;/span&gt; &lt;span class="nv"&gt;page.title&lt;/span&gt; &lt;span class="cp"&gt;}}{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;main_section&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;main-section&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;entry-title&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;page.title&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;page.content&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ну, и для выбора страниц по тегу нужен шаблон tag.html: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;base.html&amp;#39;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;title&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;Статьи с тегом &amp;#39;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;tag&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&amp;#39; | &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;SITENAME&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt; &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;main_section&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;main-section blog-section&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;blog-posts&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;article&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;articles&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;h3&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;date&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;article.locale_date&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;article&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;SITEURL&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;/&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;article.url&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;article.title&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
        &lt;span class="cp"&gt;{{&lt;/span&gt;&lt;span class="nv"&gt;article.summary&lt;/span&gt;&lt;span class="cp"&gt;}}&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Итак, &lt;code&gt;D:\site\themes\nanotheme\templates\&lt;/code&gt; содержит пять файлов шаблонов. Вернемся в корень проекта сайта и запустим сборку. Теперь гиперссылки работают вменяемо. Ну, название сайта по-прежнему открывает содержимое корневой папки, но это нормально. Зато заголовок статьи ведет на страницу статьи, теги открывают страницу со списком статей с таким тегом, категории &amp;mdash; на страницу со списком статей в данной категории.&lt;/p&gt;
&lt;p&gt;Ой! А почему? Мы же не делали шаблон для categories.html, а он работает! Это как?
А так. &lt;a href="http://docs.getpelican.com/en/3.6.3/themes.html#inheritance"&gt;Документация&lt;/a&gt; рассказывает нам (правда, по-английски), что если какого-то из настоятельно необходимых шаблонов не окажется в папке templates, то вместо него будет использоваться соответствующий шаблон темы simple. И вообще, дескать, если вас устраивает HTML-структура шаблона этой умолчательной темы, то не надо писать собственных велосипедов. Тем более, что можно унаследоваться от шаблонов этой темы и чутка расширить их. Ну что ж, в отношении шаблона categories так и поступим.&lt;/p&gt;
&lt;h2 id="_4"&gt;Подключение стилей&lt;/h2&gt;
&lt;p&gt;У нас теперь есть разметка разного рода страниц сайта. Но нет оформления, какая же это тема? Да никакая. Чтобы она стала хоть какая-нибудь, надо ей добавить стили. Значит, идем в папку &lt;code&gt;D:\site\themes\nanotheme\static\&lt;/code&gt; и делаем там папку &lt;code&gt;css&lt;/code&gt;, а в ней файл styles.css:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="c"&gt;/* установим серенький цвет фона и размер полей */&lt;/span&gt;
    &lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#CCC&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;margin&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.main-header&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;.content&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;.footer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="k"&gt;padding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* внутриблочные отступы до границы */&lt;/span&gt;
    &lt;span class="k"&gt;margin&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* отступы между блоками страницы */&lt;/span&gt;
    &lt;span class="k"&gt;outline&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* черненькая тоненькая рамочка */&lt;/span&gt;
    &lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#FFF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* и белый цвет фона */&lt;/span&gt;
    &lt;span class="k"&gt;min-width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* позволим тянуться, */&lt;/span&gt;
    &lt;span class="k"&gt;max-width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;800px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* но в определенных пределах */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.main-header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="k"&gt;height&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* ограничим высоту */&lt;/span&gt;
    &lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#aaa&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* и подменим цвет */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;/* чтобы ссылка-заголовок при наведении не меняла цвет */&lt;/span&gt;
    &lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;inherit&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#name&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;/* для текста названия сайта - размер, шрифт и рюшечки */&lt;/span&gt;
    &lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;350%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="k"&gt;font-family&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Arial&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;text-decoration&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* Убираем подчёркивание */&lt;/span&gt;
    &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* Цвет текста белый */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.main-nav&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;height&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;margin-top&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.main-nav&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;display&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;inline&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* Строчно-блочные элементы */&lt;/span&gt;
    &lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#551111&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* Цвет фона */&lt;/span&gt;
    &lt;span class="k"&gt;margin-right&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* Расстояние между пунктами меню */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.main-nav&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* Цвет ссылок */&lt;/span&gt;
    &lt;span class="k"&gt;display&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* Блочный элемент */&lt;/span&gt;
    &lt;span class="k"&gt;padding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* Поля вокруг текста */&lt;/span&gt;
    &lt;span class="k"&gt;text-decoration&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* Убираем подчёркивание */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.main-nav&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#881144&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* Цвет фона при наведении курсора мыши */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.main-nav&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="nc"&gt;.active&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#881144&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* Цвет фона при наведении курсора мыши */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.tags&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;/* для списка тегов к статье, чтобы они были в одну строку */&lt;/span&gt;
    &lt;span class="k"&gt;display&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;inline&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* Строчно-блочные элементы */&lt;/span&gt;
    &lt;span class="k"&gt;margin-right&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* Расстояние между пунктами меню */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Надо еще не забыть подключить эти стили в базовом шаблоне base.html, например, сразу после тега &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ SITEURL }}/theme/css/styles.css&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ни в коем случае не претендую на то, что создал прекрасный образец стиля. Цветовая гамма сомнительная, решение задать размер шрифта в процентах спорное. Однако такого CSS достаточно для того, чтобы показать: тема заработала так, как мы ожидали.&lt;/p&gt;
&lt;p&gt;В нее еще многое можно напихать. Добавить шаблоны страниц для категорий и авторов, обозначить поведение, связанное с архивацией старых статей, включить ограничение количества статей на странице, дорисовать сайдбар (а может, и два, с обеих сторон), добавить плагины для облака тегов или карты сайта, нарисовать фон, логотип и иконку favicon, подобрать вменяемый набор цветов для оформления&amp;hellip; В общем, хватает работы для дизайнера, верстальщика, контент-менеджера и всех остальных работников веб-студии, которых приходится представлять в единственном числе в собственном лице.&lt;/p&gt;
&lt;h2 id="_5"&gt;Всё еще впереди&lt;/h2&gt;
&lt;p&gt;Чтобы сделать &amp;laquo;идеальный&amp;raquo; по своим требованиям шаблон (с точки зрения функциональности), надо хорошо представлять себе настройки Pelican и хотя бы в общих чертах иметь представление о jinja2.&lt;/p&gt;
&lt;p&gt;Чтобы сделать качественную разметку шаблона (с точки зрения внешнего вида), надо иметь знания в области HTML, CSS, местами &amp;mdash; JavaScript, и в общих чертах представлять, как это все работает в разных браузерах.&lt;/p&gt;
&lt;p&gt;Чтобы сайт не вызывал отвращения у посетителей, надо быть хоть немного дизайнером, ну, или хотя бы обладать зачатками вкуса. К сожалению, этот параметр трудно оценить у себя самостоятельно&amp;hellip;&lt;/p&gt;
&lt;p&gt;Чтобы наполнять сайт контентом, надо уметь пользоваться языком разметки Markdown, но местами придется вставлять и HTML, при этом, надо знать язык статьи (русский, например, но хотелось бы иногда и английский) хотя бы на четверочку, владеть словом, а для привлекательного оформления уметь рисовать и фотографировать.&lt;/p&gt;
&lt;p&gt;Как же много требований&amp;hellip; Но не надо сдаваться! Тем более, никто не будет подходить к оценке блога с той же позиции, что и к оценке сайта профессионала-дизайнера или серезной промышленной компании. В конце концов, можно остановиться на простом минималистичном дизайне и наращивать только удобство пользования.&lt;/p&gt;</summary><category term="pelican"></category></entry><entry><title>Pelican и основные настройки заготовки сайта</title><link href="http://romeogolf.github.io/pelican-i-osnovnye-nastroiki-zagotovki-saita.html" rel="alternate"></link><updated>2016-01-16T20:00:00+05:00</updated><author><name>RomeoGolf</name></author><id>tag:romeogolf.github.io,2016-01-16:pelican-i-osnovnye-nastroiki-zagotovki-saita.html</id><summary type="html">&lt;h2 id="_1"&gt;Настройки и тема&lt;/h2&gt;
&lt;p&gt;То, что вышло на предыдущем шаге, уже является веб-страницей. Заготовка отображается в браузере (не так, как хотелось бы, но именно так, как задано в ее коде), худо-бедно размечена и содержит гиперссылки. Однако, гиперссылки между страницами сайта не работают, а внешний вид &amp;mdash; именно, что &amp;laquo;худо&amp;raquo; и &amp;laquo;бедно&amp;raquo;.&lt;/p&gt;
&lt;p&gt;Настала пора заняться темой и конфигурацией.&lt;/p&gt;
&lt;h3 id="_2"&gt;О темах&lt;/h3&gt;
&lt;p&gt;Тема определяет внешний вид сайта, для чего включает в себя правила отображения страниц: шаблоны страниц всяческого вида, предусмотренные для данного сайта, а также стили и прочие инструменты веб-дизайна, типа скриптов и иконок.&lt;/p&gt;
&lt;p&gt;В общем случае тема представляет собой папку, имя которой и будет названием темы. В ней лежат подпапки static и templates, кроме того, приличные люди, желающие выложить тему собственного производства для всеобщего пользования, кладут в корень папки файлы README (обычно README.md или README.rst, если написано на Markdown или reStructuredText соответственно) и screenshot.png, чтобы пояснить особенности установки и настройки и показать внешний вид. Особенности настройки могут потребовать установки дополнительных модулей Python или дополнительных плагинов Pelican.&lt;/p&gt;
&lt;p&gt;В папке templates непременно должен быть файл base.html, в котором описан базовый шаблон с разметкой, общей для всех страниц сайта, остальные шаблоны в большинстве случаев являются его наследниками. Впрочем, можно извратиться и сделать совершенно независимые и непохожие друг на друга шаблоны для каждой страницы, только это отдает легким безумием. Можно сделать пару-тройку безумно непохожих на остальные страниц, если это чем-то обосновано.&lt;/p&gt;
&lt;p&gt;Чаще всего помимо базового в теме есть шаблоны для статей (article.html), страниц (page.html), списков тегов, категорий и авторов (tags.html, categories.html, authors.html), списков статей, объединенных общим тегом, категорией или автором (tag.html, category.html, author,html), списка архивных статей (archives.html), и всякие рюшечки для добавления на страницу комментариев от &lt;a href="http://disqus.com/"&gt;Disqus&lt;/a&gt; (disqus.html), аналитики от Google (analytics.html) 
 и кнопок соцсетей (например, twitter.html).&lt;/p&gt;
&lt;p&gt;В папке static обязательно должны быть таблицы стилей. Чаще всего (особенно, если кроме стилей используется что-то еще) они лежат в подпапке css, основной файл может называться styles.css, main.css, local.css и вообще название ограничено только полетом фантазии автора. Чаще всего рядом лежит pygments.css, необходимый для корректной подсветки синтаксиса примеров кода на странице. При помощи этого файла можно менять стили отображения кода, например, светлый текст на темном фоне или наоборот, то есть, для подсветки кода есть свои темы, поэтому лучше придерживаться именно этого названия для css-файла, чтобы при замене темы кода надо было только заменить его, а не искать в разных местах, где переименовывать. Ведь дополнительный файл может быть как подключен в коде шаблона, так и импортирован в основном стилевом файле, как автор захотел.&lt;/p&gt;
&lt;p&gt;Кроме подпапки css, в static могут быть подпапки fonts с используемыми нестандартными шрифтами, images или img с картинками (фонами и иконками) и js с используемыми скриптами JavaScript.&lt;/p&gt;
&lt;h3 id="_3"&gt;Где взять тему&lt;/h3&gt;
&lt;p&gt;У нашей заготовки темы нету никакой, а хочется хоть какую-нибудь. Но Pelican не так плох, чтобы не давать возможности поиграться с темой &amp;laquo;из коробки&amp;raquo;. В комплекте поставки идет две темы: simple и notmyidea. Папки с соответствующими названиями лежат где-то в недрах Pelican, который, в свою очередь, расположен где-то внутри Python. В моем случае это &lt;code&gt;C:\Python33\Lib\site-packages\pelican\themes&lt;/code&gt;. Однако, лазить по внутренностям змеи и птицы &amp;mdash; не наше дело. Для упрощения задачи нам любезно подкинули специальную утилиту pelican-themes. Команда (как обычно, в консоли, например, файлового менеджера FAR или в окне cmd.exe)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;С:\python&lt;span class="m"&gt;33&lt;/span&gt;\Scripts\pelican-themes.exe -l
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;выведет список установленных тем. Собственно, вот эти две упомянутые и выведет. С помощью этой же утилиты темы можно устанавливать, удалять, создавать символические ссылки на имеющиеся темы (благодаря чему тема не будет скопирована внутрь пеликана, но пеликан будет о ней знать и сможет использовать). Например,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;С:\python&lt;span class="m"&gt;33&lt;/span&gt;\Scripts\pelican-themes.exe -i D:\Download\subtle 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;установит тему subtle, если она скачана и лежит в &lt;code&gt;D:\Download&lt;/code&gt;, а &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;С:\python&lt;span class="m"&gt;33&lt;/span&gt;\Scripts\pelican-themes.exe -r subtle 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;удалит ее. Впрочем, процедура установки и удаления тем не особенно важна. Установленную тему проще подключить в настройках файла конфигурации, чем неустановленную. Однако, можно использовать не просто имя темы, а полный путь к ней, и тогда теме не нужно быть установленной. Это касается раздобытых в интернете тем, либо написанных самостоятельно. Комплектные темы &amp;mdash; упомянутые две &amp;mdash; лучше все-таки не трогать.&lt;/p&gt;
&lt;p&gt;Что касается поиска готовых, но более-менее интересных тем &amp;mdash; больше всего их, наверное, на GitHub, например, в &lt;a href="https://github.com/getpelican/pelican-themes"&gt;этом сборнике&lt;/a&gt;. Но пока разберемся с имеющейся.&lt;/p&gt;
&lt;h2 id="_4"&gt;Откроем файл конфигурации&lt;/h2&gt;
&lt;p&gt;В корне проекта после его создания и первой сборки сайта появилась папка &lt;strong&gt;pycache&lt;/strong&gt;. Оставим ее в покое, она нужна питону, пусть пользуется. Файлы Makefile, fabfile.py и develop_server.sh можно спокойно удалить. Если они вдруг когда-нибудь понадобятся, их будет несложно получить снова. Файл publishconf.py оставим в покое, он нас пока не интересует, но может позже и пригодится. Откроем 
pelicanconf.py в текстовом редакторе. Не запустим его, а то Python попытается выполнить, а именно откроем для редактирования.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c"&gt;# -*- coding: utf-8 -*- #&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;unicode_literals&lt;/span&gt;

&lt;span class="n"&gt;AUTHOR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Me&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;SITENAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Site&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;SITEURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;TIMEZONE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Europe/Paris&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;DEFAULT_LANG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;ru&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;# Feed generation is usually not desired when developing&lt;/span&gt;
&lt;span class="n"&gt;FEED_ALL_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;CATEGORY_FEED_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;TRANSLATION_FEED_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;AUTHOR_FEED_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;AUTHOR_FEED_RSS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

&lt;span class="c"&gt;# Blogroll&lt;/span&gt;
&lt;span class="n"&gt;LINKS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Pelican&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://getpelican.com/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Python.org&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://python.org/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Jinja2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://jinja.pocoo.org/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;You can modify those links in your config file&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;#&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),)&lt;/span&gt;

&lt;span class="c"&gt;# Social widget&lt;/span&gt;
&lt;span class="n"&gt;SOCIAL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;You can add links in your config file&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;#&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Another social link&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;#&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),)&lt;/span&gt;

&lt;span class="n"&gt;DEFAULT_PAGINATION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;

&lt;span class="c"&gt;# Uncomment following line if you want document-relative URLs when developing&lt;/span&gt;
&lt;span class="c"&gt;#RELATIVE_URLS = True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pelican собрал его на основе наших ответов при анкетировании после запуска утилиты pelican-quickstart. Разберем по полочкам. Начало (первые три строки) нужно питону, а не нам. Далее AUTHOR и SITENAME &amp;mdash; можно поставить что-то более осмысленное, собственное имя (или партийный псевдоним) для AUTHOR и что-нибудь креативное для SITENAME.&lt;/p&gt;
&lt;p&gt;SITEURL = &amp;lsquo;&amp;rsquo; можно оставить и так, пока мы не лезем в интернеты, а балуемся на собственном домашнем компьютере.&lt;/p&gt;
&lt;p&gt;PATH указывает на папку, в которой лежат заготовки статей, страниц и прочего контента, если прочее будет.&lt;/p&gt;
&lt;p&gt;TIMEZONE &amp;mdash; пока не лезем в интернеты, можно игнорировать. Можно и исправить на свою, хуже не будет.&lt;/p&gt;
&lt;p&gt;DEFAULT_LANG &amp;mdash; имеет смысл сделать &amp;lsquo;ru&amp;rsquo;, хотя действительно важным этот параметр является для многоязычных сайтов.&lt;/p&gt;
&lt;p&gt;Блок параметров под комментарием #Feed generation предназначен для настройки ленты Atom RSS, причем, генерация пока отключена.&lt;/p&gt;
&lt;p&gt;LINKS, который под комментарием # Blogroll, содержит список ссылок. Эти ссылки будут отображаться в блоке Blogroll, место и внешний вид &amp;mdash; в зависимости от шаблона. По умолчанию заданы ссылки на Pelican, Python.org, Jinja2 и дана заготовочка, которую можно поправить по своему желанию.&lt;/p&gt;
&lt;p&gt;Аналогичное назначение у SOCIAL, что под комментарием # Social widget &amp;mdash; ссылки на соцсети, пока только в виде заготовки. LINKS и SOCIAL можно пока что убрать совсем или закрыть комментарием при помощи символа # в начале каждой отключаемой строки&lt;/p&gt;
&lt;p&gt;DEFAULT_PAGINATION &amp;mdash; максимальное количество статей на страницу. Можно вместо числа поставить False, тогда будет неограничено.&lt;/p&gt;
&lt;p&gt;#RELATIVE_URLS = True следует &amp;laquo;раскомментировать&amp;raquo;, то есть, удалить символ # перед параметром. Параметр задает относительность при формировании URL. Для локального сайта, не использующего веб-сервер, это необходимо. После публикации имеет смысл закрыть обратно, но о необходимости и причинах этого лучше говорить не здесь. Может быть, позже&amp;hellip;&lt;/p&gt;
&lt;p&gt;В этом файле, можно в конце, необходимо дописать такие строки:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# подключаем предустановленную тему&lt;/span&gt;
&lt;span class="n"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;notmyidea&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;# перед генерацией стираем старый вариант сайта&lt;/span&gt;
&lt;span class="n"&gt;DELETE_OUTPUT_DIRECTORY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Последняя строка нужна потому, что мы пока что экспериментируем. Будем добавлять и удалять элементы контента, а в выходной папке останутся следы уже ненужных страниц. Пусть Pelican сам подтирает их за нами.&lt;/p&gt;
&lt;h2 id="_5"&gt;Вот такая тема&lt;/h2&gt;
&lt;p&gt;А давайте еще создадим в папке content подпапку pages рядом с articles. А туда положим файл about.md такого содержания:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Title: О сайте

На этой странице по логике вещей и в соответствии с названием должно бы 
присутствовать внятное описание сайта, частью которого является данная страница.

К сожалению, у автора сайта до сих пор нет достаточно внятного представления о 
назначении сайта, поэтому нормальное описание не может быть составлено. Однако 
данная страница совершенно необходима хотя бы для того, чтобы посмотреть на ее 
поведение в рамках шаблона и настроек.

В общем, как все уже вероятно догадались, эта страница, как и весь остальной 
сайт в целом, является испытательным полигоном, тестовой площадкой, инструментом 
для получения и отработки новых навыков автора в малознакомой области веб-
творчества и, не побоюсь этого слова, веб-дизайна.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Для страниц не важна метаинформация, используемая в статьях. Только заголовок, остальное (дата, автор и все такое) использоваться не будет. То есть, использование метаданных определяется шаблоном, а назначение страниц чаще всего отличается от статейного &amp;mdash; их нет в ленте, у них неважен автор и теги.&lt;/p&gt;
&lt;p&gt;Запускаем сборку сайта:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;c:\python&lt;span class="m"&gt;33&lt;/span&gt;\Scripts\pelican.exe content
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Теперь из папки output можно запустить index.html и посмотреть результат.&lt;/p&gt;
&lt;p&gt;Теперь мы имеем серенький фончик, шапку в виде названия сайта крупными буквами и горизонтального меню с категориями (&amp;laquo;Разное&amp;raquo; и &amp;laquo;Рыба&amp;raquo;) и страницами (&amp;laquo;О сайте&amp;raquo;). Меню, контент и футер на белом фоне со скругленными уголками. На первой странице последняя статья полностью и список остальных статей (в котором пока одна &amp;mdash; первая). В статье добавлен справа плавающий блок с метаданными &amp;mdash; категория, автор, теги и дата публикации. Сайдбаров нет. В футере ссылки, встроенные в шаблон и не убираемые при помощи файла конфигурации. Заголовок в шапке является ссылкой на корень папки output, что логично &amp;mdash; будь это корнем для сервера, тот подставил бы index.html, а нам придется делать это вручную. Верстка фиксированная. Ссылки &amp;mdash; что приятно &amp;mdash; теперь рабочие.&lt;/p&gt;
&lt;p&gt;В общем, бери, да радуйся. Можно пользоваться и так. Но, несмотря на то, что результат разительно отличается от &amp;laquo;бестемного&amp;raquo;, хочется улучшений. Да не просто хочется, а мы все-таки надеемся, что это творение будут смотреть люди. И читать эти люди будут, скорее всего, по-русски, а у нас метаданные отмечены на английском. Да и ссылки в футере&amp;hellip; Нет, я тоже благодарен авторам Python, Pelican и этой темы, но не до такой степени, чтобы на каждой странице давать ссылки на них. А еще хочется добавить рюшечек-финтифлюшечек, типа карты сайта, облака тегов, отсортировать меню иначе&amp;hellip;&lt;/p&gt;
&lt;p&gt;Короче говоря, надо бы взять тему за основу и поправить ее по своим надобностям. А может, вообще свою с нуля написать, а?&lt;/p&gt;</summary><category term="pelican"></category></entry><entry><title>Pelican и наполнение заготовки сайта хоть чем-нибудь</title><link href="http://romeogolf.github.io/pelican-i-napolnenie-zagotovki-saita-khot-chem-nibud.html" rel="alternate"></link><updated>2016-01-15T20:00:00+05:00</updated><author><name>RomeoGolf</name></author><id>tag:romeogolf.github.io,2016-01-15:pelican-i-napolnenie-zagotovki-saita-khot-chem-nibud.html</id><summary type="html">&lt;h2 id="_1"&gt;Фундамент готов&lt;/h2&gt;
&lt;p&gt;Но до финишной отделки еще далеко, пока даже стены не возведены. Разработка сайта на Pelican складывается из таких пунктов:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;контент;&lt;/li&gt;
&lt;li&gt;тема;&lt;/li&gt;
&lt;li&gt;плагины;&lt;/li&gt;
&lt;li&gt;настройка.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Пункты равнозначны по важности и во многом зависят друг от друга. Ни одним из этих моментов нельзя пренебрегать или откладывать на потом, кроме, разве что, плагинов. Плагинами можно заняться ближе к концу, когда стандартных возможностей станет недостаточно.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Контент. Собственно статьи, блогпосты, сообщения разного рода, составляющие информационную ценность сайта. Пишется на reStructuredText или Markdown, лично я предпочел второй вариант, хотя первый обеспечивается пеликаном сразу, а для второго надо ставить соответствующий модуль Python. Каждый пост пишется в отдельном файле и складывается в папку &amp;laquo;content&amp;raquo;, логично, не правда ли? Pelican сам разберется, в каком виде и в какое место сайта впихнуть написанное, основываясь на метаданных в начале контентного файла и на структуре шаблонов.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Тема. Влияет на внешний вид сайта. Включает в себя разметку веб-страниц, для чего содержит шаблоны для разных их вариантов, и оформление, задаваемое таблицами стилей в файлах css, которых может быть и несколько. Здесь же могут храниться общие для всего сайта и привязанные к теме иконки, шрифты, сценарии JavaScript. Шаблоны основаны на шаблонизаторе Jinja2 (&amp;laquo;дзиндзя&amp;raquo;). Обычно присутствует базовый, задающий общий стиль, и его наследники, определяющие особенности отображения статичных страниц, статей, привязанных к дате, страниц со списками статей по тегам, категориям, авторам, датам, еще каких-нибудь страниц, не предусмотренных авторами Pelican, но придуманных автором сайта.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Плагины. Дополнительные модули Python, обеспечивающие функциональность, не заложенную в базе. Могут повышать удобство написания и быть незаметны для посетителей сайта (типа assets) или помогать в разработке непосредственно внешнего вида страниц (например, tag_cloud, который делает модное облако тегов).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Настройка. Файлы конфигурации pelicanconf.py и publishconf.py в корне проекта сайта. Определяют массу всяческих деталей, влияющих на процесс генерации страниц сайта. По сути, содержат набор переменных, которые либо управляют процессом генерации, либо используются непосредственно в коде страниц.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Контент &amp;mdash; это то, с чем придется работать постоянно на протяжени всего времени жизни сайта. Если перестать писать &amp;mdash; сайт закончится. Он не сразу пропадет с просторов сети, но живым его уже нельзя будет назвать.&lt;/p&gt;
&lt;p&gt;Тему можно взять готовую и использовать так. Можно взять готовую и чуть-чуть подкорректировать ее до полной неузнаваемости. Можно взять, и написать с нуля самому. &lt;/p&gt;
&lt;p&gt;С темой можно определиться в самом начале и больше не трогать. Хотя, скорее всего по мере развития сайта ее придется расширять, дополнять, исправлять. То же и с настройками: основные придется сделать сразу, иначе невозможно работать. На этом можно остановиться, но наверняка будет нужно со временем вносить дополнения, особенно, если это будет требоваться при изменениях в теме или при добавлении плагинов.&lt;/p&gt;
&lt;p&gt;Добавление плагинов отложим на попозже.&lt;/p&gt;
&lt;h2 id="_2"&gt;Заготовка для контента&lt;/h2&gt;
&lt;p&gt;Начнем, пожалуй, с текстового наполнения. Дальнейшие эксперименты с внешним видом и поведением надо все-таки на чем-то проверять. Сделаем файл &lt;code&gt;first.md&lt;/code&gt; (непременно UTF-8) следующего содержания: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Title: Заголовок первой статьи
Date: 2016-01-20 10:00
Modified: 2016-01-20 11:00
Category: Рыба
Tags: блог, разное, тест, проверка
Slug: fish
Lang: ru
Translation: false
Status: published
Authors: Аноним, Аполлинарий Афиногенович Семиникейский-Дудытченко
Summary: Сильно сокращенное описание, из которого можно понять, зачем вообще 
читать эту статью в развернутом виде.

Собственно, статья. Некоторый пост, не несущий на самом деле никакой смысловой
нагрузки, предназначенный исключительно для заполнения отведенного ему
пространства в области отображения контента. На жаргончике &lt;span class="ss"&gt;&amp;amp;mdash;&lt;/span&gt; &lt;span class="ss"&gt;&amp;amp;laquo;&lt;/span&gt;рыба&lt;span class="ss"&gt;&amp;amp;raquo;&lt;/span&gt;.

Может делиться на абзацы[^1]. Может &lt;span class="k"&gt;**&lt;/span&gt;&lt;span class="gs"&gt;усиливать&lt;/span&gt;&lt;span class="k"&gt;**&lt;/span&gt; и &lt;span class="k"&gt;*&lt;/span&gt;&lt;span class="ge"&gt;выделять&lt;/span&gt;&lt;span class="k"&gt;*&lt;/span&gt;. Может
использовать &amp;lt;abbr title=&amp;quot;HyperText Markup Languige&amp;quot;&amp;gt;HTML&amp;lt;/abbr&amp;gt;-теги напрямую.

[^1]: И это далеко не все возможности&lt;span class="ss"&gt;&amp;amp;hellip;&lt;/span&gt;

&lt;span class="k"&gt;## &lt;/span&gt;&lt;span class="gh"&gt;Может включать заголовки и подзаголовки&lt;/span&gt;

&lt;span class="k"&gt;* &lt;/span&gt;может содержать списки
&lt;span class="k"&gt;* &lt;/span&gt;из нескольких пунктов,
&lt;span class="k"&gt;* &lt;/span&gt;например, ненумерованных.

Может [ссылаться](http://example.link.com) на какую-нибудь несуществующую фигню, 
или даже проще: &amp;lt;http://example.link.com&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Как видно, файл начинается с метаданных, из которых Pelican понимает, как его обрабатывать и куда засовывать. Далее идет текст, при написании которого надо использовать некоторые правила &amp;mdash; соблюдать синтаксис языка Markdown. Тогда статья будет корректно преобразована в HTML, то есть, в нужные места будут вставлены соответствующие теги. Коротких шпаргалок по Markdown в интернете достаточно, например, &lt;a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet"&gt;здесь&lt;/a&gt; или &lt;a href="https://en.support.wordpress.com/markdown-quick-reference/"&gt;тут&lt;/a&gt;, можно посмотреть и описание синтаксиса, допустим, &lt;a href="http://www.daringfireball.net/projects/markdown/syntax"&gt;вот&lt;/a&gt; и &lt;a href="http://learn.getgrav.org/content/markdown"&gt;еще&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="_3"&gt;Подробнее о метаданных&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Title: Заголовок статьи. Будет отображаться в браузере (в панели и вкладке), а также использоваться в разных местах, где перечисляются статьи, если эта статья попадает под соответствующее условие: в списках статей по выбранному тегу, по категории, по автору и тому подобное.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Date: Дата написания статьи. Может отображаться в самой статье, будет использоваться для сортировки статей по дате в ленте. Если не поставить, то будет выставлена в зависимости от настройки в файле конфигурации, параметр DEFAULT_DATE, который можно поставпть &amp;lsquo;fs&amp;rsquo;, тогда будет браться системная дата создания файла.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Modified: Дата правки статьи. Может использоваться в некоторых темах или самостоятельно.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Category: Категория, которая является верхним уровнем навигации, наравне со страницами и пользовательскими пунктами. Если есть несколько статей с одинаковыми категориямти &amp;mdash; они будут выведены списком при клике по этой категории в меню. В папке &amp;laquo;content&amp;raquo; для статей должна быть папка &amp;laquo;articles&amp;raquo;. В ней можно сделать папки с именами категорий и складывать статьи по соответствующим папкам, тогда этот пункт метаданных при настройках по умолчанию не нужен. Если же статья будет в корне &amp;laquo;articles&amp;raquo;, но без этого пункта метаданных, будет использоваться опция файла конфигурации DEFAULT_CATEGORY, по умолчанию &amp;mdash; &amp;lsquo;misc&amp;rsquo;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tags: Тэги, метки, ярлыки &amp;mdash; ключевые слова, по которым можно найти статьи схожей тематики, если это предусмотрено навигацией по сайту. Можно использовать для создания облака тегов, можно просто отображать внизу каждой статьи. Вещь необязательная, но полезная.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Slug: Ключевое слово, используемое для создания имени HTML-файла статьи. Если отсутствует, будет сделано автоматически из Title, с использованием транслитерации при необходимости, поэтому в большинстве случаев может отсутствовать. Не должно повторяться у разных статей, иначе будет сгенерирована только последняя статья из имеющих одинаковый Slug, остальные затруться. Полезная вещь при создании многоязычных версий: у версий одной статьи на разных языках надо ставить одинаковый Slug, но разные Lang.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lang: Язык статьи. Может отсутствовать, используется опция файла конфигурации DEFAULT_LANG, по умолчанию &amp;mdash; &amp;lsquo;en&amp;rsquo;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Translation: Не нужная пока что штука, устанавливается в true, чтобы не дать пеликану скрыть в навигации статью с языком, отличающимся от DEFAULT_LANG, например, чтобы показать оригинал переведенной статьи.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Status: Может быть published (по умолчанию) или draft. В последнем случае статья считается черновиком и не используется при формировании навигации. Ее можно будет найти на сайте, только если точно знать ее адрес. Используется, например, в том случае, чтобы дать почитать ограниченному кругу, которому автор разошлет URL личной почтой. Статус draft на сегодняшний день для статей работает, а для страниц почему-то нет. Однако, для страниц есть статус hidden &amp;mdash; скрытая. Страницы с таким статусом генерируются в том месте, где и должны (статьи со статусом draft &amp;mdash; в папке draft), однако на них не создаются ссылки в других местах сайта, то есть, опять же, попасть на такую страницу можно только введя ее адрес прямо в строке браузера. Ну, или щелкнув по ней, запустить на отображение, если она лежит у вас дома.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Authors: Если авторов, пишущих для сайта, несколько, то можно сделать поиск статей, принадлежащих конкретному перу. Если отсутствует, будет использоваться значение опции файла конфигурации AUTHOR.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Summary: Отображается в лентах статей &amp;mdash; в списках, отсортированных по времени, тегу, автору и все такое. Что интересно: запись должна быть в одну строку. Это уже в статье простые переносы (без пустой строки) игнорируются. В примере строка перенесена, и вот результат: то, что до переноса, отображается в summary, а то, что после &amp;mdash; уже в тексте статьи.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Как видно, не все метаданные являются настоятельно необходимыми, можно использовать лишь часть. Верно и обратное &amp;mdash; если вдруг понадобится какая-то хитрая переменная, не предусмотренная разработчиками Pelican, можно ее добавить в заголовок, а потом в шаблоне использовать, типа того:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Danger: red
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;А потом где-нибудь в шаблоне статьи (придется немного править тему), рядом с заголовком, вставить такое:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;article.danger&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;Класс опасности: &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;article.danger&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;И тогда в месте, определенном шаблоном, для статей с этой метаинформацией появится &amp;laquo;Класс опасности: red&amp;raquo;. А для прочих статей не появится ничего.&lt;/p&gt;
&lt;h2 id="_4"&gt;Переплавка заготовок&lt;/h2&gt;
&lt;p&gt;Стоит для массовости сделать еще одну заготовку-рыбу, с учетом необязательности тегов, файл &lt;code&gt;second.md&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Title: Заголовок второй статьи
Date: 2016-01-20 15:00
Category: Разное
Tags: блог, разное, тест
Summary: Еще одна рыба, просто для массовости.

Снова рыба, снова заготовка текста, просто так, для заполнения места. Ну, в 
самом деле, не цитировать же снова Цицерона &lt;span class="ss"&gt;&amp;amp;laquo;&lt;/span&gt;О пределах добра и 
зла&lt;span class="ss"&gt;&amp;amp;raquo;&lt;/span&gt;, да еще и в этом ужасном, хотя и общепринятом, подрезанном и 
искаженном виде.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Теперь надо сделать вручную папку &amp;laquo;articles&amp;raquo; в папке &amp;laquo;content&amp;raquo; и перенести туда оба файла. Даем команду в консоли&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;c:\python&lt;span class="m"&gt;33&lt;/span&gt;\Scripts\pelican.exe content
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Получаем в ответ&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Done: Processed &lt;span class="m"&gt;2&lt;/span&gt; articles&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; drafts&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; pages and &lt;span class="m"&gt;0&lt;/span&gt; hidden pages in &lt;span class="m"&gt;4&lt;/span&gt;.&lt;span class="m"&gt;30&lt;/span&gt; seconds.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Видим, что в обработке участвовало 2 статьи. При желании можно в папке &amp;laquo;content&amp;raquo; добавить папку &amp;laquo;pages&amp;raquo;, и сложить туда что-то подобное статье, чтобы посмотреть, чем в конечном итоге отличаются статьи от страниц, но это не принципиально. Интересно, что в папке &amp;laquo;output&amp;raquo; появились файлы, в том числе, &lt;code&gt;fish.html&lt;/code&gt; и &lt;code&gt;zagolovok-vtoroi-stati.html&lt;/code&gt;: одна именована по Slug, заданному явно, а другая &amp;mdash; по преобразованному автоматически. Это и есть наши статьи. Они появились на странице, открывающейся при запуске &lt;code&gt;index.html&lt;/code&gt;, причем, вторая, как ближайшая по времени &amp;mdash; выше по тексту и полностью, а первая &amp;mdash; в ленте, после &amp;laquo;Other articles&amp;raquo;, и с использованием Summary.&lt;/p&gt;
&lt;p&gt;Дизайн по-прежнему не то, чтобы ужасен &amp;mdash; он просто отсутствует напрочь. И ссылки работают плохо: &amp;laquo;Заголовок первой статьи&amp;raquo; или &amp;laquo;read more&amp;raquo; не дают возможности почитать первую статью. Никуда не ведут теги и категории. Пока что их можно посмотреть, прямо запустив соотвествующий файл (например, &lt;code&gt;tags.html&lt;/code&gt; или &lt;code&gt;first.html&lt;/code&gt;), заодно можно посмотреть, как Markdown-разметка переплавилась в HTML-разметку.&lt;/p&gt;
&lt;p&gt;Ну что же, теперь мы поднялись чуть выше фундамента и разобрались в основах написания контента. С вопросами дизайна &amp;mdash; к теме, с вопросами ссылок &amp;mdash; к файлам конфигурации. Но в следующий раз.&lt;/p&gt;</summary><category term="pelican"></category></entry><entry><title>Pelican и создание сайта — начало</title><link href="http://romeogolf.github.io/pelican-i-sozdanie-saita-nachalo.html" rel="alternate"></link><updated>2016-01-15T10:00:00+05:00</updated><author><name>RomeoGolf</name></author><id>tag:romeogolf.github.io,2016-01-15:pelican-i-sozdanie-saita-nachalo.html</id><summary type="html">&lt;h3 id="pelican"&gt;Почему статический сайт, почему Pelican и с чего начать&lt;/h3&gt;
&lt;p&gt;Стоит ли заводить сайт &amp;mdash; вопрос ставить не будем. Мотивы у всех разные, но если уж определился &amp;mdash; так тому и быть. Кто считает, что не стоит &amp;mdash; можно дальше не читать.&lt;/p&gt;
&lt;p&gt;Надо сразу упомянуть некоторые детали: излагается точка зрения автора, худо-бедно подтвержденная собственным опытом с использованием настольного компьютера под управлением Windows (XP и 7). &lt;/p&gt;
&lt;p&gt;Если возникает навязчивое желание или настоятельная необходимость поселить на просторах интернета немножечко себя, возникает масса поводов для раздумий. Нужно выбрать способ размещения сайта &amp;mdash; статический, с использованием системы управления контентом (CMS), что-нибудь совсем самодельное, может быть, с применением каких-нибудь фреймворков или даже без. При выборе CMS или генератора статических сайтов надо определиться с языком, на котором это дело будет крутиться. Надо выбрать хостинг со всеми вытекающими заботами &amp;mdash; при приемлемом уровне цены (а лучше &amp;mdash; халявы) нужно, чтобы хостер поддерживал нужную CMS и базу данных&amp;hellip; &lt;/p&gt;
&lt;p&gt;Конечно, сайт можно просто заказать. Разработку, оформление, размещение, поддержку, раскрутку&amp;hellip; Только пихай туда статьи и фотки. Но, во-первых, неинтересно, во-вторых, для хобби довольно-таки затратно. Подчеркиваю &amp;mdash; речь идет именно о хобби. &lt;/p&gt;
&lt;p&gt;Профессионалу очевидно &amp;mdash; нормальный инструмент требует соответствующих вложений. Профессиональный инструмент требует порой значительных затрат. Но он для того и служит, чтобы приносить заработок и окупаться. Если сайт предназначается для использования в профессиональной сфере &amp;mdash; это инструмент, и отношение к нему должно быть соответствующее. Для себя же это скорее игрушка, можно обойтись и самоделкой.&lt;/p&gt;
&lt;h4 id="_1"&gt;Почему &amp;laquo;статика&amp;raquo;&lt;/h4&gt;
&lt;p&gt;Итак, игрушку хотелось бы подешевле, но такую же, как настоящая. А хостеров так много, они такие разные&amp;hellip; Кто-то поддерживает PHP, а кто-то &amp;mdash; нет. Где-то можно разместить сайт с движком на Ruby или Python, но не везде. У кого-то MySQL, а у кого-то PostgreSQL&amp;hellip; А на самых дешевых (тем более, бесплатных) нет вообще ничего. И получается, что статический сайт не ограничен по площадке размещения &amp;mdash; он заработает везде!&lt;/p&gt;
&lt;p&gt;Еще один заметный плюс для &amp;laquo;чайника&amp;raquo; &amp;mdash; для того, чтобы посмотреть, на что похож готовый свежесобранный статический сайт, не требуется веб-сервер, даже локальный, и не нужен никакой движок &amp;mdash; CMS, фреймворк, свои костылевелосипеды &amp;mdash; ничего, только браузер. Запускаешь index.html в корне сайта и наслаждаешься результатом (ну, или страдаешь, но это уже вопросы кривизны рук и художественности вкуса).&lt;/p&gt;
&lt;p&gt;Можно упомянуть и такой условный плюс &amp;mdash; возможность поковыряться непосредственно в конечном результате &amp;mdash; поправить разметку, стили и все такое. Преимущество слабенькое, но для отладки, особенно если не очень-то разбираешься в HTML и CSS, может немножко помочь. Но лучше не надо.&lt;/p&gt;
&lt;p&gt;Прочие преимущества &amp;laquo;статики&amp;raquo; для простой игрушки с двумя десятками страниц не имеют особого значения, но давайте на них посмотрим:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Скорость загрузки страниц. Нет программной обработки запроса на генерацию страницы, не требуется времени на формирование.&lt;/li&gt;
&lt;li&gt;Безопасность. Не надо следить за обновлениями из-за внезапно обнаруженной критической уязвимости используемого софта, ибо нету нашего софта на сервере.&lt;/li&gt;
&lt;li&gt;Неустареваемость. Нет настоятельной необходимости следить за актуальностью софта по упомянутой причине. Технология и так устаревшая до безнадежности (первые сайты были именно статическими). Готовые страницы, лежащие на сервере, не зависят от версии генератора. От свежести используемой программы зависит, пожалуй, только удобство работы.&lt;/li&gt;
&lt;li&gt;Переносимость. Можно спокойно таскать с хостинга на хостинг хоть по десять раз на дню, не думая о том, подходит ли вам площадка. Все подходят.&lt;/li&gt;
&lt;li&gt;Контроль версий. Для статических сайтов можно вести историю, используя любую удобную систему контроля версий, в некоторых случаях это может быть удобно и полезно, опять же, разновидность резервного копирования.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Самый заметный недостаток статического сайта (который некоторые называют достоинством) &amp;mdash; отсутствие базы данных и средств работы с ней. Нет обработки информации от пользователя на стороне сервера, ее хранения и отображения, а значит, нет и обратной связи. Нельзя полностью автономно сделать комментарии, форум, формы заказа или запроса чего-либо, даже счетчик посещения страниц. &amp;laquo;Нельзя автономно&amp;raquo; &amp;mdash; еще не значит &amp;laquo;нельзя ни в какую&amp;raquo;. Можно встроить в код страницы и использовать сторонние сервисы, среди которых встречаются как хорошие, так и бесплатные.&lt;/p&gt;
&lt;h4 id="pelican_1"&gt;Почему Pelican&lt;/h4&gt;
&lt;p&gt;Ну, допустим, статический сайт. Но не полностью же вручную его делать! Мало того, что муторно и неинтересно, так еще в процессе можно многое забыть, упустить. Поправишь разметку одной страницы &amp;mdash; надо скопировать эту правку на все остальные. Изменишь имя или папку одной картинки или статьи &amp;mdash; разыскивай все ссылки и корректируй. Да и вообще, делать навигацию по сайту вручную достаточно непросто. Однако, эти операции автоматизируемы. &lt;/p&gt;
&lt;p&gt;Генераторы статических сайтов (по крайней мере, существенной частью) основаны на шаблонах страниц, так что о разметке, дизайне и стилях надо заботиться в одном месте &amp;mdash; в шаблоне. Тексты пишутся с использованием упрощенных языков разметки, типа того же &lt;a href="https://ru.wikipedia.org/wiki/Markdown"&gt;Markdown&lt;/a&gt;, что тоже упрощает дело. Навигация по сайту, типа меню или облака тегов, формируется автоматом, что не может не радовать. Остается выбрать генератор.&lt;/p&gt;
&lt;p&gt;Лично для меня выбор начался с языка. Те генераторы, которые я накопал в сети, написаны на Ruby, Python, Bash, CofeeScript, PHP. Причем, в основном встречались первые два. Учитывая работу в среде Windows, в любом случае надо устанавливать интерпретатор. Мне ближе всего из перечисленного Python, причем, 3.3 уже установлен. А из питонова гнезда пеликан показался самым симпатичным чисто субъективно &amp;mdash; вроде, немало хороших отзывов (хотя и другие не ругают), вроде, неплохая документация (ну, не у него одного), вроде, прилично информации помимо официальной (ну, у других даже не смотрел)&amp;hellip;&lt;/p&gt;
&lt;p&gt;Вообще-то говоря, язык написания генератора не важен до тех пор, пока не возникнет желание или необходимость написать собственный плагин или поправить/дополнить движок. Так что, имеет смысл обратить внимание на тот, у которого разработка не заглохла, но и не в зачаточной стадии. Pelican и здесь неплох.&lt;/p&gt;
&lt;h4 id="_2"&gt;Что же надо для начала&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Нулевое, в виде обеспечения всего остального &amp;mdash; нужно вычислительное устройство, подключенное к интернету. Настольный (или подстольный) компьютер, ноутбук, планшет, да хоть телефон, если хватит памяти, и операционная система позволяет установить Python. Интернет нужен сначала для установки недостающих модулей Python, потом для публикации результатов работы и наслаждения ими. Кажется, это очевидно. Само собой, нужен браузер. Чем свежее &amp;mdash; тем лучше. Ну, и не помешает предварительно-ознакомительно полистать пеликановую &lt;a href="http://docs.getpelican.com/en/3.6.3/" title="Pelican 3.6.3"&gt;документацию&lt;/a&gt;. К сожалению, на английском. Желателен файловый менеджер с поддержкой консоли &amp;mdash; вводом команд и просмотром результата. В Windows для этой цели хорош FAR, хотя можно обойтись и чистой консолью cmd.exe.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Первое &amp;mdash; Python. Язык скриптовый, интерпретируемый. Без интерпретатора программы на нем не пойдут. Во многих дистрибутивах Linux идет &amp;laquo;из коробки&amp;raquo; или ставится элементарно. Установка для Windows с &lt;a href="http://www.python.org/"&gt;официального сайта&lt;/a&gt; тоже не вызывает безумных трудностей, но есть некоторые особенности.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Если месье знает толк в извращениях и по-прежнему насилует Windows XP (или XP &amp;mdash; его), то Python 3.3 &amp;mdash; потолок. Версия 3.4 уже не пойдет.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Если по какой-то причине (например, по предыдущей) стоит именно 3.3, то в ней &amp;laquo;из коробки&amp;raquo; нет модуля pip, а без него будет заметно хуже, чем с ним. С версии 3.4 он должен уже идти в комплекте поставки, а на 3.0&amp;ndash;3.2 работа пеликана не гарантируется. Этот модуль нужен для установки остальных модулей, он умеет определять зависимости (если требуемому модулю для работы нужны еще какие-то), самостоятельно находить их и устанавливать. Pip можно взять, например, &lt;a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#pip"&gt;здесь&lt;/a&gt; или &lt;a href="http://pypi.python.org/pypi/pip/"&gt;здесь&lt;/a&gt;. При этом его тоже еще надо установить. Со скриптом  &lt;a href="https://pip.pypa.io/en/latest/installing.html#install-pip"&gt;get-pip.py&lt;/a&gt; у меня как-то сразу не заладилось, не стал разбираться в причинах. Запустил в консоли команду&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;C:\Python&lt;span class="m"&gt;33&lt;/span&gt;\python.exe pip&lt;span class="m"&gt;-7&lt;/span&gt;.&lt;span class="m"&gt;1&lt;/span&gt;.&lt;span class="m"&gt;2&lt;/span&gt;-py&lt;span class="m"&gt;2&lt;/span&gt;.py&lt;span class="m"&gt;3&lt;/span&gt;-none-any.whl&lt;span class="n"&gt;/pip&lt;/span&gt; install pip&lt;span class="m"&gt;-7&lt;/span&gt;.&lt;span class="m"&gt;1&lt;/span&gt;.&lt;span class="m"&gt;2&lt;/span&gt;-py&lt;span class="m"&gt;2&lt;/span&gt;.py&lt;span class="m"&gt;3&lt;/span&gt;-none-any.whl
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;из папки, в корне которой лежал скачанный &lt;code&gt;pip-7.1.2-py2.py3-none-any.whl&lt;/code&gt;, модуль установился. В качестве консоли использовал FAR &amp;mdash; тут тебе и командная строка, и простой выбор рабочего каталога. Напомню, речь идет о работе в Windows.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Официальная документация Pelican и некоторые его пользователи рекомендуют установить и использовать virtualenv. Сильно сомневаюсь в необходимости этой операции, особенно если Python планируется использовать только для Pelican.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Второе &amp;mdash; собственно Pelican. Установка выполняется очень просто в соответствии с документацией:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install pelican
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Здесь неочевидная тонкость для тех, кто с питонами на &amp;laquo;вы&amp;raquo;, особенно, если дело творится под Windows: это не команда интерпретатора Python, и вводить ее надо не в консоли Python, а просто в консоли &amp;mdash; FAR или cmd.exe. Можно создать текстовый файл с расширением .cmd или .bat с этой строчкой внутри и запустить его на выполнение с тем же эффектом. Эффект будет положительным, если известен путь к pip (например, прописан в переменной PATH или pip прямо тут, в текущей папке), ибо, по сути, это программа. В Windows, чтобы наверняка, можно написать&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;C:\Python&lt;span class="m"&gt;33&lt;/span&gt;\Scripts\pip.exe install pelican
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Если все пройдет, как задумано, pip установит модули, без которых Pelican работать не будет:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;feedgenerator, для генерации Atom feeds&lt;/li&gt;
&lt;li&gt;jinja2, для поддержки шаблонов, используемых при разработке сайта&lt;/li&gt;
&lt;li&gt;pygments, для подсветки синтаксиса примеров кода на публикуемых страницах&lt;/li&gt;
&lt;li&gt;docutils, для поддержки reStructuredText в качестве входного формата текстов для сайта&lt;/li&gt;
&lt;li&gt;pytz, для определения временной зоны&lt;/li&gt;
&lt;li&gt;blinker, для системы сигналов, широковещательных и между объектами&lt;/li&gt;
&lt;li&gt;unidecode, для ASCII-транслитерации текста Unicode&lt;/li&gt;
&lt;li&gt;six, утилиты совместимости Python 2 и 3&lt;/li&gt;
&lt;li&gt;MarkupSafe, для безопасной работы со строками на языках разметки XML/HTML/XHTML&lt;/li&gt;
&lt;li&gt;python-dateutil, чтобы читать даты в метаданных&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;В конце будет установлен и сам pelican.&lt;/p&gt;
&lt;p&gt;Аналогичным образом стоит установить Markdown, модуль для обработки языка разметки, на котором писать куда удобнее, чем на HTML:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install Markdown
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Хотя можно писать и на reStructuredText (он же reST), поддержка которого к этому моменту уже установлена. Но лучше все равно поставить сразу &amp;mdash; не помешает, и его могут требовать некоторые темы или плагины.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="_3"&gt;Можно попробовать, заработает ли&lt;/h4&gt;
&lt;p&gt;Создадим папку (директорию, каталог, как хотите) для проекта сайта. Практически где угодно. Например, &lt;code&gt;D:\site&lt;/code&gt;. Зайдя в эту папку, запустим команду&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;C:\python&lt;span class="m"&gt;33&lt;/span&gt;\Scripts\pelican-quickstart.exe
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;То есть, документация рекомендует быть проще и скомандовать &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;но, напоминаю, это не просто команда, это программа, которая команду выполняет, и лежит она в папке Scripts там, где установлен Python
Программка запустится, и мы будем отвечать на вопросы по-английски, появляющиеся в окне консоли. Если в конце вопроса есть в квадратных скобках вариант ответа по умолчанию или (Y/n), можно тупо давить ввод. Если нет &amp;mdash; надо хоть что-то писать. В конце этой викторины (если использовать ответы по умолчанию) в выбранной папке появятся еще две папки &amp;mdash; content и output, а также набор файлов &amp;mdash; develop_server.sh, fabfile.py, Makefile, pelicanconf.py, publishconf.py.&lt;/p&gt;
&lt;p&gt;Уже сейчас, не написав ни строчки, можно собрать полупустой сайт, если эту заготовку позволительно так назвать. Для этого, опять же в корне &lt;code&gt;D:\site&lt;/code&gt;, надо дать команду&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;c:\python&lt;span class="m"&gt;33&lt;/span&gt;\Scripts\pelican.exe content
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;И хотя папка content (предназначенная для заготовок статей) пуста, и на выходе будет все по нулям:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Done: Processed &lt;span class="m"&gt;0&lt;/span&gt; articles&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; drafts&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; pages and &lt;span class="m"&gt;0&lt;/span&gt; hidden pages in &lt;span class="m"&gt;0&lt;/span&gt;.&lt;span class="m"&gt;08&lt;/span&gt; seconds.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;в папке output появится папка theme и файлы html: archives, authors, categories, index и tags. Файл index.html можно запустить и посмотреть, что за ерунда получилась. Там будет заголовок и немножко ссылок на сайты инструментов, при помощи которых это всё получилось: Pelican, Python.org и Jinja2. И всё это упаковано в умопомрачительный дизайн в крайне минималистском стиле.&lt;/p&gt;
&lt;p&gt;Итого: инструмент готов к использованию.&lt;/p&gt;
&lt;h4 id="p-s-pelican-quickstart"&gt;P. S. Разбор анкеты pelican-quickstart&lt;/h4&gt;
&lt;p&gt;Для тех, у кого совсем-совсем плохо с английским, или очень-очень лениво &amp;mdash; что от нас хочет утилита pelican-quickstart, вольный перевод.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Welcome to pelican-quickstart v3.6.3.&lt;/code&gt; &amp;mdash; Добро пожаловать. Номер версии.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;This script will help you create a new Pelican-based website.&lt;/code&gt; &amp;mdash; Этот скрипт поможет вам создать новый пеликановый вебсайт.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Please answer the following questions so this script can generate the files needed by Pelican.&lt;/code&gt; &amp;mdash; Пожалуйста, ответьте на следующие вопросы, чтобы скрипт сгенерировал файлы, необходимые Пеликану.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;gt; Where do you want to create your new web site? [.]&lt;/code&gt; Где вы желаете создать сайт? По умолчанию &amp;mdash; прямо здесь, в этой папке. Можно просто нажать Enter.&lt;br /&gt;
&lt;code&gt;&amp;gt; What will be the title of this web site?&lt;/code&gt; Какой заголовок у этого сайта? Надо хоть что-нибудь написать.&lt;br /&gt;
&lt;code&gt;&amp;gt; Who will be the author of this web site?&lt;/code&gt; Кто будет автор этого сайта? Тоже надо написать.&lt;br /&gt;
&lt;code&gt;&amp;gt; What will be the default language of this web site? [en]&lt;/code&gt; Какой будет язык по-умолчанию для этого сайта? Предлагается английский, можно написать ru, но вообще-то неважно, все равно потом лезть в настройки и можно поправить позже.&lt;br /&gt;
&lt;code&gt;&amp;gt; Do you want to specify a URL prefix? e.g., http://example.com   (Y/n)&lt;/code&gt; Желаете указать URL-префикс? Если жамкнуть ввод, будет понято, что таки да, и появится следующий вопрос:&lt;br /&gt;
&lt;code&gt;&amp;gt; What is your URL prefix? (see above example; no trailing slash)&lt;/code&gt; А какой тогда префикс? (см. пример выше, без слэша в конце), но можно поставить, например, тупо слэш.&lt;br /&gt;
&lt;code&gt;&amp;gt; Do you want to enable article pagination? (Y/n)&lt;/code&gt; Вам нужно разбиение на несколько страниц статей? (по умолчанию будет &amp;laquo;да!&amp;raquo;, как и в других местах с вопросом Y/n, или &amp;laquo;нет!&amp;raquo;, если y/N, то есть, смотря какая буква заглавная)&lt;br /&gt;
&lt;code&gt;&amp;gt; How many articles per page do you want? [10]&lt;/code&gt; Сколько статей на странице вам надо? (по умолчанию &amp;mdash; 10)&lt;br /&gt;
&lt;code&gt;&amp;gt; What is your time zone? [Europe/Paris]&lt;/code&gt; Ваша временная зона? Или, по-русски говоря, часовой пояс? (По умолчанию &amp;mdash; Париж, свою можно спросить у &lt;a href="https://en.wikipedia.org/wiki/Time_zone" title="Time zone"&gt;Вики&lt;/a&gt;)&lt;br /&gt;
&lt;code&gt;&amp;gt; Do you want to generate a Fabfile/Makefile to automate generation and publishing? (Y/n)&lt;/code&gt; Вам надо сделать Fabfile/Makefile для автоматической генерации и публикации? Вообще-то, не обязательно. Поначалу будем делать вручную, а там видно будет.&lt;br /&gt;
&lt;code&gt;&amp;gt; Do you want an auto-reload &amp;amp; simpleHTTP script to assist with theme and site development? (Y/n)&lt;/code&gt; Вам нужна автоперезагрузка скрипта simpleHTTP для поддержки разработки сайта и темы? Вообще-то, можно обойтись без этого скрипта совсем.&lt;br /&gt;
&lt;code&gt;&amp;gt; Do you want to upload your website using FTP? (y/N)&lt;/code&gt; Хотите выкладывать ваш сайт на хостинг с использованием FTP? Если честно, пока не собираемся выкладывать, а потом определимся.&lt;br /&gt;
&lt;code&gt;&amp;gt; Do you want to upload your website using SSH? (y/N)&lt;/code&gt; Хотите выгружать через SSH?&lt;br /&gt;
&lt;code&gt;&amp;gt; Do you want to upload your website using Dropbox? (y/N)&lt;/code&gt; или Dropbox?&lt;br /&gt;
&lt;code&gt;&amp;gt; Do you want to upload your website using S3? (y/N)&lt;/code&gt; или S3?&lt;br /&gt;
&lt;code&gt;&amp;gt; Do you want to upload your website using Rackspace Cloud Files? (y/N)&lt;/code&gt; или Rackspace Cloud Files? (японский городовой, кто это вообще?)&lt;br /&gt;
&lt;code&gt;&amp;gt; Do you want to upload your website using GitHub Pages? (y/N)&lt;/code&gt; Будете использовать GitHub Pages? (Вот, это уже ближе к правде&amp;hellip;)&lt;br /&gt;
&lt;code&gt;Done. Your new project is available at d:\site&lt;/code&gt; Всё. Ваш новый проект доступен в указанной папке.  &lt;/p&gt;</summary><category term="pelican"></category></entry><entry><title>Бродяга</title><link href="http://romeogolf.github.io/brodiaga.html" rel="alternate"></link><updated>2016-01-11T15:00:00+05:00</updated><author><name>RomeoGolf</name></author><id>tag:romeogolf.github.io,2016-01-11:brodiaga.html</id><summary type="html">&lt;p&gt;Он шагал издалека,&lt;br /&gt;
Или, может, издалёка,&lt;br /&gt;
И была ему легка&lt;br /&gt;
Эта дальняя дорога.  &lt;/p&gt;
&lt;p&gt;С самодельным рюкзаком&lt;br /&gt;
И походкой пилигрима.&lt;br /&gt;
То, что для него легко &amp;mdash;&lt;br /&gt;
Для других неодолимо.  &lt;/p&gt;
&lt;p&gt;Проходил по деревням,&lt;br /&gt;
Был ни весел, ни печален.&lt;br /&gt;
Вслед глядела ребятня,&lt;br /&gt;
И собаки не рычали.  &lt;/p&gt;
&lt;p&gt;То, что видим мы во снах,&lt;br /&gt;
Видел он не раз в дороге,&lt;br /&gt;
Понимать умел и знал&lt;br /&gt;
Недоступное для многих.  &lt;/p&gt;
&lt;p&gt;В глубине серьезных глаз&lt;br /&gt;
Отражались быль и небыль.&lt;br /&gt;
Повидал побольше нас,&lt;br /&gt;
Но не все, что сам хотел бы.  &lt;/p&gt;
&lt;p&gt;1996&lt;/p&gt;</summary><category term="стихи"></category></entry><entry><title>Recorder Fingering Quiz</title><link href="http://romeogolf.github.io/recorder-fingering-quiz.html" rel="alternate"></link><updated>2016-01-11T15:00:00+05:00</updated><author><name>RomeoGolf</name></author><id>tag:romeogolf.github.io,2016-01-11:recorder-fingering-quiz.html</id><summary type="html">&lt;div align="center"&gt;

&lt;div style="float:right"&gt;
&lt;a href="https://play.google.com/store/apps/details?id=com.triangulum.rfquiz_free&amp;utm_source=global_co&amp;utm_medium=prtnr&amp;utm_content=Mar2515&amp;utm_campaign=PartBadge&amp;pcampaignid=MKT-AC-global-none-all-co-pr-py-PartBadges-Oct1515-1"&gt;&lt;img class="badge" alt="Get it on Google Play" src="https://play.google.com/intl/en_us/badges/images/apps/ru-play-badge.png" /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;div style="float:right"&gt; &lt;img alt="QR-code for rfquiz" src="./images/rfquiz_market.png" title="QR-код для RFQuiz в Google Play" style="margin-right:30px;" /&gt; &lt;/div&gt;

&lt;/div&gt;

&lt;p&gt;Предназначен для заучивания аппликатуры блокфлейты. Необходимо узнать изображенную на нотном стане ноту и определить соответствующий ей набор отверстий блокфлейты, которые должны быть открыты, закрыты, либо закрыты наполовину.&lt;/p&gt;
&lt;p&gt;Тренажер может быть полезен новичкам, только начавшим осваивать инструмент, а также тем, кто некоторое время играет, скажем, на сопрано, но желает освоить альт, либо перейти от блокфлейты германской системы на систему барокко.&lt;/p&gt;
&lt;p&gt;В зависимости от настроек, тренажер может подсказывать, в каких отверстиях сделана ошибка, разрешать или нет переход к следующей ноте при ошибочном ответе, перебирать ноты в возрастающем или случайном порядке.&lt;/p&gt;
&lt;p&gt;Приложение расчитано на использование в устройствах с относительно небольшим размером экрана, в первую очередь &amp;mdash; в телефонах.&lt;/p&gt;
&lt;p&gt;Для меня, сильно начинающего, одной из основных трудностей при игре с листа было выучивание аппликатуры. Хотелось бы, чтобы при виде ноты пальцы сами вставали на нужные позиции. Наверное, этот вопрос неплохо решается постоянными упражнениями, ежедневно и не по пять минут. Однако, к сожалению, времени на это у меня нет. Поэтому я попробовал состряпать такую программу &amp;mdash; она показывает ноту, а я называю ее в виде слога, в виде латинской буквы и выбираю отверстия, которые должны быть закрыты или полузакрыты.&lt;/p&gt;
&lt;p&gt;Программа для телефона, поэтому можно осваивать аппликатуру (зубрить, проверять себя) практически везде &amp;mdash; на работе в свободное время, в транспорте, качая люльку с ребенком, помешивая кашу в кастрюльке &amp;mdash; не мешая никому звуками и используя одну руку.&lt;/p&gt;
&lt;p&gt;Кроме того, программа поможет освоить аппликатуру разных систем (барокко, германской) или разных строев (сопрано, альт). А заодно запомнить латинское обозначение нот и диезов-бемолей для использования их в программах-редакторах.  Я пользовался LilyPond, и мне приходилось мысленно пересчитывать слоги в буквы, а is и es путались.&lt;/p&gt;
&lt;p&gt;В планах на будущее:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;сделать справку&lt;/li&gt;
&lt;li&gt;сделать возможным использование альтернативных аппликатур&lt;/li&gt;
&lt;li&gt;сделать знаки альтерации не только случайные (у самой ноты), но и при ключе&lt;/li&gt;
&lt;li&gt;по возможности добавить настройки для изменения внешнего вида &amp;mdash; цвет, размер и все такое, может быть, использование тем и прочие фишки дизайна, но это ближе к последней очереди.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Прорабатывается версия, в которой:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;более удобный выбор слога и буквы ноты&lt;/li&gt;
&lt;li&gt;есть возможность сужения диапазона&lt;/li&gt;
&lt;li&gt;есть возможность выбора режима, в котором диапазон (полный или пользовательский) проходится без повторов&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;На текущий момент лично меня устраивает почти все.
Хотелось бы узнать у общественности:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;кому-то, кроме меня, это надо?&lt;/li&gt;
&lt;li&gt;ежели таки да, то как оно в плане интерфейса и, не побоюсь этого слова, дизайна?&lt;/li&gt;
&lt;li&gt;что еще стоит добавить? (только не звуки, они увеличат размер в разы, а реальной пользы от них нет)&lt;/li&gt;
&lt;li&gt;Насколько корректно показывать до бемоль и требовать сказать, что это си?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ну и интересно, как оно пойдет на других аппаратах. У меня Samsung XCover2 с Android 4.1.2, остальное выборочно проверял только на эмуляторах.&lt;/p&gt;</summary><category term="rfquiz"></category><category term="triangulum"></category></entry><entry><title>Первая запись</title><link href="http://romeogolf.github.io/first_record.html" rel="alternate"></link><updated>2016-01-11T10:00:00+05:00</updated><author><name>RomeoGolf</name></author><id>tag:romeogolf.github.io,2016-01-11:first_record.html</id><summary type="html">&lt;p&gt;Первая запись в блоге. Первый опыт в сайтостроении (не считая давних вялых попыток, не ушедших дальше локального веб-сервера). Первая попытка применить и немного расширить свои непрофессиональные знания в области HTML, CSS и прочих веб-технологий.&lt;/p&gt;
&lt;p&gt;Сознаю, что моя страничка не сможет стать уникальным или выдающимся явлением. Однако намерен хотя бы не увеличивать энтропию &amp;mdash; копировать чужое только для цитирования, весь текст &amp;mdash; только авторский. Ну, по крайней мере, хотя бы авторский перевод.&lt;/p&gt;
&lt;p&gt;Попытаюсь быть местами интересным, местами полезным. &lt;/p&gt;</summary><category term="разное"></category></entry></feed>